2025-08-15 19:49:04.466 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('3d4c033e-35f5-401b-a23d-39b0144b9da0'), timestamp=datetime.datetime(2025, 8, 15, 18, 17, 20, 979525), session_id=UUID('789a5197-00a0-4e79-917f-5063e5d7fcba'), content='Say some thing interseting abut code', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('fcd0c66d-cb4c-4963-9ffe-11d0bb4d2230'), timestamp=datetime.datetime(2025, 8, 15, 18, 17, 23, 136228), session_id=UUID('789a5197-00a0-4e79-917f-5063e5d7fcba'), content='Code is more than just a set of instructions—it’s a living, breathing language that can tell stories, solve puzzles, and even create art.  \nWhen you look at a well‑written program, you can see patterns that resemble poetry: the rhythm of loops, the cadence of function calls, and the harmony of data structures working together.  \n\n**Example: Recursion as a Narrative**  \nConsider the classic “Tower of Hanoi” problem. The solution is a recursive function that moves disks from one peg to another. Each recursive call is a chapter in the story, and the base case (moving a single disk) is the climax. The elegance of recursion lies in its ability to break a complex problem into identical, smaller subproblems—much like a writer breaking a novel into scenes.  \n\n**Example: Code Golf as Minimalist Art**  \nIn code golf, programmers compress a solution into the fewest characters possible. It’s like writing a haiku: every character must serve a purpose. The challenge forces you to think about language features, data types, and algorithmic shortcuts in a way that ordinary coding rarely does.  \n\n**Example: Functional Programming as a Symphony**  \nFunctional languages treat functions as first‑class citizens. Think of a pipeline of pure functions as a musical score: each function is a motif that can be repeated, inverted, or combined with others. Because pure functions have no side effects, the entire composition becomes predictable and testable—just like a well‑notated symphony.  \n\nSo next time you write code, remember that you’re not just instructing a machine—you’re composing a piece of digital art that can be read, re‑interpreted, and admired by others.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('c8f01683-10ec-4f8b-b461-f6471a4116fb'), timestamp=datetime.datetime(2025, 8, 15, 18, 17, 52, 52282), session_id=UUID('789a5197-00a0-4e79-917f-5063e5d7fcba'), content='Sing some code', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('76975d38-c790-4022-89c9-87acc9e9f6ca'), timestamp=datetime.datetime(2025, 8, 15, 18, 17, 54, 90764), session_id=UUID('789a5197-00a0-4e79-917f-5063e5d7fcba'), content='', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('17f2322f-4419-493f-a61b-b930f6d2a7ca'), timestamp=datetime.datetime(2025, 8, 15, 18, 18, 15, 325798), session_id=UUID('789a5197-00a0-4e79-917f-5063e5d7fcba'), content='Can you give detail instruction on how to use git with example code snippets', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('f95a4384-f39d-4355-bb86-12101cbcdddd'), timestamp=datetime.datetime(2025, 8, 15, 18, 18, 17, 480443), session_id=UUID('789a5197-00a0-4e79-917f-5063e5d7fcba'), content='## Getting Started with Git  \nBelow is a step‑by‑step guide that walks you through the most common Git workflows.  \nFeel free to copy the snippets into your terminal or a script file and adapt them to your project.\n\n---\n\n### 1. Install Git\n\n| OS | Command |\n|----|---------|\n| **macOS** | `brew install git` |\n| **Ubuntu/Debian** | `sudo apt-get install git` |\n| **Windows** | Download the installer from <https://git-scm.com/download/win> |\n\nVerify the installation:\n\n```bash\ngit --version\n# → git version 2.39.2 (example)\n```\n\n---\n\n### 2. Configure Your Identity\n\n```bash\ngit config --global user.name  "Your Name"\ngit config --global user.email "you@example.com"\n```\n\nCheck the config:\n\n```bash\ngit config --list\n```\n\n---\n\n### 3. Create a New Repository\n\n```bash\nmkdir my-project\ncd my-project\ngit init\n```\n\n`git init` creates a hidden `.git` directory that stores all metadata.\n\n---\n\n### 4. Add Files and Commit\n\n```bash\n# Create a simple file\necho "Hello, Git!" > hello.txt\n\n# Stage the file\ngit add hello.txt\n\n# Commit the change\ngit commit -m "Add hello.txt with greeting"\n```\n\n> **Tip:**  \n> `git add .` stages *all* modified files in the current directory and below.\n\n---\n\n### 5. View Commit History\n\n```bash\ngit log --oneline\n# → 3f5e2a1 Add hello.txt with greeting\n```\n\nFor a more visual graph:\n\n```bash\ngit log --oneline --graph --decorate\n```\n\n---\n\n### 6. Branching & Merging\n\n#### Create a Branch\n\n```bash\ngit branch feature/awesome\n```\n\n#### Switch to the Branch\n\n```bash\ngit checkout feature/awesome\n# or the shorthand\ngit switch feature/awesome\n```\n\n#### Make Changes & Commit\n\n```bash\necho "Awesome feature" >> feature.txt\ngit add feature.txt\ngit commit -m "Add feature.txt with awesome content"\n```\n\n#### Merge Back to `main`\n\n```bash\ngit checkout main\ngit merge feature/awesome\n```\n\nIf there are conflicts, Git will mark the conflicted files. Resolve them, then:\n\n```bash\ngit add <resolved-file>\ngit commit\n```\n\n---\n\n### 7. Working with Remote Repositories\n\n#### Add a Remote\n\n```bash\ngit remote add origin https://github.com/your-username/my-project.git\n```\n\n#### Push Branches\n\n```bash\n# Push main\ngit push -u origin main\n\n# Push a feature branch\ngit push -u origin feature/awesome\n```\n\n> `-u` sets the upstream so future `git push`/`git pull` commands can be run without specifying the remote/branch.\n\n#### Pull Latest Changes\n\n```bash\ngit pull origin main\n```\n\n---\n\n### 8. Common Git Commands Cheat‑Sheet\n\n| Purpose | Command | Example |\n|---------|---------|---------|\n| Show status | `git status` | `git status` |\n| Show diff | `git diff` | `git diff` |\n| Undo last commit (keep changes) | `git reset --soft HEAD~1` | `git reset --soft HEAD~1` |\n| Undo last commit (discard changes) | `git reset --hard HEAD~1` | `git reset --hard HEAD~1` |\n| Revert a commit (creates a new commit) | `git revert <hash>` | `git revert 3f5e2a1` |\n| Delete a branch locally | `git branch -d <branch>` | `git branch -d feature/awesome` |\n| Delete a branch remotely | `git push origin --delete <branch>` | `git push origin --delete feature/awesome` |\n\n---\n\n### 9. A Mini‑Project Workflow Example\n\n```bash\n# 1. Clone an existing repo\ngit clone https://github.com/your-username/awesome-lib.git\ncd awesome-lib\n\n# 2. Create a new feature branch\ngit checkout -b feature/new-api\n\n# 3. Make changes\necho "export const newApi = () => {};" >> src/api.js\ngit add src/api.js\n\n# 4. Commit\ngit commit -m "Add new API endpoint"\n\n# 5. Push to remote\ngit push -u origin feature/new-api\n\n# 6. Open a Pull Request on GitHub\n#    (GitHub UI will guide you)\n\n# 7. After review, merge the PR\n#    (GitHub UI will handle the merge)\n\n# 8. Pull the updated main branch locally\ngit checkout main\ngit pull origin main\n```\n\n---\n\n### 10. Troubleshooting Tips\n\n| Issue | Fix |\n|-------|-----|\n| **“fatal: not a git repository** | Ensure you’re inside a folder that contains a `.git` directory. |\n| **Merge conflicts** | Open the conflicted file, look for `<<<<<<<`, `=======`, `>>>>>>>` markers, edit, then `git add` and `git commit`. |\n| **Remote authentication fails** | Use SSH keys or a personal access token (PAT) instead of a password. |\n| **Untracked files appear after `git reset`** | `git clean -fd` will remove untracked files/directories. |\n\n---\n\n## Wrap‑Up\n\nGit is a powerful tool that, once mastered, lets you:\n\n- Keep a clean history of every change.\n- Experiment safely on branches.\n- Collaborate seamlessly with others.\n\nStart by following the steps above, experiment with branching and merging, and soon you’ll feel comfortable navigating any Git workflow. Happy coding!', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('e2bb6b67-dd97-420f-8748-8c1756e19b46'), timestamp=datetime.datetime(2025, 8, 15, 18, 50, 3, 869351), session_id=UUID('789a5197-00a0-4e79-917f-5063e5d7fcba'), content='Give differnce between c and c ++ in tabluar fomrat', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('fc409626-35a7-4777-8f99-96c3fbc680a7'), timestamp=datetime.datetime(2025, 8, 15, 18, 50, 5, 689025), session_id=UUID('789a5197-00a0-4e79-917f-5063e5d7fcba'), content='Below is a concise, side‑by‑side comparison of **C** and **C++**.  \nThe table highlights the most common distinctions, followed by a short paragraph that puts the differences into context and gives a quick code example for each side.\n\n| Feature | C | C++ |\n|---------|---|-----|\n| **Paradigm** | Procedural (functions + data) | Multi‑paradigm: procedural, object‑oriented, generic, and functional |\n| **Compilation unit** | Single translation unit per file | Separate compilation with header files (`.h/.hpp`) and source files (`.c/.cpp`) |\n| **Data abstraction** | `struct` only; no encapsulation | `class` with public/private/protected members; encapsulation, inheritance, polymorphism |\n| **Memory management** | Manual (`malloc`/`free`) | Manual (`new`/`delete`) + RAII (constructors/destructors) |\n| **Standard library** | Minimal (stdio, stdlib, string.h, etc.) | Rich STL (containers, algorithms, iterators, smart pointers, etc.) |\n| **Type safety** | Limited (implicit conversions, no function overloading) | Stronger (function overloading, templates, type inference with `auto`) |\n| **Exception handling** | None (error codes, `errno`) | `try`/`catch`/`throw` with stack unwinding |\n| **Namespace support** | None | `namespace` keyword to avoid name clashes |\n| **Operator overloading** | Not allowed | Allowed for many built‑in operators (`+`, `-`, `<<`, etc.) |\n| **Templates** | None | Compile‑time generics (`template<class T>`) |\n| **Inline functions** | `static inline` in headers | `inline` keyword; compiler‑inlined automatically |\n| **File I/O** | `fopen`, `fread`, `fwrite` | `fstream`, `ifstream`, `ofstream` (stream‑based) |\n| **String handling** | C‑style null‑terminated arrays (`char*`) | `std::string` (dynamic, safe, rich API) |\n| **Standard entry point** | `int main(void)` | `int main()` (same, but can use `int main(int argc, char* argv[])`) |\n| **Preprocessor** | Full preprocessor (`#define`, `#include`, `#ifdef`) | Same, but often avoided in favor of templates and inline functions |\n\n---\n\n### Quick Context & Code Snippets\n\n- **Procedural vs. Object‑oriented**  \n  *C*:  \n  ```c\n  struct Point { int x; int y; };\n  void move(struct Point *p, int dx, int dy) { p->x += dx; p->y += dy; }\n  ```\n  *C++*:  \n  ```cpp\n  class Point { public: int x, y; void move(int dx, int dy){ x+=dx; y+=dy; } };\n  ```\n\n- **Memory Management**  \n  *C*:  \n  ```c\n  int *arr = malloc(10 * sizeof(int));\n  /* ... */\n  free(arr);\n  ```\n  *C++*:  \n  ```cpp\n  int *arr = new int[10];\n  /* ... */\n  delete[] arr;\n  ```\n\n- **Exception Handling**  \n  *C*:  \n  ```c\n  if (file == NULL) { perror("open"); exit(1); }\n  ```\n  *C++*:  \n  ```cpp\n  try { std::ifstream f("data.txt"); if (!f) throw std::runtime_error("open"); }\n  catch (const std::exception &e) { std::cerr << e.what(); }\n  ```\n\n- **Templates vs. Macros**  \n  *C*:  \n  ```c\n  #define MAX(a,b) ((a) > (b) ? (a) : (b))\n  ```\n  *C++*:  \n  ```cpp\n  template<typename T> constexpr T max(const T& a, const T& b){ return a > b ? a : b; }\n  ```\n\n---\n\n### Takeaway\n\n- **C** is ideal when you need tight control over hardware, minimal runtime overhead, or compatibility with legacy code.  \n- **C++** builds on C’s strengths but adds powerful abstractions that make large‑scale software easier to write, maintain, and extend.  \n\nUse the table as a quick reference, and dive deeper into each feature as your project’s needs evolve.', files=None, model_response_time_ms=None)]
2025-08-15 19:49:04.538 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('3d4c033e-35f5-401b-a23d-39b0144b9da0'), 'timestamp': datetime.datetime(2025, 8, 15, 18, 17, 20, 979525), 'session_id': UUID('789a5197-00a0-4e79-917f-5063e5d7fcba'), 'content': 'Say some thing interseting abut code', 'files': [], 'model_response_time_ms': None}
2025-08-15 19:49:04.538 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('3d4c033e-35f5-401b-a23d-39b0144b9da0'), 'timestamp': datetime.datetime(2025, 8, 15, 18, 17, 20, 979525), 'session_id': UUID('789a5197-00a0-4e79-917f-5063e5d7fcba'), 'content': 'Say some thing interseting abut code', 'files': [], 'model_response_time_ms': None}
2025-08-15 19:49:04.784 | INFO     | src.main:log_requests:54 - GET /sessions/history/789a5197-00a0-4e79-917f-5063e5d7fcba → 200 (3126.09ms)
2025-08-15 19:49:04.784 | INFO     | src.main:log_requests:54 - GET /sessions/history/789a5197-00a0-4e79-917f-5063e5d7fcba → 200 (3126.09ms)
2025-08-15 19:53:42.126 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/7e7f53ca-1b5a-4d6d-816a-83de0c7c9a9f
2025-08-15 19:53:42.126 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/7e7f53ca-1b5a-4d6d-816a-83de0c7c9a9f
2025-08-15 19:53:42.127 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/7e7f53ca-1b5a-4d6d-816a-83de0c7c9a9f → 200 (1.0ms)
2025-08-15 19:53:42.127 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/7e7f53ca-1b5a-4d6d-816a-83de0c7c9a9f → 200 (1.0ms)
2025-08-15 19:53:42.130 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/7e7f53ca-1b5a-4d6d-816a-83de0c7c9a9f
2025-08-15 19:53:42.130 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/7e7f53ca-1b5a-4d6d-816a-83de0c7c9a9f
2025-08-15 19:53:42.131 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/7e7f53ca-1b5a-4d6d-816a-83de0c7c9a9f → 200 (0.99ms)
2025-08-15 19:53:42.131 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/7e7f53ca-1b5a-4d6d-816a-83de0c7c9a9f → 200 (0.99ms)
2025-08-15 19:53:42.438 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/7e7f53ca-1b5a-4d6d-816a-83de0c7c9a9f
2025-08-15 19:53:42.438 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/7e7f53ca-1b5a-4d6d-816a-83de0c7c9a9f
2025-08-15 19:53:43.225 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-15 19:53:43.225 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-15 19:53:43.498 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/7e7f53ca-1b5a-4d6d-816a-83de0c7c9a9f
2025-08-15 19:53:43.498 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/7e7f53ca-1b5a-4d6d-816a-83de0c7c9a9f
2025-08-15 19:53:44.300 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-15 19:53:44.300 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-15 19:53:44.301 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/b7444224-11c9-499b-be5a-bac9797b53b4
2025-08-15 19:53:44.301 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/b7444224-11c9-499b-be5a-bac9797b53b4
2025-08-15 19:53:44.302 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/b7444224-11c9-499b-be5a-bac9797b53b4 → 200 (1.0ms)
2025-08-15 19:53:44.302 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/b7444224-11c9-499b-be5a-bac9797b53b4 → 200 (1.0ms)
2025-08-15 19:53:44.631 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/b7444224-11c9-499b-be5a-bac9797b53b4
2025-08-15 19:53:44.631 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/b7444224-11c9-499b-be5a-bac9797b53b4
2025-08-15 19:53:45.407 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('1aac3db6-9314-4c9c-81c6-45945b6933a4'), timestamp=datetime.datetime(2025, 8, 15, 17, 34, 56, 420794), session_id=UUID('b7444224-11c9-499b-be5a-bac9797b53b4'), content='What did you learn from codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('13122d6c-2305-4f84-8b09-89c65d1ed4e2'), timestamp=datetime.datetime(2025, 8, 15, 17, 34, 58, 264468), session_id=UUID('b7444224-11c9-499b-be5a-bac9797b53b4'), content='From a quick dive into the repository, here’s what I’ve pieced together about the project’s structure, purpose, and key components:\n\n---\n\n### 1. **High‑level Purpose**\n\nCentralGPT is a **backend service** that lets users chat with multiple large‑language‑model (LLM) providers (Mistral, Ollama, Groq, TogetherAI, etc.) while also offering:\n\n- **GitHub integration** – fetch files from any repo (public or private) by specifying user, repo, branch, and commit.\n- **PDF & document retrieval** – upload PDFs and perform Retrieval‑Augmented Generation (RAG) to answer context‑aware questions.\n- **Vector search** – uses Qdrant for fast similarity search over document embeddings.\n\n---\n\n### 2. **Core Tech Stack**\n\n| Layer | Technology | Why it matters |\n|-------|------------|----------------|\n| **Framework** | FastAPI | Lightweight, async‑friendly API layer. |\n| **LLM Framework** | LangChain | Provides a unified interface to multiple LLM providers and handles prompt construction, chaining, and memory. |\n| **Validation** | Pydantic | Schema validation for request/response models. |\n| **Databases** | Redis, PostgreSQL, Qdrant | Redis for session caching, PostgreSQL for persistent chat history, Qdrant for vector embeddings. |\n| **Containerization** | Docker | Easy deployment and scaling. |\n| **Deployment** | Azure App Service | Target cloud platform. |\n| **Git Integration** | PyGithub | Simplifies GitHub API calls. |\n\n---\n\n### 3. **Project Layout (Key Files)**\n\n| Path | What it does |\n|------|--------------|\n| `src/main.py` | FastAPI app entry point (not shown but implied). |\n| `src/router/messages.py` | API endpoints for chat messages (e.g., sending a message, retrieving history). |\n| `src/db/__init__.py` | Exposes the database engine, session factory, and dependency injection helper (`get_db`). |\n| `src/models/__init__.py` | Re‑exports Pydantic schemas: `User`, `RefreshToken`, `Session`, `Message`, `ChatMessage`, `ModelInfo`, `ToolCall`, `ChatbotSchema`. |\n| `src/db/dbs.py` | (Not shown) likely contains the SQLAlchemy engine and session setup. |\n| `README.md` | Detailed setup instructions, environment variables, and feature list. |\n\n---\n\n### 4. **Environment Configuration**\n\nThe `.env` file must contain:\n\n```dotenv\nDATABASE_URL=\nREDIS_URL=\nQDRANT_URL=\nQDRANT_API_KEY=\nGROQ_API_KEY=\nCOHERE_API_KEY=\nHUGGINGFACE_HUB_TOKEN=\nGITHUB_TOKEN=\n```\n\nThese variables wire the service to its databases, vector store, and external LLM providers.\n\n---\n\n### 5. **Development Workflow**\n\n- **Local dev**: `uvicorn src.main:app --reload`\n- **Frontend**: Separate repo (`centralGPT-frontend`) that must be cloned and configured to talk to this backend.\n\n---\n\n### 6. **What’s Missing (or Not Immediately Visible)**\n\n- **Authentication**: While `User` and `RefreshToken` schemas exist, the actual auth routes and middleware aren’t shown in the snippets.\n- **LLM provider adapters**: The code that switches between Mistral, Ollama, etc., is likely in a separate module (perhaps under `src/llm/`).\n- **Vector store logic**: Interaction with Qdrant (indexing, searching) is not visible here but is a critical piece for RAG.\n\n---\n\n### 7. **Takeaway**\n\nCentralGPT is a **multi‑LLM, multi‑data‑source chatbot backend** that stitches together:\n\n1. **FastAPI** for the HTTP API,\n2. **LangChain** for LLM orchestration,\n3. **Redis & PostgreSQL** for session & history persistence,\n4. **Qdrant** for fast vector similarity search,\n5. **PyGithub** for GitHub file retrieval.\n\nIt’s designed to be modular: you can plug in new LLM providers or storage backends with minimal friction. The README and environment variables give a clear roadmap for setting up a local dev environment, while the router and model files hint at a clean separation of concerns.\n\nIf you need deeper dives into any specific module (e.g., how messages are processed or how the vector store is queried), let me know!', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('a520b0cf-b1b1-4c33-a312-3cffaa0147ff'), timestamp=datetime.datetime(2025, 8, 15, 17, 35, 56, 889015), session_id=UUID('b7444224-11c9-499b-be5a-bac9797b53b4'), content='give dir structure of codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('6479095d-e648-49fc-bc47-1c596dd3442b'), timestamp=datetime.datetime(2025, 8, 15, 17, 35, 58, 734999), session_id=UUID('b7444224-11c9-499b-be5a-bac9797b53b4'), content='Below is a **high‑level directory tree** that reflects the structure of the `centralGPT‑backend` repository as inferred from the files you shared and the typical layout of a FastAPI + LangChain project.\n\n```\ncentralGPT-backend/\n├── .env.example          # Sample environment‑variable file\n├── Dockerfile\n├── README.md\n├── requirements.txt\n├── src/\n│   ├── __init__.py\n│   ├── main.py                # FastAPI app entry point (not shown in snippets)\n│   ├── db/\n│   │   ├── __init__.py        # Exposes engine, SessionLocal, get_db\n│   │   └── dbs.py             # SQLAlchemy engine + session factory\n│   ├── models/\n│   │   ├── __init__.py        # Re‑exports Pydantic schemas\n│   │   └── schema.py          # User, RefreshToken, Session, Message, etc.\n│   ├── router/\n│   │   ├── __init__.py        # Combines all routers\n│   │   ├── auth.py            # Auth endpoints\n│   │   ├── setup.py           # Basic setup endpoints\n│   │   ├── sessions.py        # Session‑related endpoints\n│   │   ├── messages.py        # Chat‑message endpoints\n│   │   └── rag.py             # RAG‑related endpoints\n│   ├── service/\n│   │   ├── __init__.py\n│   │   └── rag_service.py     # Utility to build a file‑tree from GitHub entries\n│   └── utils/                 # (Optional) helper modules – e.g. GitHub client, LLM adapters\n│\n├── tests/                     # Unit / integration tests\n│   ├── __init__.py\n│   └── test_* .py\n└── .gitignore\n```\n\n### Quick notes on the key directories\n\n| Directory | Purpose |\n|-----------|---------|\n| `src/db/` | Database configuration (SQLAlchemy engine, session factory, dependency injection). |\n| `src/models/` | Pydantic schemas that define the shape of request/response payloads. |\n| `src/router/` | FastAPI routers for each logical area (auth, messages, RAG, etc.). |\n| `src/service/` | Business‑logic helpers – e.g., the `rag_service.py` you posted. |\n| `src/utils/` | (Not shown in the snippets) would normally hold reusable helpers such as a GitHub client, LLM adapters, or vector‑store utilities. |\n| `tests/` | Test suite for the API and services. |\n\nFeel free to let me know if you’d like a deeper dive into any particular module or file!', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('3680fcb5-b783-418a-9f9b-dbf679765d19'), timestamp=datetime.datetime(2025, 8, 15, 17, 36, 26, 593310), session_id=UUID('b7444224-11c9-499b-be5a-bac9797b53b4'), content='Review this resume', files=['DineshThummaResume.pdf'], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('2abe91ec-c3ab-4756-a0c5-aca9cb48053c'), timestamp=datetime.datetime(2025, 8, 15, 17, 36, 28, 382226), session_id=UUID('b7444224-11c9-499b-be5a-bac9797b53b4'), content='Sure thing! Please paste the resume text (or upload the file) so I can take a look and give you a detailed review. If you’d like me to focus on specific areas—like formatting, content, or tailoring for a particular role—just let me know!', files=None, model_response_time_ms=None)]
2025-08-15 19:53:45.407 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('1aac3db6-9314-4c9c-81c6-45945b6933a4'), timestamp=datetime.datetime(2025, 8, 15, 17, 34, 56, 420794), session_id=UUID('b7444224-11c9-499b-be5a-bac9797b53b4'), content='What did you learn from codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('13122d6c-2305-4f84-8b09-89c65d1ed4e2'), timestamp=datetime.datetime(2025, 8, 15, 17, 34, 58, 264468), session_id=UUID('b7444224-11c9-499b-be5a-bac9797b53b4'), content='From a quick dive into the repository, here’s what I’ve pieced together about the project’s structure, purpose, and key components:\n\n---\n\n### 1. **High‑level Purpose**\n\nCentralGPT is a **backend service** that lets users chat with multiple large‑language‑model (LLM) providers (Mistral, Ollama, Groq, TogetherAI, etc.) while also offering:\n\n- **GitHub integration** – fetch files from any repo (public or private) by specifying user, repo, branch, and commit.\n- **PDF & document retrieval** – upload PDFs and perform Retrieval‑Augmented Generation (RAG) to answer context‑aware questions.\n- **Vector search** – uses Qdrant for fast similarity search over document embeddings.\n\n---\n\n### 2. **Core Tech Stack**\n\n| Layer | Technology | Why it matters |\n|-------|------------|----------------|\n| **Framework** | FastAPI | Lightweight, async‑friendly API layer. |\n| **LLM Framework** | LangChain | Provides a unified interface to multiple LLM providers and handles prompt construction, chaining, and memory. |\n| **Validation** | Pydantic | Schema validation for request/response models. |\n| **Databases** | Redis, PostgreSQL, Qdrant | Redis for session caching, PostgreSQL for persistent chat history, Qdrant for vector embeddings. |\n| **Containerization** | Docker | Easy deployment and scaling. |\n| **Deployment** | Azure App Service | Target cloud platform. |\n| **Git Integration** | PyGithub | Simplifies GitHub API calls. |\n\n---\n\n### 3. **Project Layout (Key Files)**\n\n| Path | What it does |\n|------|--------------|\n| `src/main.py` | FastAPI app entry point (not shown but implied). |\n| `src/router/messages.py` | API endpoints for chat messages (e.g., sending a message, retrieving history). |\n| `src/db/__init__.py` | Exposes the database engine, session factory, and dependency injection helper (`get_db`). |\n| `src/models/__init__.py` | Re‑exports Pydantic schemas: `User`, `RefreshToken`, `Session`, `Message`, `ChatMessage`, `ModelInfo`, `ToolCall`, `ChatbotSchema`. |\n| `src/db/dbs.py` | (Not shown) likely contains the SQLAlchemy engine and session setup. |\n| `README.md` | Detailed setup instructions, environment variables, and feature list. |\n\n---\n\n### 4. **Environment Configuration**\n\nThe `.env` file must contain:\n\n```dotenv\nDATABASE_URL=\nREDIS_URL=\nQDRANT_URL=\nQDRANT_API_KEY=\nGROQ_API_KEY=\nCOHERE_API_KEY=\nHUGGINGFACE_HUB_TOKEN=\nGITHUB_TOKEN=\n```\n\nThese variables wire the service to its databases, vector store, and external LLM providers.\n\n---\n\n### 5. **Development Workflow**\n\n- **Local dev**: `uvicorn src.main:app --reload`\n- **Frontend**: Separate repo (`centralGPT-frontend`) that must be cloned and configured to talk to this backend.\n\n---\n\n### 6. **What’s Missing (or Not Immediately Visible)**\n\n- **Authentication**: While `User` and `RefreshToken` schemas exist, the actual auth routes and middleware aren’t shown in the snippets.\n- **LLM provider adapters**: The code that switches between Mistral, Ollama, etc., is likely in a separate module (perhaps under `src/llm/`).\n- **Vector store logic**: Interaction with Qdrant (indexing, searching) is not visible here but is a critical piece for RAG.\n\n---\n\n### 7. **Takeaway**\n\nCentralGPT is a **multi‑LLM, multi‑data‑source chatbot backend** that stitches together:\n\n1. **FastAPI** for the HTTP API,\n2. **LangChain** for LLM orchestration,\n3. **Redis & PostgreSQL** for session & history persistence,\n4. **Qdrant** for fast vector similarity search,\n5. **PyGithub** for GitHub file retrieval.\n\nIt’s designed to be modular: you can plug in new LLM providers or storage backends with minimal friction. The README and environment variables give a clear roadmap for setting up a local dev environment, while the router and model files hint at a clean separation of concerns.\n\nIf you need deeper dives into any specific module (e.g., how messages are processed or how the vector store is queried), let me know!', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('a520b0cf-b1b1-4c33-a312-3cffaa0147ff'), timestamp=datetime.datetime(2025, 8, 15, 17, 35, 56, 889015), session_id=UUID('b7444224-11c9-499b-be5a-bac9797b53b4'), content='give dir structure of codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('6479095d-e648-49fc-bc47-1c596dd3442b'), timestamp=datetime.datetime(2025, 8, 15, 17, 35, 58, 734999), session_id=UUID('b7444224-11c9-499b-be5a-bac9797b53b4'), content='Below is a **high‑level directory tree** that reflects the structure of the `centralGPT‑backend` repository as inferred from the files you shared and the typical layout of a FastAPI + LangChain project.\n\n```\ncentralGPT-backend/\n├── .env.example          # Sample environment‑variable file\n├── Dockerfile\n├── README.md\n├── requirements.txt\n├── src/\n│   ├── __init__.py\n│   ├── main.py                # FastAPI app entry point (not shown in snippets)\n│   ├── db/\n│   │   ├── __init__.py        # Exposes engine, SessionLocal, get_db\n│   │   └── dbs.py             # SQLAlchemy engine + session factory\n│   ├── models/\n│   │   ├── __init__.py        # Re‑exports Pydantic schemas\n│   │   └── schema.py          # User, RefreshToken, Session, Message, etc.\n│   ├── router/\n│   │   ├── __init__.py        # Combines all routers\n│   │   ├── auth.py            # Auth endpoints\n│   │   ├── setup.py           # Basic setup endpoints\n│   │   ├── sessions.py        # Session‑related endpoints\n│   │   ├── messages.py        # Chat‑message endpoints\n│   │   └── rag.py             # RAG‑related endpoints\n│   ├── service/\n│   │   ├── __init__.py\n│   │   └── rag_service.py     # Utility to build a file‑tree from GitHub entries\n│   └── utils/                 # (Optional) helper modules – e.g. GitHub client, LLM adapters\n│\n├── tests/                     # Unit / integration tests\n│   ├── __init__.py\n│   └── test_* .py\n└── .gitignore\n```\n\n### Quick notes on the key directories\n\n| Directory | Purpose |\n|-----------|---------|\n| `src/db/` | Database configuration (SQLAlchemy engine, session factory, dependency injection). |\n| `src/models/` | Pydantic schemas that define the shape of request/response payloads. |\n| `src/router/` | FastAPI routers for each logical area (auth, messages, RAG, etc.). |\n| `src/service/` | Business‑logic helpers – e.g., the `rag_service.py` you posted. |\n| `src/utils/` | (Not shown in the snippets) would normally hold reusable helpers such as a GitHub client, LLM adapters, or vector‑store utilities. |\n| `tests/` | Test suite for the API and services. |\n\nFeel free to let me know if you’d like a deeper dive into any particular module or file!', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('3680fcb5-b783-418a-9f9b-dbf679765d19'), timestamp=datetime.datetime(2025, 8, 15, 17, 36, 26, 593310), session_id=UUID('b7444224-11c9-499b-be5a-bac9797b53b4'), content='Review this resume', files=['DineshThummaResume.pdf'], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('2abe91ec-c3ab-4756-a0c5-aca9cb48053c'), timestamp=datetime.datetime(2025, 8, 15, 17, 36, 28, 382226), session_id=UUID('b7444224-11c9-499b-be5a-bac9797b53b4'), content='Sure thing! Please paste the resume text (or upload the file) so I can take a look and give you a detailed review. If you’d like me to focus on specific areas—like formatting, content, or tailoring for a particular role—just let me know!', files=None, model_response_time_ms=None)]
2025-08-15 19:53:45.417 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('1aac3db6-9314-4c9c-81c6-45945b6933a4'), 'timestamp': datetime.datetime(2025, 8, 15, 17, 34, 56, 420794), 'session_id': UUID('b7444224-11c9-499b-be5a-bac9797b53b4'), 'content': 'What did you learn from codebase', 'files': [], 'model_response_time_ms': None}
2025-08-15 19:53:45.417 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('1aac3db6-9314-4c9c-81c6-45945b6933a4'), 'timestamp': datetime.datetime(2025, 8, 15, 17, 34, 56, 420794), 'session_id': UUID('b7444224-11c9-499b-be5a-bac9797b53b4'), 'content': 'What did you learn from codebase', 'files': [], 'model_response_time_ms': None}
2025-08-15 19:53:46.172 | INFO     | src.main:log_requests:54 - GET /sessions/history/b7444224-11c9-499b-be5a-bac9797b53b4 → 200 (1541.2ms)
2025-08-15 19:53:46.172 | INFO     | src.main:log_requests:54 - GET /sessions/history/b7444224-11c9-499b-be5a-bac9797b53b4 → 200 (1541.2ms)
2025-08-15 19:56:14.452 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/e76b9d08-9cc6-4390-9154-e63ea4bb4798
2025-08-15 19:56:14.452 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/e76b9d08-9cc6-4390-9154-e63ea4bb4798
2025-08-15 19:56:14.453 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/e76b9d08-9cc6-4390-9154-e63ea4bb4798 → 200 (1.01ms)
2025-08-15 19:56:14.453 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/e76b9d08-9cc6-4390-9154-e63ea4bb4798 → 200 (1.01ms)
2025-08-15 19:56:14.705 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/8aaf8164-67bc-4628-9549-22a06c1835a7
2025-08-15 19:56:14.705 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/8aaf8164-67bc-4628-9549-22a06c1835a7
2025-08-15 19:56:14.706 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/8aaf8164-67bc-4628-9549-22a06c1835a7 → 200 (1.11ms)
2025-08-15 19:56:14.706 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/8aaf8164-67bc-4628-9549-22a06c1835a7 → 200 (1.11ms)
2025-08-15 19:56:14.763 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/e76b9d08-9cc6-4390-9154-e63ea4bb4798
2025-08-15 19:56:14.763 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/e76b9d08-9cc6-4390-9154-e63ea4bb4798
2025-08-15 19:56:15.780 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('c60068ce-d519-4b10-93c1-19c9e07dc512'), timestamp=datetime.datetime(2025, 8, 12, 19, 56, 52, 2692), session_id=UUID('e76b9d08-9cc6-4390-9154-e63ea4bb4798'), content='What is resume about', files=['DineshThummaResume.pdf'], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('1fe15c8b-1583-46f5-9bc0-9322d48e970a'), timestamp=datetime.datetime(2025, 8, 12, 19, 56, 53, 972283), session_id=UUID('e76b9d08-9cc6-4390-9154-e63ea4bb4798'), content='A **resume** is a concise document that summarizes your professional background, skills, and achievements. Think of it as a marketing brochure for yourself—its purpose is to convince a hiring manager that you’re the right fit for a particular role.\n\n---\n\n### 1. Core Components  \n| Section | What It Covers | Why It Matters |\n|---------|----------------|----------------|\n| **Header** | Name, phone, email, LinkedIn/portfolio | First impression; easy contact |\n| **Summary/Objective** | 2‑3 sentence snapshot of your career goals and key strengths | Sets the tone; shows relevance |\n| **Experience** | Job titles, companies, dates, bullet‑pointed accomplishments | Demonstrates real‑world impact |\n| **Education** | Degrees, institutions, graduation dates | Validates qualifications |\n| **Skills** | Hard & soft skills, tools, languages | Quick scan for keywords |\n| **Certifications / Projects** | Relevant credentials or side projects | Adds depth beyond work history |\n\n---\n\n### 2. How to Make It Stand Out  \n- **Quantify results**: “Increased sales by 25% in six months” beats “Improved sales.”  \n- **Tailor to the job**: Highlight the skills and experiences that match the job description.  \n- **Use action verbs**: “Led,” “Designed,” “Optimized.”  \n- **Keep it concise**: One page for under 5\u202fyears of experience; two pages for more extensive backgrounds.\n\n---\n\n### 3. Common Mistakes to Avoid  \n- **Typos or grammatical errors** – they signal carelessness.  \n- **Unnecessary jargon** – keep language clear and accessible.  \n- **Including irrelevant hobbies** – unless they directly support the role.  \n- **Listing every job** – focus on the most recent and relevant positions.\n\n---\n\n### 4. Quick Example  \n> **Jane Doe**  \n> 555‑123‑4567 | jane.doe@email.com | LinkedIn: /jane-doe  \n> **Professional Summary**  \n> Results‑driven marketing specialist with 4\u202fyears of experience in digital campaigns, SEO, and data analytics. Proven track record of boosting online engagement by 30% and driving a 15% increase in lead conversion.  \n> **Experience**  \n> *Digital Marketing Manager, Acme Corp* (Jan\u202f2021‑Present)  \n> • Developed and executed a cross‑channel campaign that grew website traffic by 40%.  \n> • Managed a $200k budget, achieving a 12% cost‑per‑lead reduction.  \n> *Marketing Coordinator, Beta Inc* (Jun\u202f2018‑Dec\u202f2020)  \n> • Coordinated email marketing strategy, increasing open rates from 18% to 27%.  \n\n---\n\n### Bottom Line  \nA resume is your personal pitch—clear, concise, and tailored to the job you want. By focusing on measurable achievements and aligning your skills with the employer’s needs, you give yourself the best chance to move from the application stage to the interview.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('de538a1d-b3ea-4183-9a7c-f80fbd381797'), timestamp=datetime.datetime(2025, 8, 12, 19, 58, 25, 953511), session_id=UUID('e76b9d08-9cc6-4390-9154-e63ea4bb4798'), content='I gave you a resume right what was that resume about', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('f3272dcf-9573-424d-9736-6d1c6340686e'), timestamp=datetime.datetime(2025, 8, 12, 19, 58, 27, 594238), session_id=UUID('e76b9d08-9cc6-4390-9154-e63ea4bb4798'), content='**Quick Snapshot of Dinesh\u202fThumma’s Resume**\n\n- **Who is he?**  \n  An undergraduate student (B.Tech in Artificial Intelligence & Data Science) from CVR College of Engineering, actively building backend systems and applying generative‑AI techniques.\n\n- **Core Focus**  \n  Backend development (Python, Java, TypeScript, Kotlin) with a strong emphasis on scalable, reliable services.  \n  Hands‑on experience with LLMs (Ollama, Mistral, Groq) and semantic search via Qdrant and LlamaIndex.\n\n- **Key Technical Stack**  \n  - **Languages:** Python, Java, TypeScript, Kotlin  \n  - **Frameworks:** Spring\u202fBoot, Flask, FastAPI, React, Chakra‑UI  \n  - **Databases & Caching:** Redis, PostgreSQL, Neo4j, MongoDB, Qdrant  \n  - **LLM/GenAI Tools:** LlamaIndex, LangChain, Ollama  \n  - **DevOps & Tools:** Git, Docker, GitHub, VS\u202fCode, Postman, IntelliJ\n\n- **Notable Projects**  \n  - **CentralGPT** – A FastAPI‑React stack that delivers real‑time chat with LLMs, semantic search, and context‑aware RAG.  \n  - **Flask Blog** – Full‑stack blogging platform featuring CRUD, JWT authentication, and file uploads, deployed on Render.\n\n- **Education & Coursework**  \n  - B.Tech (2023‑2027) – AI & Data Science  \n  - Relevant courses: OOP, DBMS, OS, SE, DAA\n\n- **Certifications & Achievements**  \n  - Tata Group Data Analytics Job Simulation (Forage, Aug\u202f2025)  \n  - Adobe India Hackathon (2025)\n\n- **Professional Summary**  \n  “Undergraduate specializing in AI & Data Science, focused on backend systems and applied generative AI. Seeking to contribute to real‑world projects and collaborative teams, building reliable and scalable applications.”\n\nIn essence, the resume showcases a technically‑savvy student with a blend of backend engineering, AI/ML tooling, and practical project experience, ready to tackle challenging roles that blend software development with generative‑AI solutions.', files=None, model_response_time_ms=None)]
2025-08-15 19:56:15.780 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('c60068ce-d519-4b10-93c1-19c9e07dc512'), timestamp=datetime.datetime(2025, 8, 12, 19, 56, 52, 2692), session_id=UUID('e76b9d08-9cc6-4390-9154-e63ea4bb4798'), content='What is resume about', files=['DineshThummaResume.pdf'], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('1fe15c8b-1583-46f5-9bc0-9322d48e970a'), timestamp=datetime.datetime(2025, 8, 12, 19, 56, 53, 972283), session_id=UUID('e76b9d08-9cc6-4390-9154-e63ea4bb4798'), content='A **resume** is a concise document that summarizes your professional background, skills, and achievements. Think of it as a marketing brochure for yourself—its purpose is to convince a hiring manager that you’re the right fit for a particular role.\n\n---\n\n### 1. Core Components  \n| Section | What It Covers | Why It Matters |\n|---------|----------------|----------------|\n| **Header** | Name, phone, email, LinkedIn/portfolio | First impression; easy contact |\n| **Summary/Objective** | 2‑3 sentence snapshot of your career goals and key strengths | Sets the tone; shows relevance |\n| **Experience** | Job titles, companies, dates, bullet‑pointed accomplishments | Demonstrates real‑world impact |\n| **Education** | Degrees, institutions, graduation dates | Validates qualifications |\n| **Skills** | Hard & soft skills, tools, languages | Quick scan for keywords |\n| **Certifications / Projects** | Relevant credentials or side projects | Adds depth beyond work history |\n\n---\n\n### 2. How to Make It Stand Out  \n- **Quantify results**: “Increased sales by 25% in six months” beats “Improved sales.”  \n- **Tailor to the job**: Highlight the skills and experiences that match the job description.  \n- **Use action verbs**: “Led,” “Designed,” “Optimized.”  \n- **Keep it concise**: One page for under 5\u202fyears of experience; two pages for more extensive backgrounds.\n\n---\n\n### 3. Common Mistakes to Avoid  \n- **Typos or grammatical errors** – they signal carelessness.  \n- **Unnecessary jargon** – keep language clear and accessible.  \n- **Including irrelevant hobbies** – unless they directly support the role.  \n- **Listing every job** – focus on the most recent and relevant positions.\n\n---\n\n### 4. Quick Example  \n> **Jane Doe**  \n> 555‑123‑4567 | jane.doe@email.com | LinkedIn: /jane-doe  \n> **Professional Summary**  \n> Results‑driven marketing specialist with 4\u202fyears of experience in digital campaigns, SEO, and data analytics. Proven track record of boosting online engagement by 30% and driving a 15% increase in lead conversion.  \n> **Experience**  \n> *Digital Marketing Manager, Acme Corp* (Jan\u202f2021‑Present)  \n> • Developed and executed a cross‑channel campaign that grew website traffic by 40%.  \n> • Managed a $200k budget, achieving a 12% cost‑per‑lead reduction.  \n> *Marketing Coordinator, Beta Inc* (Jun\u202f2018‑Dec\u202f2020)  \n> • Coordinated email marketing strategy, increasing open rates from 18% to 27%.  \n\n---\n\n### Bottom Line  \nA resume is your personal pitch—clear, concise, and tailored to the job you want. By focusing on measurable achievements and aligning your skills with the employer’s needs, you give yourself the best chance to move from the application stage to the interview.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('de538a1d-b3ea-4183-9a7c-f80fbd381797'), timestamp=datetime.datetime(2025, 8, 12, 19, 58, 25, 953511), session_id=UUID('e76b9d08-9cc6-4390-9154-e63ea4bb4798'), content='I gave you a resume right what was that resume about', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('f3272dcf-9573-424d-9736-6d1c6340686e'), timestamp=datetime.datetime(2025, 8, 12, 19, 58, 27, 594238), session_id=UUID('e76b9d08-9cc6-4390-9154-e63ea4bb4798'), content='**Quick Snapshot of Dinesh\u202fThumma’s Resume**\n\n- **Who is he?**  \n  An undergraduate student (B.Tech in Artificial Intelligence & Data Science) from CVR College of Engineering, actively building backend systems and applying generative‑AI techniques.\n\n- **Core Focus**  \n  Backend development (Python, Java, TypeScript, Kotlin) with a strong emphasis on scalable, reliable services.  \n  Hands‑on experience with LLMs (Ollama, Mistral, Groq) and semantic search via Qdrant and LlamaIndex.\n\n- **Key Technical Stack**  \n  - **Languages:** Python, Java, TypeScript, Kotlin  \n  - **Frameworks:** Spring\u202fBoot, Flask, FastAPI, React, Chakra‑UI  \n  - **Databases & Caching:** Redis, PostgreSQL, Neo4j, MongoDB, Qdrant  \n  - **LLM/GenAI Tools:** LlamaIndex, LangChain, Ollama  \n  - **DevOps & Tools:** Git, Docker, GitHub, VS\u202fCode, Postman, IntelliJ\n\n- **Notable Projects**  \n  - **CentralGPT** – A FastAPI‑React stack that delivers real‑time chat with LLMs, semantic search, and context‑aware RAG.  \n  - **Flask Blog** – Full‑stack blogging platform featuring CRUD, JWT authentication, and file uploads, deployed on Render.\n\n- **Education & Coursework**  \n  - B.Tech (2023‑2027) – AI & Data Science  \n  - Relevant courses: OOP, DBMS, OS, SE, DAA\n\n- **Certifications & Achievements**  \n  - Tata Group Data Analytics Job Simulation (Forage, Aug\u202f2025)  \n  - Adobe India Hackathon (2025)\n\n- **Professional Summary**  \n  “Undergraduate specializing in AI & Data Science, focused on backend systems and applied generative AI. Seeking to contribute to real‑world projects and collaborative teams, building reliable and scalable applications.”\n\nIn essence, the resume showcases a technically‑savvy student with a blend of backend engineering, AI/ML tooling, and practical project experience, ready to tackle challenging roles that blend software development with generative‑AI solutions.', files=None, model_response_time_ms=None)]
2025-08-15 19:56:15.784 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('c60068ce-d519-4b10-93c1-19c9e07dc512'), 'timestamp': datetime.datetime(2025, 8, 12, 19, 56, 52, 2692), 'session_id': UUID('e76b9d08-9cc6-4390-9154-e63ea4bb4798'), 'content': 'What is resume about', 'files': ['DineshThummaResume.pdf'], 'model_response_time_ms': None}
2025-08-15 19:56:15.784 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('c60068ce-d519-4b10-93c1-19c9e07dc512'), 'timestamp': datetime.datetime(2025, 8, 12, 19, 56, 52, 2692), 'session_id': UUID('e76b9d08-9cc6-4390-9154-e63ea4bb4798'), 'content': 'What is resume about', 'files': ['DineshThummaResume.pdf'], 'model_response_time_ms': None}
2025-08-15 19:56:15.787 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/8aaf8164-67bc-4628-9549-22a06c1835a7
2025-08-15 19:56:15.787 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/8aaf8164-67bc-4628-9549-22a06c1835a7
2025-08-15 19:56:18.832 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('01e7d668-bb63-4490-8d4d-df7babd06d2f'), timestamp=datetime.datetime(2025, 8, 12, 20, 2, 35, 19955), session_id=UUID('8aaf8164-67bc-4628-9549-22a06c1835a7'), content='what did you learn about codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('c9ad0440-06c5-4185-a10f-2c9ab1d799be'), timestamp=datetime.datetime(2025, 8, 12, 20, 2, 37, 342640), session_id=UUID('8aaf8164-67bc-4628-9549-22a06c1835a7'), content='From the snippets you shared, I’ve pieced together a few key points about the structure and intent of your application’s data layer. Below is a quick, conversational recap that highlights what I’ve learned, along with a couple of observations that might help you refine the code.\n\n---\n\n## 1. Two Core Domain Models\n\n| Model | Collection | Key Fields | Purpose |\n|-------|------------|------------|---------|\n| **User** | `users` | `id`, `email`, `hash_password` | Stores user credentials. The `id` is a MongoDB `ObjectId` generated by default. |\n| **RefreshToken** | `refersh_token` (typo?) | `userId`, `expiresAt`, `hashedToken`, `createdAt` | Represents a refresh token issued to a user, with an expiry timestamp and a hashed token value. |\n\nBoth classes are annotated with `@Document`, which tells Spring Data MongoDB to map them to the specified collections.\n\n---\n\n## 2. Field‑Level Details\n\n### `User`\n\n- **`email`** – plain string, presumably unique (though no index annotation is shown).\n- **`hash_password`** – the hashed password; the field name follows snake‑case, which is a bit unconventional in Kotlin but perfectly fine.\n- **`id`** – annotated with `@Id`; defaults to a new `ObjectId()` if not supplied.\n\n### `RefreshToken`\n\n- **`userId`** – a reference to the owning `User` via its `ObjectId`. This is a typical way to model relationships in MongoDB.\n- **`expiresAt`** – an `Instant` that marks when the token should become invalid. It’s annotated with `@Indexed(expireAfter = "0s")`, which creates a TTL (time‑to‑live) index that automatically deletes the document once the timestamp is reached. The `"0s"` value means the document expires *exactly* at the `expiresAt` instant.\n- **`hashedToken`** – the token value stored in a hashed form for security.\n- **`createdAt`** – defaults to `Instant.now()` at the time of object creation.\n\n---\n\n## 3. Observations & Minor Issues\n\n1. **Collection Name Typo**  \n   The `@Document("refersh_token")` annotation contains a typo (`refersh` instead of `refresh`). If you intended to name the collection `refresh_token`, you’ll want to correct that to avoid confusion and potential runtime errors.\n\n2. **Indexing on `email`**  \n   While the `User` model doesn’t currently have an index on `email`, you’ll likely want one if you’re looking up users by email during login. Adding `@Indexed(unique = true)` to the `email` field would enforce uniqueness and speed up queries.\n\n3. **Password Hashing**  \n   The field `hash_password` suggests that you’re storing hashed passwords, which is good. Just ensure you’re using a strong algorithm (e.g., BCrypt) and that the hashing logic is applied before persisting the user.\n\n4. **Refresh Token Security**  \n   Storing the token in hashed form is a solid practice. Make sure the hashing algorithm is deterministic and that you’re using a salt per user or per token to mitigate rainbow‑table attacks.\n\n---\n\n## 4. Next Steps\n\n- **Fix the collection name typo** to avoid accidental data duplication or mis‑routing.\n- **Add an index on `email`** if you haven’t already.\n- **Consider adding a `@Document` annotation to the `User` class** if you plan to use MongoDB’s TTL or other indexing features there.\n- **Review your repository interfaces** (not shown) to ensure they expose the necessary CRUD operations and custom queries (e.g., find by email, find by token hash).\n\n---\n\nThat’s the gist of what I could glean from the two model files. If you have more files or specific questions about how these models fit into the rest of your application, feel free to share!', files=None, model_response_time_ms=None)]
2025-08-15 19:56:18.832 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('01e7d668-bb63-4490-8d4d-df7babd06d2f'), timestamp=datetime.datetime(2025, 8, 12, 20, 2, 35, 19955), session_id=UUID('8aaf8164-67bc-4628-9549-22a06c1835a7'), content='what did you learn about codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('c9ad0440-06c5-4185-a10f-2c9ab1d799be'), timestamp=datetime.datetime(2025, 8, 12, 20, 2, 37, 342640), session_id=UUID('8aaf8164-67bc-4628-9549-22a06c1835a7'), content='From the snippets you shared, I’ve pieced together a few key points about the structure and intent of your application’s data layer. Below is a quick, conversational recap that highlights what I’ve learned, along with a couple of observations that might help you refine the code.\n\n---\n\n## 1. Two Core Domain Models\n\n| Model | Collection | Key Fields | Purpose |\n|-------|------------|------------|---------|\n| **User** | `users` | `id`, `email`, `hash_password` | Stores user credentials. The `id` is a MongoDB `ObjectId` generated by default. |\n| **RefreshToken** | `refersh_token` (typo?) | `userId`, `expiresAt`, `hashedToken`, `createdAt` | Represents a refresh token issued to a user, with an expiry timestamp and a hashed token value. |\n\nBoth classes are annotated with `@Document`, which tells Spring Data MongoDB to map them to the specified collections.\n\n---\n\n## 2. Field‑Level Details\n\n### `User`\n\n- **`email`** – plain string, presumably unique (though no index annotation is shown).\n- **`hash_password`** – the hashed password; the field name follows snake‑case, which is a bit unconventional in Kotlin but perfectly fine.\n- **`id`** – annotated with `@Id`; defaults to a new `ObjectId()` if not supplied.\n\n### `RefreshToken`\n\n- **`userId`** – a reference to the owning `User` via its `ObjectId`. This is a typical way to model relationships in MongoDB.\n- **`expiresAt`** – an `Instant` that marks when the token should become invalid. It’s annotated with `@Indexed(expireAfter = "0s")`, which creates a TTL (time‑to‑live) index that automatically deletes the document once the timestamp is reached. The `"0s"` value means the document expires *exactly* at the `expiresAt` instant.\n- **`hashedToken`** – the token value stored in a hashed form for security.\n- **`createdAt`** – defaults to `Instant.now()` at the time of object creation.\n\n---\n\n## 3. Observations & Minor Issues\n\n1. **Collection Name Typo**  \n   The `@Document("refersh_token")` annotation contains a typo (`refersh` instead of `refresh`). If you intended to name the collection `refresh_token`, you’ll want to correct that to avoid confusion and potential runtime errors.\n\n2. **Indexing on `email`**  \n   While the `User` model doesn’t currently have an index on `email`, you’ll likely want one if you’re looking up users by email during login. Adding `@Indexed(unique = true)` to the `email` field would enforce uniqueness and speed up queries.\n\n3. **Password Hashing**  \n   The field `hash_password` suggests that you’re storing hashed passwords, which is good. Just ensure you’re using a strong algorithm (e.g., BCrypt) and that the hashing logic is applied before persisting the user.\n\n4. **Refresh Token Security**  \n   Storing the token in hashed form is a solid practice. Make sure the hashing algorithm is deterministic and that you’re using a salt per user or per token to mitigate rainbow‑table attacks.\n\n---\n\n## 4. Next Steps\n\n- **Fix the collection name typo** to avoid accidental data duplication or mis‑routing.\n- **Add an index on `email`** if you haven’t already.\n- **Consider adding a `@Document` annotation to the `User` class** if you plan to use MongoDB’s TTL or other indexing features there.\n- **Review your repository interfaces** (not shown) to ensure they expose the necessary CRUD operations and custom queries (e.g., find by email, find by token hash).\n\n---\n\nThat’s the gist of what I could glean from the two model files. If you have more files or specific questions about how these models fit into the rest of your application, feel free to share!', files=None, model_response_time_ms=None)]
2025-08-15 19:56:18.834 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('01e7d668-bb63-4490-8d4d-df7babd06d2f'), 'timestamp': datetime.datetime(2025, 8, 12, 20, 2, 35, 19955), 'session_id': UUID('8aaf8164-67bc-4628-9549-22a06c1835a7'), 'content': 'what did you learn about codebase', 'files': [], 'model_response_time_ms': None}
2025-08-15 19:56:18.834 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('01e7d668-bb63-4490-8d4d-df7babd06d2f'), 'timestamp': datetime.datetime(2025, 8, 12, 20, 2, 35, 19955), 'session_id': UUID('8aaf8164-67bc-4628-9549-22a06c1835a7'), 'content': 'what did you learn about codebase', 'files': [], 'model_response_time_ms': None}
2025-08-15 19:56:18.838 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/44ed3575-69a0-4c05-a644-f4546233811f
2025-08-15 19:56:18.838 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/44ed3575-69a0-4c05-a644-f4546233811f
2025-08-15 19:56:18.840 | INFO     | src.main:log_requests:54 - GET /sessions/history/e76b9d08-9cc6-4390-9154-e63ea4bb4798 → 200 (4077.59ms)
2025-08-15 19:56:18.840 | INFO     | src.main:log_requests:54 - GET /sessions/history/e76b9d08-9cc6-4390-9154-e63ea4bb4798 → 200 (4077.59ms)
2025-08-15 19:56:18.842 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/44ed3575-69a0-4c05-a644-f4546233811f → 200 (5.22ms)
2025-08-15 19:56:18.842 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/44ed3575-69a0-4c05-a644-f4546233811f → 200 (5.22ms)
2025-08-15 19:56:18.848 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/44ed3575-69a0-4c05-a644-f4546233811f
2025-08-15 19:56:18.848 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/44ed3575-69a0-4c05-a644-f4546233811f
2025-08-15 19:56:19.824 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('4418c9c5-c493-4569-8c05-a3a71960fdd5'), timestamp=datetime.datetime(2025, 8, 12, 20, 6, 43, 424431), session_id=UUID('44ed3575-69a0-4c05-a644-f4546233811f'), content='what did you learn from files given you about .py files', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('ac5a1552-fc7b-4482-9976-2f05d41833d8'), timestamp=datetime.datetime(2025, 8, 12, 20, 6, 45, 492027), session_id=UUID('44ed3575-69a0-4c05-a644-f4546233811f'), content='From the snippets you shared, the two Python files (`setup.py` and `rag.py`) give us a pretty clear picture of how this project is structured and what responsibilities each module has. Below is a quick rundown of the key take‑aways, broken into bite‑size sections so it’s easy to digest.\n\n---\n\n## 1.  The Project is a **FastAPI** Service\n\nBoth files import `APIRouter` from FastAPI and expose routes (`/models`, `/git`, `/upload`).  \n- **`APIRouter`** lets you group endpoints together and mount them in the main app.  \n- The routes are defined with decorators (`@router.post(...)`) and return JSON responses.\n\n> **Example**  \n> ```python\n> @router.post("/models")\n> async def choose_model(body: Dict = Body(...), db=Depends(get_db), user=Depends(get_current_user)):\n>     ...\n> ```\n\n---\n\n## 2.  Dependency Injection & Auth\n\n- `Depends(get_db)` pulls a database session from the dependency container.  \n- `Depends(get_current_user)` fetches the authenticated user (likely via a JWT or session cookie).  \n- These dependencies keep the endpoint logic clean and testable.\n\n---\n\n## 3.  Environment & Logging\n\n- `dotenv.load_dotenv()` loads environment variables from a `.env` file.  \n- `logging.getLogger("basic_router")` (or `"rag"`) sets up a logger that can be used throughout the module.  \n- This pattern is common in production‑ready services where you want to keep secrets out of code and have structured logs.\n\n---\n\n## 4.  Interaction with the Database\n\n- The `choose_model` endpoint queries a `UserLLMConfig` table for the current user’s config, updates the `model` field, and commits the change.  \n- The code uses SQLAlchemy’s ORM style (`db.query(...).filter_by(...).first()`).  \n- Error handling is done via `HTTPException` to return proper HTTP status codes.\n\n---\n\n## 5.  Handling File Uploads & External Services\n\n- `rag.py` shows how to accept file uploads (`UploadFile`) and form data (`Form`).  \n- It delegates heavy lifting to service functions (`git_handler`, `get_handler`) defined elsewhere (`src.service.rag_service`).  \n- This separation keeps the router thin and business logic in services.\n\n> **Example**  \n> ```python\n> @router.post("/upload")\n> async def get_rag(files: List[UploadFile] = File(...), session_id: str = Form(...), ...):\n>     res = await get_handler(req=files, session_id=session_id, ...)\n>     return res\n> ```\n\n---\n\n## 6.  Schema & Validation\n\n- The imports from `src.models.schema` (`APIKEYS`, `UserLLMConfig`, `API_KEY_REQUEST`) suggest that Pydantic models are used for request/response validation.  \n- Even though the snippet only shows a raw `Dict` for the body, the project likely uses Pydantic elsewhere for stricter typing.\n\n---\n\n## 7.  General Coding Style\n\n- **Type hints** are used throughout (`Dict`, `List[UploadFile]`, `Body(...)`).  \n- **Async** functions are employed where I/O is expected (file uploads, database calls).  \n- **Error handling** is explicit: missing fields raise `HTTPException` with clear messages.\n\n---\n\n### TL;DR\n\n- **FastAPI** + **APIRouter** for clean route definitions.  \n- **Dependency injection** for DB sessions and auth.  \n- **Logging** and **dotenv** for production readiness.  \n- **SQLAlchemy ORM** for DB interactions.  \n- **Service layer** (`rag_service`, `set_up_service`) keeps routers lightweight.  \n- **Pydantic** (implied) for data validation.  \n\nThese patterns make the codebase modular, testable, and easy to extend—exactly what you’d expect from a well‑structured Python web service.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('df38db54-259f-4392-ace7-ffb197bda9af'), timestamp=datetime.datetime(2025, 8, 12, 20, 8, 43, 222725), session_id=UUID('44ed3575-69a0-4c05-a644-f4546233811f'), content='What did you learn from code base give to you now', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('d026a298-1a6a-4ba4-a609-ffa66fd9be7d'), timestamp=datetime.datetime(2025, 8, 12, 20, 8, 44, 731582), session_id=UUID('44ed3575-69a0-4c05-a644-f4546233811f'), content='**What the code base tells us**\n\n| Layer | What we see | Why it matters |\n|-------|-------------|----------------|\n| **Data model (Kotlin)** | `User` and `RefreshToken` are plain‑data classes annotated with Spring‑Data MongoDB annotations (`@Document`, `@Id`, `@Indexed`). | The application stores users and refresh‑tokens in a MongoDB collection. The `RefreshToken` class even has an index that expires tokens immediately (`expireAfter = "0s"`), which is a clever way to let MongoDB clean up stale tokens automatically. |\n| **Python API (FastAPI)** | Two endpoints – `/init/` to store an encrypted API key and `/providers` to pick an LLM provider. | The API is thin: it delegates business logic to a service layer (`encrypt`, `api_providers`, `llm_providers`). This keeps the router focused on request/response handling. |\n| **Dependency injection** | `Depends(get_db)` pulls a SQLAlchemy session; `Depends(get_current_user)` authenticates the caller. | Using FastAPI’s `Depends` keeps the code testable and separates concerns. |\n| **Database interaction** | `db.query(APIKEYS).filter_by(user_id=current_user.userid, provider=api_provider).first()` – classic SQLAlchemy ORM usage. | The code is written for a relational DB (likely PostgreSQL or MySQL) even though the Kotlin side uses MongoDB. The project is hybrid or the Kotlin part is a separate micro‑service. |\n| **Security** | API keys are stored encrypted (`encrypt(api_key)`). | Good practice – never persist plain keys. |\n| **Logging & env** | `logging.getLogger("basic_router")` and `load_dotenv()` – environment variables are loaded from a `.env` file. | Keeps secrets out of code and provides structured logs. |\n| **Error handling** | `HTTPException` with clear status codes and messages. | Users get meaningful feedback; the API is robust. |\n| **Potential typo** | `@Document("refersh_token")` – likely a misspelling of “refresh_token”. | Might cause confusion or a missing collection. |\n| **Missing pieces** | The Kotlin side uses `ObjectId` from BSON; the Python side uses SQLAlchemy models (`APIKEYS`, `UserLLMConfig`). | The two parts of the system are not directly connected in the snippets, suggesting separate services or a future integration layer. |\n\n---\n\n### Take‑away\n\n* The project is a **hybrid** stack: Kotlin + Spring Data MongoDB for user & token persistence, and Python + FastAPI + SQLAlchemy for API key and LLM provider configuration.\n* **Clean separation**: routers handle HTTP, services handle business logic, models handle persistence.\n* **Security‑first**: encrypted keys, token expiration, environment‑based configuration.\n* **Room for improvement**: fix the collection name typo, unify the data store if possible, and add unit tests for the service layer.\n\nOverall, the code base demonstrates a modular, production‑ready design that follows modern best practices for web services.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('a0468eb6-b384-4d66-8d6e-a22e4724e4a8'), timestamp=datetime.datetime(2025, 8, 12, 20, 9, 30, 775830), session_id=UUID('44ed3575-69a0-4c05-a644-f4546233811f'), content='about Fastapi application one', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('1fdbb941-f56d-429f-8ade-c4222908a0ae'), timestamp=datetime.datetime(2025, 8, 12, 20, 9, 32, 274445), session_id=UUID('44ed3575-69a0-4c05-a644-f4546233811f'), content='## FastAPI Application – “One” (the core API)\n\nBelow is a walk‑through of the FastAPI part of the project you shared.  \nI’ll describe the **entry point**, the **router structure**, the **dependency‑injection** pattern, and the **service layer** that keeps the code clean and testable.\n\n---\n\n### 1.  The Main Application (`main.py` – not shown but implied)\n\n```python\nfrom fastapi import FastAPI\nfrom src.router import rag, setup, sessions, auth\n\napp = FastAPI(title="RAG Service")\n\n# Mount the routers\napp.include_router(rag.router, prefix="/rag", tags=["rag"])\napp.include_router(setup.router, prefix="/setup", tags=["setup"])\napp.include_router(sessions.router, prefix="/sessions", tags=["sessions"])\napp.include_router(auth.router, prefix="/auth", tags=["auth"])\n```\n\n* **FastAPI** is the web framework that turns Python functions into HTTP endpoints.\n* Each router (`rag`, `setup`, `sessions`, `auth`) lives in its own module, keeping concerns separated.\n* The `prefix` argument scopes all routes in a router under a common path (e.g., `/rag/git`).\n\n---\n\n### 2.  Router Modules – What They Do\n\n| Router | Key Endpoints | Responsibility |\n|--------|---------------|----------------|\n| **`rag.py`** | `/git`, `/upload` | Handles retrieval of code from Git or file uploads, then forwards the data to the *rag_service* for processing. |\n| **`setup.py`** | `/init/`, `/models` | Stores encrypted API keys and lets users pick an LLM model. |\n| **`sessions.py`** | `/create`, `/list`, `/update-title` | Manages chat sessions, titles, and message history. |\n| **`auth.py`** | `/login`, `/refresh` | Authenticates users and issues JWTs. |\n\nEach router is **thin**: it validates input, calls a service function, and returns the service’s response. This keeps the HTTP layer free of business logic.\n\n---\n\n### 3.  Dependency Injection\n\nFastAPI’s `Depends` is used everywhere to pull in reusable components:\n\n```python\nfrom fastapi import Depends\nfrom src.db import get_db\nfrom src.router.auth import get_current_user\n\n@router.post("/models")\nasync def choose_model(body: Dict = Body(...),\n                       db=Depends(get_db),\n                       user=Depends(get_current_user)):\n    ...\n```\n\n* **`get_db`** – Provides a SQLAlchemy session (or a `sqlmodel` session).  \n* **`get_current_user`** – Decodes the JWT, fetches the user from the DB, and injects it into the endpoint.\n\nThis pattern makes unit testing trivial: you can pass a mock `db` or `user` instead of spinning up a real database or authentication server.\n\n---\n\n### 4.  Service Layer\n\nThe routers delegate heavy lifting to *service* modules:\n\n```python\n# src/service/rag_service.py\nasync def get_handler(req, session_id, context_id, context_type):\n    # 1. Store files in a temporary folder\n    # 2. Run embeddings / LLM queries\n    # 3. Return a structured response\n```\n\n```python\n# src/service/set_up_service.py\ndef encrypt(key: str) -> str:\n    # Symmetric encryption (e.g., Fernet) so the key can be decrypted later\n```\n\n* **Why a service layer?**  \n  * Keeps routers focused on HTTP concerns.  \n  * Allows the same logic to be reused by other parts of the system (e.g., background workers).  \n  * Makes the codebase easier to test – you can unit‑test the service functions without touching FastAPI.\n\n---\n\n### 5.  Database Interaction\n\nThe project uses **SQLAlchemy** (or `sqlmodel`) for relational data:\n\n```python\nconfig = db.query(UserLLMConfig).filter_by(user_id=user.userid).first()\n```\n\n* **Models** (`UserLLMConfig`, `APIKEYS`, `Message`, etc.) live in `src/models/schema.py`.  \n* The `APIKEYS` table stores encrypted keys per user and provider.  \n* The `Message` table holds chat history, while `Session` tracks conversation metadata.\n\n---\n\n### 6.  Environment & Logging\n\n```python\nfrom dotenv import load_dotenv\nimport logging\n\nload_dotenv()          # Loads .env file into os.environ\nlogger = logging.getLogger("rag")   # or "basic_router"\n```\n\n* **`dotenv`** keeps secrets (API keys, DB URLs) out of the codebase.  \n* **`logging`** is configured once per module; logs are written to `logs/api.log` via Loguru in `sessions.py`.  \n* This setup is production‑ready: logs rotate, retain for 10 days, and are filtered by level.\n\n---\n\n### 7.  Authentication Flow (Illustrated)\n\n1. **Login** (`/auth/login`)  \n   * User submits credentials → `auth_service.authenticate()` → JWT issued.  \n2. **Protected Endpoints** (`/setup/models`, `/rag/upload`, etc.)  \n   * `get_current_user` reads the JWT from the `Authorization` header, validates it, and fetches the user record.  \n   * If the token is missing or invalid, FastAPI automatically returns a 401.\n\n---\n\n### 8.  Example: Uploading a File\n\n```python\n@router.post("/upload")\nasync def get_rag(\n        files: List[UploadFile] = File(...),\n        session_id: str = Form(...),\n        context_id: str = Form(...),\n        context_type: str = Form(...)\n):\n    logger.info(f"Got Content:{files} {session_id} {context_id} {context_type}")\n    res = await get_handler(\n        req=files,\n        session_id=session_id,\n        context_id=context_id,\n        context_type=context_type\n    )\n    return res\n```\n\n* **`UploadFile`** is a FastAPI abstraction that streams the file to disk or memory.  \n* The endpoint logs the request, then hands off to `get_handler`, which might:\n  * Store the file temporarily.  \n  * Run an embedding model.  \n  * Query a vector store.  \n  * Return a JSON payload with the answer.\n\n---\n\n### 9.  Take‑away Summary\n\n| Feature | What It Means |\n|---------|---------------|\n| **FastAPI + APIRouter** | Clean, modular route definitions. |\n| **Depends** | Reusable, testable dependencies (DB, auth). |\n| **Service Layer** | Keeps business logic separate from HTTP. |\n| **SQLAlchemy** | Relational persistence for user configs, messages, etc. |\n| **dotenv + logging** | Production‑ready configuration and observability. |\n| **JWT Auth** | Stateless, secure authentication. |\n\nWith this architecture, adding a new endpoint is as simple as:\n\n1. Create a new router module (or add to an existing one).  \n2. Define the route with `@router.post(...)`.  \n3. Call a service function that does the heavy lifting.  \n4. Return the service’s response.\n\nFeel free to ask if you’d like to dive deeper into any specific part—be it the authentication flow, the RAG service, or the database models!', files=None, model_response_time_ms=None)]
2025-08-15 19:56:19.824 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('4418c9c5-c493-4569-8c05-a3a71960fdd5'), timestamp=datetime.datetime(2025, 8, 12, 20, 6, 43, 424431), session_id=UUID('44ed3575-69a0-4c05-a644-f4546233811f'), content='what did you learn from files given you about .py files', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('ac5a1552-fc7b-4482-9976-2f05d41833d8'), timestamp=datetime.datetime(2025, 8, 12, 20, 6, 45, 492027), session_id=UUID('44ed3575-69a0-4c05-a644-f4546233811f'), content='From the snippets you shared, the two Python files (`setup.py` and `rag.py`) give us a pretty clear picture of how this project is structured and what responsibilities each module has. Below is a quick rundown of the key take‑aways, broken into bite‑size sections so it’s easy to digest.\n\n---\n\n## 1.  The Project is a **FastAPI** Service\n\nBoth files import `APIRouter` from FastAPI and expose routes (`/models`, `/git`, `/upload`).  \n- **`APIRouter`** lets you group endpoints together and mount them in the main app.  \n- The routes are defined with decorators (`@router.post(...)`) and return JSON responses.\n\n> **Example**  \n> ```python\n> @router.post("/models")\n> async def choose_model(body: Dict = Body(...), db=Depends(get_db), user=Depends(get_current_user)):\n>     ...\n> ```\n\n---\n\n## 2.  Dependency Injection & Auth\n\n- `Depends(get_db)` pulls a database session from the dependency container.  \n- `Depends(get_current_user)` fetches the authenticated user (likely via a JWT or session cookie).  \n- These dependencies keep the endpoint logic clean and testable.\n\n---\n\n## 3.  Environment & Logging\n\n- `dotenv.load_dotenv()` loads environment variables from a `.env` file.  \n- `logging.getLogger("basic_router")` (or `"rag"`) sets up a logger that can be used throughout the module.  \n- This pattern is common in production‑ready services where you want to keep secrets out of code and have structured logs.\n\n---\n\n## 4.  Interaction with the Database\n\n- The `choose_model` endpoint queries a `UserLLMConfig` table for the current user’s config, updates the `model` field, and commits the change.  \n- The code uses SQLAlchemy’s ORM style (`db.query(...).filter_by(...).first()`).  \n- Error handling is done via `HTTPException` to return proper HTTP status codes.\n\n---\n\n## 5.  Handling File Uploads & External Services\n\n- `rag.py` shows how to accept file uploads (`UploadFile`) and form data (`Form`).  \n- It delegates heavy lifting to service functions (`git_handler`, `get_handler`) defined elsewhere (`src.service.rag_service`).  \n- This separation keeps the router thin and business logic in services.\n\n> **Example**  \n> ```python\n> @router.post("/upload")\n> async def get_rag(files: List[UploadFile] = File(...), session_id: str = Form(...), ...):\n>     res = await get_handler(req=files, session_id=session_id, ...)\n>     return res\n> ```\n\n---\n\n## 6.  Schema & Validation\n\n- The imports from `src.models.schema` (`APIKEYS`, `UserLLMConfig`, `API_KEY_REQUEST`) suggest that Pydantic models are used for request/response validation.  \n- Even though the snippet only shows a raw `Dict` for the body, the project likely uses Pydantic elsewhere for stricter typing.\n\n---\n\n## 7.  General Coding Style\n\n- **Type hints** are used throughout (`Dict`, `List[UploadFile]`, `Body(...)`).  \n- **Async** functions are employed where I/O is expected (file uploads, database calls).  \n- **Error handling** is explicit: missing fields raise `HTTPException` with clear messages.\n\n---\n\n### TL;DR\n\n- **FastAPI** + **APIRouter** for clean route definitions.  \n- **Dependency injection** for DB sessions and auth.  \n- **Logging** and **dotenv** for production readiness.  \n- **SQLAlchemy ORM** for DB interactions.  \n- **Service layer** (`rag_service`, `set_up_service`) keeps routers lightweight.  \n- **Pydantic** (implied) for data validation.  \n\nThese patterns make the codebase modular, testable, and easy to extend—exactly what you’d expect from a well‑structured Python web service.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('df38db54-259f-4392-ace7-ffb197bda9af'), timestamp=datetime.datetime(2025, 8, 12, 20, 8, 43, 222725), session_id=UUID('44ed3575-69a0-4c05-a644-f4546233811f'), content='What did you learn from code base give to you now', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('d026a298-1a6a-4ba4-a609-ffa66fd9be7d'), timestamp=datetime.datetime(2025, 8, 12, 20, 8, 44, 731582), session_id=UUID('44ed3575-69a0-4c05-a644-f4546233811f'), content='**What the code base tells us**\n\n| Layer | What we see | Why it matters |\n|-------|-------------|----------------|\n| **Data model (Kotlin)** | `User` and `RefreshToken` are plain‑data classes annotated with Spring‑Data MongoDB annotations (`@Document`, `@Id`, `@Indexed`). | The application stores users and refresh‑tokens in a MongoDB collection. The `RefreshToken` class even has an index that expires tokens immediately (`expireAfter = "0s"`), which is a clever way to let MongoDB clean up stale tokens automatically. |\n| **Python API (FastAPI)** | Two endpoints – `/init/` to store an encrypted API key and `/providers` to pick an LLM provider. | The API is thin: it delegates business logic to a service layer (`encrypt`, `api_providers`, `llm_providers`). This keeps the router focused on request/response handling. |\n| **Dependency injection** | `Depends(get_db)` pulls a SQLAlchemy session; `Depends(get_current_user)` authenticates the caller. | Using FastAPI’s `Depends` keeps the code testable and separates concerns. |\n| **Database interaction** | `db.query(APIKEYS).filter_by(user_id=current_user.userid, provider=api_provider).first()` – classic SQLAlchemy ORM usage. | The code is written for a relational DB (likely PostgreSQL or MySQL) even though the Kotlin side uses MongoDB. The project is hybrid or the Kotlin part is a separate micro‑service. |\n| **Security** | API keys are stored encrypted (`encrypt(api_key)`). | Good practice – never persist plain keys. |\n| **Logging & env** | `logging.getLogger("basic_router")` and `load_dotenv()` – environment variables are loaded from a `.env` file. | Keeps secrets out of code and provides structured logs. |\n| **Error handling** | `HTTPException` with clear status codes and messages. | Users get meaningful feedback; the API is robust. |\n| **Potential typo** | `@Document("refersh_token")` – likely a misspelling of “refresh_token”. | Might cause confusion or a missing collection. |\n| **Missing pieces** | The Kotlin side uses `ObjectId` from BSON; the Python side uses SQLAlchemy models (`APIKEYS`, `UserLLMConfig`). | The two parts of the system are not directly connected in the snippets, suggesting separate services or a future integration layer. |\n\n---\n\n### Take‑away\n\n* The project is a **hybrid** stack: Kotlin + Spring Data MongoDB for user & token persistence, and Python + FastAPI + SQLAlchemy for API key and LLM provider configuration.\n* **Clean separation**: routers handle HTTP, services handle business logic, models handle persistence.\n* **Security‑first**: encrypted keys, token expiration, environment‑based configuration.\n* **Room for improvement**: fix the collection name typo, unify the data store if possible, and add unit tests for the service layer.\n\nOverall, the code base demonstrates a modular, production‑ready design that follows modern best practices for web services.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('a0468eb6-b384-4d66-8d6e-a22e4724e4a8'), timestamp=datetime.datetime(2025, 8, 12, 20, 9, 30, 775830), session_id=UUID('44ed3575-69a0-4c05-a644-f4546233811f'), content='about Fastapi application one', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('1fdbb941-f56d-429f-8ade-c4222908a0ae'), timestamp=datetime.datetime(2025, 8, 12, 20, 9, 32, 274445), session_id=UUID('44ed3575-69a0-4c05-a644-f4546233811f'), content='## FastAPI Application – “One” (the core API)\n\nBelow is a walk‑through of the FastAPI part of the project you shared.  \nI’ll describe the **entry point**, the **router structure**, the **dependency‑injection** pattern, and the **service layer** that keeps the code clean and testable.\n\n---\n\n### 1.  The Main Application (`main.py` – not shown but implied)\n\n```python\nfrom fastapi import FastAPI\nfrom src.router import rag, setup, sessions, auth\n\napp = FastAPI(title="RAG Service")\n\n# Mount the routers\napp.include_router(rag.router, prefix="/rag", tags=["rag"])\napp.include_router(setup.router, prefix="/setup", tags=["setup"])\napp.include_router(sessions.router, prefix="/sessions", tags=["sessions"])\napp.include_router(auth.router, prefix="/auth", tags=["auth"])\n```\n\n* **FastAPI** is the web framework that turns Python functions into HTTP endpoints.\n* Each router (`rag`, `setup`, `sessions`, `auth`) lives in its own module, keeping concerns separated.\n* The `prefix` argument scopes all routes in a router under a common path (e.g., `/rag/git`).\n\n---\n\n### 2.  Router Modules – What They Do\n\n| Router | Key Endpoints | Responsibility |\n|--------|---------------|----------------|\n| **`rag.py`** | `/git`, `/upload` | Handles retrieval of code from Git or file uploads, then forwards the data to the *rag_service* for processing. |\n| **`setup.py`** | `/init/`, `/models` | Stores encrypted API keys and lets users pick an LLM model. |\n| **`sessions.py`** | `/create`, `/list`, `/update-title` | Manages chat sessions, titles, and message history. |\n| **`auth.py`** | `/login`, `/refresh` | Authenticates users and issues JWTs. |\n\nEach router is **thin**: it validates input, calls a service function, and returns the service’s response. This keeps the HTTP layer free of business logic.\n\n---\n\n### 3.  Dependency Injection\n\nFastAPI’s `Depends` is used everywhere to pull in reusable components:\n\n```python\nfrom fastapi import Depends\nfrom src.db import get_db\nfrom src.router.auth import get_current_user\n\n@router.post("/models")\nasync def choose_model(body: Dict = Body(...),\n                       db=Depends(get_db),\n                       user=Depends(get_current_user)):\n    ...\n```\n\n* **`get_db`** – Provides a SQLAlchemy session (or a `sqlmodel` session).  \n* **`get_current_user`** – Decodes the JWT, fetches the user from the DB, and injects it into the endpoint.\n\nThis pattern makes unit testing trivial: you can pass a mock `db` or `user` instead of spinning up a real database or authentication server.\n\n---\n\n### 4.  Service Layer\n\nThe routers delegate heavy lifting to *service* modules:\n\n```python\n# src/service/rag_service.py\nasync def get_handler(req, session_id, context_id, context_type):\n    # 1. Store files in a temporary folder\n    # 2. Run embeddings / LLM queries\n    # 3. Return a structured response\n```\n\n```python\n# src/service/set_up_service.py\ndef encrypt(key: str) -> str:\n    # Symmetric encryption (e.g., Fernet) so the key can be decrypted later\n```\n\n* **Why a service layer?**  \n  * Keeps routers focused on HTTP concerns.  \n  * Allows the same logic to be reused by other parts of the system (e.g., background workers).  \n  * Makes the codebase easier to test – you can unit‑test the service functions without touching FastAPI.\n\n---\n\n### 5.  Database Interaction\n\nThe project uses **SQLAlchemy** (or `sqlmodel`) for relational data:\n\n```python\nconfig = db.query(UserLLMConfig).filter_by(user_id=user.userid).first()\n```\n\n* **Models** (`UserLLMConfig`, `APIKEYS`, `Message`, etc.) live in `src/models/schema.py`.  \n* The `APIKEYS` table stores encrypted keys per user and provider.  \n* The `Message` table holds chat history, while `Session` tracks conversation metadata.\n\n---\n\n### 6.  Environment & Logging\n\n```python\nfrom dotenv import load_dotenv\nimport logging\n\nload_dotenv()          # Loads .env file into os.environ\nlogger = logging.getLogger("rag")   # or "basic_router"\n```\n\n* **`dotenv`** keeps secrets (API keys, DB URLs) out of the codebase.  \n* **`logging`** is configured once per module; logs are written to `logs/api.log` via Loguru in `sessions.py`.  \n* This setup is production‑ready: logs rotate, retain for 10 days, and are filtered by level.\n\n---\n\n### 7.  Authentication Flow (Illustrated)\n\n1. **Login** (`/auth/login`)  \n   * User submits credentials → `auth_service.authenticate()` → JWT issued.  \n2. **Protected Endpoints** (`/setup/models`, `/rag/upload`, etc.)  \n   * `get_current_user` reads the JWT from the `Authorization` header, validates it, and fetches the user record.  \n   * If the token is missing or invalid, FastAPI automatically returns a 401.\n\n---\n\n### 8.  Example: Uploading a File\n\n```python\n@router.post("/upload")\nasync def get_rag(\n        files: List[UploadFile] = File(...),\n        session_id: str = Form(...),\n        context_id: str = Form(...),\n        context_type: str = Form(...)\n):\n    logger.info(f"Got Content:{files} {session_id} {context_id} {context_type}")\n    res = await get_handler(\n        req=files,\n        session_id=session_id,\n        context_id=context_id,\n        context_type=context_type\n    )\n    return res\n```\n\n* **`UploadFile`** is a FastAPI abstraction that streams the file to disk or memory.  \n* The endpoint logs the request, then hands off to `get_handler`, which might:\n  * Store the file temporarily.  \n  * Run an embedding model.  \n  * Query a vector store.  \n  * Return a JSON payload with the answer.\n\n---\n\n### 9.  Take‑away Summary\n\n| Feature | What It Means |\n|---------|---------------|\n| **FastAPI + APIRouter** | Clean, modular route definitions. |\n| **Depends** | Reusable, testable dependencies (DB, auth). |\n| **Service Layer** | Keeps business logic separate from HTTP. |\n| **SQLAlchemy** | Relational persistence for user configs, messages, etc. |\n| **dotenv + logging** | Production‑ready configuration and observability. |\n| **JWT Auth** | Stateless, secure authentication. |\n\nWith this architecture, adding a new endpoint is as simple as:\n\n1. Create a new router module (or add to an existing one).  \n2. Define the route with `@router.post(...)`.  \n3. Call a service function that does the heavy lifting.  \n4. Return the service’s response.\n\nFeel free to ask if you’d like to dive deeper into any specific part—be it the authentication flow, the RAG service, or the database models!', files=None, model_response_time_ms=None)]
2025-08-15 19:56:19.836 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('4418c9c5-c493-4569-8c05-a3a71960fdd5'), 'timestamp': datetime.datetime(2025, 8, 12, 20, 6, 43, 424431), 'session_id': UUID('44ed3575-69a0-4c05-a644-f4546233811f'), 'content': 'what did you learn from files given you about .py files', 'files': [], 'model_response_time_ms': None}
2025-08-15 19:56:19.836 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('4418c9c5-c493-4569-8c05-a3a71960fdd5'), 'timestamp': datetime.datetime(2025, 8, 12, 20, 6, 43, 424431), 'session_id': UUID('44ed3575-69a0-4c05-a644-f4546233811f'), 'content': 'what did you learn from files given you about .py files', 'files': [], 'model_response_time_ms': None}
2025-08-15 19:56:19.838 | INFO     | src.main:log_requests:54 - GET /sessions/history/8aaf8164-67bc-4628-9549-22a06c1835a7 → 200 (4051.68ms)
2025-08-15 19:56:19.838 | INFO     | src.main:log_requests:54 - GET /sessions/history/8aaf8164-67bc-4628-9549-22a06c1835a7 → 200 (4051.68ms)
2025-08-15 19:56:20.073 | INFO     | src.main:log_requests:54 - GET /sessions/history/44ed3575-69a0-4c05-a644-f4546233811f → 200 (1224.19ms)
2025-08-15 19:56:20.073 | INFO     | src.main:log_requests:54 - GET /sessions/history/44ed3575-69a0-4c05-a644-f4546233811f → 200 (1224.19ms)
2025-08-15 19:57:59.174 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-15 19:57:59.174 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-15 19:57:59.175 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-15 19:57:59.175 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-15 19:57:59.176 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.01ms)
2025-08-15 19:57:59.176 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.01ms)
2025-08-15 19:57:59.177 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.0ms)
2025-08-15 19:57:59.177 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.0ms)
2025-08-15 19:57:59.489 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 19:57:59.489 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 19:58:00.960 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1471.46ms)
2025-08-15 19:58:00.960 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1471.46ms)
2025-08-15 19:58:00.964 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 19:58:00.964 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 19:58:02.344 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1379.42ms)
2025-08-15 19:58:02.344 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1379.42ms)
2025-08-15 19:58:47.200 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/cb91e64e-ade4-40ef-b2bd-2dca5705a5a3
2025-08-15 19:58:47.200 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/cb91e64e-ade4-40ef-b2bd-2dca5705a5a3
2025-08-15 19:58:47.201 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/cb91e64e-ade4-40ef-b2bd-2dca5705a5a3 → 200 (1.0ms)
2025-08-15 19:58:47.201 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/cb91e64e-ade4-40ef-b2bd-2dca5705a5a3 → 200 (1.0ms)
2025-08-15 19:58:47.506 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/cb91e64e-ade4-40ef-b2bd-2dca5705a5a3
2025-08-15 19:58:47.506 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/cb91e64e-ade4-40ef-b2bd-2dca5705a5a3
2025-08-15 19:58:48.453 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('b263c7b4-0009-41e4-a56f-4555832d38dc'), timestamp=datetime.datetime(2025, 8, 15, 18, 0, 54, 973910), session_id=UUID('cb91e64e-ade4-40ef-b2bd-2dca5705a5a3'), content='Give 100 lines of java code', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('f1f8c9f6-02e5-4130-b7ee-dc80dea7339b'), timestamp=datetime.datetime(2025, 8, 15, 18, 0, 57, 14621), session_id=UUID('cb91e64e-ade4-40ef-b2bd-2dca5705a5a3'), content='', files=None, model_response_time_ms=None)]
2025-08-15 19:58:48.453 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('b263c7b4-0009-41e4-a56f-4555832d38dc'), timestamp=datetime.datetime(2025, 8, 15, 18, 0, 54, 973910), session_id=UUID('cb91e64e-ade4-40ef-b2bd-2dca5705a5a3'), content='Give 100 lines of java code', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('f1f8c9f6-02e5-4130-b7ee-dc80dea7339b'), timestamp=datetime.datetime(2025, 8, 15, 18, 0, 57, 14621), session_id=UUID('cb91e64e-ade4-40ef-b2bd-2dca5705a5a3'), content='', files=None, model_response_time_ms=None)]
2025-08-15 19:58:48.455 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('b263c7b4-0009-41e4-a56f-4555832d38dc'), 'timestamp': datetime.datetime(2025, 8, 15, 18, 0, 54, 973910), 'session_id': UUID('cb91e64e-ade4-40ef-b2bd-2dca5705a5a3'), 'content': 'Give 100 lines of java code', 'files': [], 'model_response_time_ms': None}
2025-08-15 19:58:48.455 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('b263c7b4-0009-41e4-a56f-4555832d38dc'), 'timestamp': datetime.datetime(2025, 8, 15, 18, 0, 54, 973910), 'session_id': UUID('cb91e64e-ade4-40ef-b2bd-2dca5705a5a3'), 'content': 'Give 100 lines of java code', 'files': [], 'model_response_time_ms': None}
2025-08-15 19:58:48.715 | INFO     | src.main:log_requests:54 - GET /sessions/history/cb91e64e-ade4-40ef-b2bd-2dca5705a5a3 → 200 (1208.57ms)
2025-08-15 19:58:48.715 | INFO     | src.main:log_requests:54 - GET /sessions/history/cb91e64e-ade4-40ef-b2bd-2dca5705a5a3 → 200 (1208.57ms)
2025-08-15 19:58:49.241 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/7e7f53ca-1b5a-4d6d-816a-83de0c7c9a9f
2025-08-15 19:58:49.241 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/7e7f53ca-1b5a-4d6d-816a-83de0c7c9a9f
2025-08-15 19:58:50.179 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-15 19:58:50.179 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-15 19:58:50.512 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/7e7f53ca-1b5a-4d6d-816a-83de0c7c9a9f
2025-08-15 19:58:50.512 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/7e7f53ca-1b5a-4d6d-816a-83de0c7c9a9f
2025-08-15 19:58:51.272 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-15 19:58:51.272 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-15 19:58:51.492 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/418cd133-0a53-4c78-826e-9257286284d7
2025-08-15 19:58:51.492 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/418cd133-0a53-4c78-826e-9257286284d7
2025-08-15 19:58:51.493 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/418cd133-0a53-4c78-826e-9257286284d7 → 200 (1.0ms)
2025-08-15 19:58:51.493 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/418cd133-0a53-4c78-826e-9257286284d7 → 200 (1.0ms)
2025-08-15 19:58:51.802 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/418cd133-0a53-4c78-826e-9257286284d7
2025-08-15 19:58:51.802 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/418cd133-0a53-4c78-826e-9257286284d7
2025-08-15 19:58:52.789 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('2f77bf50-ceae-4dbb-b360-6b717f378eab'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 9, 752307), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='Give all html tags you can and write about anime', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('d0e84b5d-ac22-4a07-ad2e-9805336f97b8'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 11, 619485), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**Hello!**  \nBelow you’ll find a comprehensive list of HTML tags that are part of the current HTML5 specification, followed by a short, conversational discussion about anime. I’ve organized the tags into logical groups so you can see how they’re typically used, and I’ve sprinkled in a few examples to make things clearer.\n\n---\n\n## 1. All HTML Tags (HTML5)\n\n> *Note: The list below includes every standard tag that is officially part of the HTML5 spec. Some tags are rarely used in everyday web pages, but they’re still part of the language.*\n\n### 1.1 Document Structure\n\n| Tag | Purpose |\n|-----|---------|\n| `<!DOCTYPE>` | Declares the document type (e.g., `<!DOCTYPE html>`). |\n| `<html>` | Root element of an HTML document. |\n| `<head>` | Contains meta‑information, links, scripts, etc. |\n| `<body>` | Holds the visible content of the page. |\n\n### 1.2 Metadata & Head Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<title>` | Sets the page title shown in the browser tab. |\n| `<base>` | Specifies a base URL for relative links. |\n| `<link>` | Links external resources (e.g., CSS, icons). |\n| `<meta>` | Provides metadata such as charset, viewport, description. |\n| `<style>` | Embeds CSS styles directly in the document. |\n| `<script>` | Embeds or references JavaScript. |\n| `<noscript>` | Content shown when JavaScript is disabled. |\n\n### 1.3 Text Content\n\n| Tag | Purpose |\n|-----|---------|\n| `<h1>`–`<h6>` | Headings of decreasing importance. |\n| `<p>` | Paragraph. |\n| `<blockquote>` | Quoted text. |\n| `<ol>` | Ordered list. |\n| `<ul>` | Unordered list. |\n| `<li>` | List item. |\n| `<dl>` | Definition list. |\n| `<dt>` | Definition term. |\n| `<dd>` | Definition description. |\n| `<figure>` | Self‑contained content (image, diagram, etc.). |\n| `<figcaption>` | Caption for a `<figure>`. |\n| `<hr>` | Horizontal rule (thematic break). |\n| `<pre>` | Pre‑formatted text. |\n| `<code>` | Inline code snippet. |\n| `<samp>` | Sample output from a program. |\n| `<kbd>` | User input (keyboard). |\n| `<var>` | Variable name. |\n| `<abbr>` | Abbreviation with optional title. |\n| `<cite>` | Citation. |\n| `<b>` | Bold (semantic emphasis). |\n| `<strong>` | Strong importance (semantically bold). |\n| `<i>` | Italic (semantic emphasis). |\n| `<em>` | Emphasis (semantically italic). |\n| `<mark>` | Highlighted text. |\n| `<small>` | Smaller text. |\n| `<sub>` | Subscript. |\n| `<sup>` | Superscript. |\n| `<span>` | Generic inline container. |\n| `<a>` | Anchor (hyperlink). |\n| `<img>` | Embedded image. |\n| `<area>` | Image map area. |\n| `<map>` | Image map definition. |\n| `<object>` | Embedded object (e.g., plugin). |\n| `<embed>` | Embedded content (e.g., Flash). |\n| `<iframe>` | Inline frame (embedded page). |\n| `<video>` | Video element. |\n| `<audio>` | Audio element. |\n| `<source>` | Media source for `<video>`/`<audio>`. |\n| `<track>` | Text track for media. |\n| `<canvas>` | Drawing surface for graphics. |\n| `<svg>` | Scalable Vector Graphics. |\n| `<math>` | MathML content. |\n\n### 1.4 Forms & Input\n\n| Tag | Purpose |\n|-----|---------|\n| `<form>` | Form container. |\n| `<input>` | Input field (various types). |\n| `<button>` | Clickable button. |\n| `<select>` | Dropdown list. |\n| `<option>` | Option `<select>`. |\n| `<optgroup>` | Group of options. |\n| `<textarea>` | Multi‑line text input. |\n| `<label>` | Label for a form control. |\n| `<fieldset>` | Group of form controls. |\n| `<legend>` | Caption for a `<fieldset>`. |\n| `<datalist>` | List of predefined options. |\n| `<output>` | Result of a calculation. |\n| `<progress>` | Progress indicator. |\n| `<meter>` | Scalar measurement. |\n\n### 1.5 Semantic & Structural Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<header>` | Introductory content (header). |\n| `<nav>` | Navigation links. |\n| `<main>` | Primary content of the document. |\n| `<section>` | Thematic grouping of content. |\n| `<article>` | Self‑contained composition (blog post, news article). |\n| `<aside>` | Tangentially related content (sidebar). |\n| `<footer>` | Footer of a section or page. |\n| `<details>` | Disclosure widget. |\n| `<summary>` | Summary for `<details>`. |\n| `<dialog>` | Modal dialog. |\n| `<template>` | Template for client‑side rendering. |\n| `<slot>` | Placeholder for distributed content (Web Components). |\n| `<picture>` | Responsive image container. |\n| `<source>` | Media source for `<picture>`. |\n| `<noscript>` | Fallback content when JavaScript is disabled. |\n\n### 1.6 Table Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<table>` | Table container. |\n| `<caption>` | Table caption. |\n| `<thead>` | Header rows. |\n| `<tbody>` | Body rows. |\n| `<tfoot>` | Footer rows. |\n| `<tr>` | Table row. |\n| `<th>` | Header cell. |\n| `<td>` | Data cell. |\n| `<col>` | Column definition. |\n| `<colgroup>` | Group of columns. |\n\n### 1.7 Miscellaneous\n\n| Tag | Purpose |\n|-----|---------|\n| `<link>` | External resource (e.g., stylesheet). |\n| `<meta>` | Metadata. |\n| `<style>` | CSS styles. |\n| `<script>` | JavaScript. |\n| `<noscript>` | Fallback when JS disabled. |\n| `<iframe>` | Embedded browsing context. |\n| `<object>` | Embedded object. |\n| `<embed>` | Embedded content. |\n| `<param>` | Parameter for `<object>`. |\n| `<bdi>` | Bi‑directional isolation. |\n| `<bdo>` | Bi‑directional override. |\n| `<wbr>` | Word break opportunity. |\n| `<ruby>` | Ruby annotation. |\n| `<rt>` | Ruby text. |\n| `<rp>` | Ruby parenthesis. |\n| `<bdi>` | Bi‑directional isolation. |\n| `<bdo>` | Bi‑directional override. |\n| `<wbr>` | Word break opportunity. |\n| `<details>` | Disclosure widget. |\n| `<summary>` | Summary for `<details>`. |\n| `<dialog>` | Modal dialog. |\n| `<template>` | Client‑side template. |\n| `<slot>` | Slot for Web Components. |\n\n> **Tip:** When you’re building a page, start with the semantic tags (`<header>`, `<nav>`, `<main>`, `<footer>`) to give structure, then add the content‑specific tags (like `<article>`, `<', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('6f866059-a1ee-4130-9abb-869a26726ad4'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 38, 50874), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='Describa about anime and its impact', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('49ca68bf-d39e-4e8a-bd38-6ffdc3efb49b'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 39, 795989), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**Anime y su impacto: una mirada profunda**\n\n---\n\n### 1. ¿Qué es el anime?\n\nEl anime es la abreviatura de *animation* en japonés, pero hoy se entiende como el estilo de animación originario de Japón. Se caracteriza por:\n\n- **Estilo visual distintivo**: ojos grandes, expresiones exageradas y colores vibrantes.  \n- **Narrativas variadas**: desde historias de ciencia ficción y fantasía hasta dramas cotidianos y comedias románticas.  \n- **Formato flexible**: puede presentarse en series de televisión, películas, OVA (Original Video Animation) y web series.\n\nEjemplos icónicos: *Naruto*, *Spirited Away*, *Attack on Titan*, *My Hero Academia*.\n\n---\n\n### 2. Impacto cultural\n\n| Área | Efecto del anime | Ejemplo |\n|------|------------------|---------|\n| **Moda** | Influencia en la ropa y accesorios (cosplay, streetwear). | La popularidad de *Kawaii* y la adopción de chaquetas de manga en la moda urbana. |\n| **Lenguaje** | Expresiones y modismos japoneses se incorporan al habla cotidiana. | Frases como “kawaii” o “sugoi” se usan en conversaciones informales. |\n| **Arte y diseño** | Inspiración para ilustradores, diseñadores gráficos y artistas digitales. | Estilos de dibujo de *Studio Ghibli* influyen en la estética de videojuegos. |\n| **Música** | OSTs y temas de apertura se convierten en éxitos internacionales. | “Gurenge” de *Demon Slayer* alcanzó el #1 en Billboard Hot 100. |\n\n---\n\n### 3. Impacto económico\n\n1. **Industria del entretenimiento**  \n   - **Ventas de DVDs/Blu‑ray**: millones de unidades vendidas globalmente.  \n   - **Licencias de merchandising**: figuras, ropa, accesorios.  \n   - **Streaming**: plataformas como Crunchyroll, Netflix y Amazon Prime generan ingresos significativos con suscripciones y licencias de anime.\n\n2. **Turismo**  \n   - **Visitas a lugares de filmación**: ciudades como Tokio y Kyoto atraen a fans que buscan experiencias inmersivas.  \n   - **Eventos y convenciones**: Anime Expo, Comiket y Otakon generan miles de visitantes y ventas de productos.\n\n3. **Empleo**  \n   - **Creadores y artistas**: animadores, guionistas, compositores.  \n   - **Industria de la traducción**: subtituladores y dubladores.  \n   - **Marketing y publicidad**: campañas que utilizan personajes de anime para promocionar productos.\n\n---\n\n### 4. Impacto social y educativo\n\n- **Fomento de la creatividad**: los jóvenes se inspiran a crear sus propias historias y animaciones.  \n- **Aprendizaje de idiomas**: ver anime con subtítulos ayuda a mejorar la comprensión del japonés y, en muchos casos, del inglés.  \n- **Exploración de temas complejos**: series como *Death Note* o *Psycho-Pass* abordan dilemas éticos, filosóficos y sociales que generan debates en foros y grupos de estudio.  \n- **Inclusión y diversidad**: personajes LGBTQ+ y representaciones de diferentes culturas están cada vez más presentes, promoviendo la empatía y la aceptación.\n\n---\n\n### 5. Ejemplos de impacto concreto\n\n- **“Demon Slayer” (Kimetsu no Yaiba)**:  \n  - Ventas de manga superaron los 200 millones de copias.  \n  - La película *Mugen Train* se convirtió en la película más taquillera de Japón en 2020.  \n  - Influencia en la moda con la popularidad de la chaqueta de Tanjiro.\n\n- **“Attack on Titan” (Shingeki no Kyojin)**:  \n  - Generó un fenómeno global con fan art, cosplay y debates sobre su trama política.  \n  - La serie ha sido citada en estudios académicos sobre narrativas de conflicto y supervivencia.\n\n- **“My Hero Academia” (Boku no Hero Academia)**:  \n  - Ha inspirado a jóvenes a estudiar ingeniería y ciencias, citando la tecnología de los “quirks” como motivación.  \n  - La franquicia ha lanzado videojuegos, juguetes y colaboraciones con marcas como Nike.\n\n---\n\n### 6. Conclusión\n\nEl anime no es solo entretenimiento; es un fenómeno cultural que trasciende fronteras. Su capacidad para contar historias universales, combinar arte visual con narrativa profunda y generar comunidades globales lo convierte en una fuerza poderosa que influye en la moda, la economía, la educación y la sociedad en general. Cada episodio, cada personaje y cada banda sonora contribuyen a un ecosistema que sigue creciendo y evolucionando, demostrando que el anime seguirá siendo un motor de creatividad y conexión humana en el futuro.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('5e75f140-f61c-442b-99d1-940c01154b5c'), timestamp=datetime.datetime(2025, 8, 15, 19, 41, 1, 752634), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='In english', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('8c95fe14-e7e8-4ab6-af58-980912a98d4b'), timestamp=datetime.datetime(2025, 8, 15, 19, 41, 3, 761388), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**All HTML Tags (HTML\u202f5) + A Quick Guide to Anime & Its Impact**  \n*(English version)*  \n\n---\n\n## 1. Complete List of HTML\u202f5 Tags\n\nBelow is a grouped, up‑to‑date inventory of every standard element you’ll find in the HTML\u202f5 specification.  \nFeel free to copy‑paste the snippets into your own projects or use them as a reference when building a new page.\n\n| Category | Tag | Typical Use |\n|----------|-----|-------------|\n| **Document Structure** | `<!DOCTYPE html>` | Declares the document type. |\n| | `<html>` | Root element. |\n| | `<head>` | Metadata, links, scripts. |\n| | `<body>` | Visible content. |\n| **Metadata & Head Elements** | `<title>` | Page title. |\n| | `<base>` | Base URL for relative links. |\n| | `<link>` | External resources (CSS, icons). |\n| | `<meta>` | Charset, viewport, description, etc. |\n| | `<style>` | Inline CSS. |\n| | `<script>` | Inline or external JS. |\n| | `<noscript>` | Fallback when JS disabled. |\n| **Text & Semantic Content** | `<h1>`–`<h6>` | Headings. |\n| | `<p>` | Paragraph. |\n| | `<blockquote>` | Quoted text. |\n|ol>`, `<ul>`, `<li>` | Ordered & unordered lists. |\n| | `<dl>`, `<dt>`, `<dd>` | Definition lists. |\n| | `<figure>`, `<figcaption>` | Self‑contained media. |\n| | `<hr>` | Thematic break. |\n| | `<pre>`, `<code>`, `<samp>`, `<kbd>`, `<var>` | Code & sample text. |\n| | `<abbr>`, `<cite>`, `<b>`, `<strong>`, `<i>`, `<em>`, `<mark>`, `<small>`, `<sub>`, `<sup>`, `<span>` | Various inline semantics. |\n| | `<a>` | Hyperlink. |\n| | `<img>` | Image. |\n| | `<area>`, `<map>` | Image maps. |\n| | `<object>`, `<embed>` | Embedded objects. |\n| | `<iframe>` | Inline frame. |\n| | `<video>`, `<audio>`, `<source>`, `<track>` Media elements. |\n| | `<canvas>` | Drawing surface. |\n| | `<svg>` | Scalable vector graphics. |\n| | `<math>` | MathML. |\n| **Forms & Input** | `<form>` | Form container. |\n| | `<input>` | Various input types. |\n| | `<button>` | Clickable button. |\n| | `<select>`, `<option>`, `<optgroup>` | Dropdowns. |\n| | `<textarea>` | Multi‑line text. |\n| | `<label>` | Label for controls. |\n| | `<fieldset>`, `<legend>` | Grouped controls. |\n| | `<datalist>` | Pre‑defined options. |\n| | `<output>` | Result of calculation. |\n| | `<progress>`, `<meter>` | Progress & measurement. |\n| **Semantic & Structural Elements** | `<header>`, `<nav>`, `<main>`, `<section>`, `<article>`, `<aside>`, `<footer>` | Page layout. |\n| | `<details>`, `<summary>` | Disclosure widget. |\n| | `<dialog>` | Modal dialog. |\n| | `<template>` | Client‑side template. |\n| | `<slot>` | Web‑components placeholder. |\n| | `<picture>`, `<source>` | Responsive images. |\n| | `<noscript>` | Fallback for no JS. |\n| **Tables** | `<table>`, `<caption>`, `<thead>`, `<tbody>`, `<tfoot>`, `<tr>`, `<th>`, `<td>`, `<col>`, `<colgroup>` | Tabular data. |\n| **Miscellaneous** | `<link>`, `<meta>`, `<style>`, `<script>`, `<noscript>`, `<iframe>`, `<object>`, `<embed>`, `<param>`, `<bdi>`, `<bdo>`, `<wbr>`, `<ruby>`, `<rt>`, `<rp>` | Various utilities. |\n\n> **Tip:** Start your page with the semantic tags (`<header>`, `<nav>`, `<main>`, `<footer>`) to give it a clear structure, then sprinkle in the content‑specific tags as needed.\n\n---\n\n## 2. Anime & Its Impact – A Quick Overview\n\n### What Is Anime?\n\nAnime is the term used for Japanese animation, but it has become a global cultural phenomenon.  \nTypical characteristics:\n\n- **Visual style:** large expressive eyes, vibrant colors, dynamic action.\n- **Narrative breadth:** from slice‑of‑life dramas to epic sci‑fi sagas.\n- **Formats:** TV series, movies, OVAs, web‑only series, and more.\n\n**Examples:** *Naruto*, *Spirited\u202fAway*, *Attack\u202fon\u202fTitan*, *My\u202fHero\u202fAcademia*.\n\n---\n\n### Cultural Influence\n\n| Area | Effect | Example |\n|------|--------|---------|\n| **Fashion** | Cosplay, streetwear, Kawaii trends. | The rise of “anime‑inspired” sneakers and jackets. |\n| **Language** | Borrowed Japanese words. | “Kawaii,” “sugoi,” “otaku” used worldwide. |\n| **Art & Design** | Inspiration for illustrators, game designers. | Studio\u202fGhibli’s aesthetic influencing indie game art. |\n| **Music** | OSTs topping charts. | “Gurenge” (Demon\u202fSlayer) hit Billboard\u202fHot\u202f100. |\n\n---\n\n### Economic Impact\n\n1. **Entertainment Industry**  \n   - **Physical media sales** (DVD/Blu‑ray) still strong in Japan.  \n   - **Merchandising**: figures, apparel, accessories.  \n   - **Streaming**: Crunchyroll, Netflix, Amazon Prime license anime, generating subscription revenue.\n\n2. **Tourism & Events**  \n   - Fans visit filming locations in Tokyo, Kyoto, etc.  \n   - Conventions (Anime\u202fExpo, Otakon, Comiket) bring in millions of visitors and sales.\n\n3. **Employment**  \n   - Creators (animators, writers, composers).  \n   - Translators, subtitlers, voice actors.  \n   - Marketing teams that use anime characters for brand campaigns.\n\n---\n\n### Social & Educational Impact\n\n- **Creativity & DIY culture** – fans produce fan‑art, fan‑fiction, and even fan‑made animations.  \n- **Language learning** – watching anime with subtitles improves listening and reading skills.  \n- **Complex themes** – series like *Death\u202fNote* or *Psycho‑Pass* spark discussions on ethics, law, and society.  \n- **Representation** – increasing LGBTQ+ characters and diverse cultural portrayals promote empathy and inclusion.\n\n---\n\n### Concrete Success Stories\n\n| Series | Milestones | Cultural Footprint |\n|--------|------------|--------------------|\n| **Demon\u202fSlayer** | >200\u202fM manga copies; *Mugen\u202fTrain* the highest‑grossing Japanese film 2020 | Influenced fashion (Tanjiro’s jacket), spawned a massive merch line. |\n| **Attack\u202fon\u202fTitan** | Global fan‑art, cosplay, academic papers on its narrative | Sparked debates on war, survival, and political allegory. |\n| **My\u202fHero\u202fAcademia** | Video games, collaborations with Nike, tech‑inspired “quirks” | Inspired STEM interest among teens, cross‑industry partnerships. |\n\n---\n\n### Bottom Line\n\nAnime is more than entertainment; it’s a cultural engine that shapes fashion, language, art, and even economics.  \nIts stories resonate across borders, fostering communities that share creativity, curiosity, and a love for storytelling. Whether you’re a casual viewer or a hardcore fan, anime’s ripple effects are felt in everyday life—from the clothes you wear to the conversations you have.', files=None, model_response_time_ms=None)]
2025-08-15 19:58:52.789 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('2f77bf50-ceae-4dbb-b360-6b717f378eab'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 9, 752307), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='Give all html tags you can and write about anime', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('d0e84b5d-ac22-4a07-ad2e-9805336f97b8'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 11, 619485), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**Hello!**  \nBelow you’ll find a comprehensive list of HTML tags that are part of the current HTML5 specification, followed by a short, conversational discussion about anime. I’ve organized the tags into logical groups so you can see how they’re typically used, and I’ve sprinkled in a few examples to make things clearer.\n\n---\n\n## 1. All HTML Tags (HTML5)\n\n> *Note: The list below includes every standard tag that is officially part of the HTML5 spec. Some tags are rarely used in everyday web pages, but they’re still part of the language.*\n\n### 1.1 Document Structure\n\n| Tag | Purpose |\n|-----|---------|\n| `<!DOCTYPE>` | Declares the document type (e.g., `<!DOCTYPE html>`). |\n| `<html>` | Root element of an HTML document. |\n| `<head>` | Contains meta‑information, links, scripts, etc. |\n| `<body>` | Holds the visible content of the page. |\n\n### 1.2 Metadata & Head Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<title>` | Sets the page title shown in the browser tab. |\n| `<base>` | Specifies a base URL for relative links. |\n| `<link>` | Links external resources (e.g., CSS, icons). |\n| `<meta>` | Provides metadata such as charset, viewport, description. |\n| `<style>` | Embeds CSS styles directly in the document. |\n| `<script>` | Embeds or references JavaScript. |\n| `<noscript>` | Content shown when JavaScript is disabled. |\n\n### 1.3 Text Content\n\n| Tag | Purpose |\n|-----|---------|\n| `<h1>`–`<h6>` | Headings of decreasing importance. |\n| `<p>` | Paragraph. |\n| `<blockquote>` | Quoted text. |\n| `<ol>` | Ordered list. |\n| `<ul>` | Unordered list. |\n| `<li>` | List item. |\n| `<dl>` | Definition list. |\n| `<dt>` | Definition term. |\n| `<dd>` | Definition description. |\n| `<figure>` | Self‑contained content (image, diagram, etc.). |\n| `<figcaption>` | Caption for a `<figure>`. |\n| `<hr>` | Horizontal rule (thematic break). |\n| `<pre>` | Pre‑formatted text. |\n| `<code>` | Inline code snippet. |\n| `<samp>` | Sample output from a program. |\n| `<kbd>` | User input (keyboard). |\n| `<var>` | Variable name. |\n| `<abbr>` | Abbreviation with optional title. |\n| `<cite>` | Citation. |\n| `<b>` | Bold (semantic emphasis). |\n| `<strong>` | Strong importance (semantically bold). |\n| `<i>` | Italic (semantic emphasis). |\n| `<em>` | Emphasis (semantically italic). |\n| `<mark>` | Highlighted text. |\n| `<small>` | Smaller text. |\n| `<sub>` | Subscript. |\n| `<sup>` | Superscript. |\n| `<span>` | Generic inline container. |\n| `<a>` | Anchor (hyperlink). |\n| `<img>` | Embedded image. |\n| `<area>` | Image map area. |\n| `<map>` | Image map definition. |\n| `<object>` | Embedded object (e.g., plugin). |\n| `<embed>` | Embedded content (e.g., Flash). |\n| `<iframe>` | Inline frame (embedded page). |\n| `<video>` | Video element. |\n| `<audio>` | Audio element. |\n| `<source>` | Media source for `<video>`/`<audio>`. |\n| `<track>` | Text track for media. |\n| `<canvas>` | Drawing surface for graphics. |\n| `<svg>` | Scalable Vector Graphics. |\n| `<math>` | MathML content. |\n\n### 1.4 Forms & Input\n\n| Tag | Purpose |\n|-----|---------|\n| `<form>` | Form container. |\n| `<input>` | Input field (various types). |\n| `<button>` | Clickable button. |\n| `<select>` | Dropdown list. |\n| `<option>` | Option `<select>`. |\n| `<optgroup>` | Group of options. |\n| `<textarea>` | Multi‑line text input. |\n| `<label>` | Label for a form control. |\n| `<fieldset>` | Group of form controls. |\n| `<legend>` | Caption for a `<fieldset>`. |\n| `<datalist>` | List of predefined options. |\n| `<output>` | Result of a calculation. |\n| `<progress>` | Progress indicator. |\n| `<meter>` | Scalar measurement. |\n\n### 1.5 Semantic & Structural Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<header>` | Introductory content (header). |\n| `<nav>` | Navigation links. |\n| `<main>` | Primary content of the document. |\n| `<section>` | Thematic grouping of content. |\n| `<article>` | Self‑contained composition (blog post, news article). |\n| `<aside>` | Tangentially related content (sidebar). |\n| `<footer>` | Footer of a section or page. |\n| `<details>` | Disclosure widget. |\n| `<summary>` | Summary for `<details>`. |\n| `<dialog>` | Modal dialog. |\n| `<template>` | Template for client‑side rendering. |\n| `<slot>` | Placeholder for distributed content (Web Components). |\n| `<picture>` | Responsive image container. |\n| `<source>` | Media source for `<picture>`. |\n| `<noscript>` | Fallback content when JavaScript is disabled. |\n\n### 1.6 Table Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<table>` | Table container. |\n| `<caption>` | Table caption. |\n| `<thead>` | Header rows. |\n| `<tbody>` | Body rows. |\n| `<tfoot>` | Footer rows. |\n| `<tr>` | Table row. |\n| `<th>` | Header cell. |\n| `<td>` | Data cell. |\n| `<col>` | Column definition. |\n| `<colgroup>` | Group of columns. |\n\n### 1.7 Miscellaneous\n\n| Tag | Purpose |\n|-----|---------|\n| `<link>` | External resource (e.g., stylesheet). |\n| `<meta>` | Metadata. |\n| `<style>` | CSS styles. |\n| `<script>` | JavaScript. |\n| `<noscript>` | Fallback when JS disabled. |\n| `<iframe>` | Embedded browsing context. |\n| `<object>` | Embedded object. |\n| `<embed>` | Embedded content. |\n| `<param>` | Parameter for `<object>`. |\n| `<bdi>` | Bi‑directional isolation. |\n| `<bdo>` | Bi‑directional override. |\n| `<wbr>` | Word break opportunity. |\n| `<ruby>` | Ruby annotation. |\n| `<rt>` | Ruby text. |\n| `<rp>` | Ruby parenthesis. |\n| `<bdi>` | Bi‑directional isolation. |\n| `<bdo>` | Bi‑directional override. |\n| `<wbr>` | Word break opportunity. |\n| `<details>` | Disclosure widget. |\n| `<summary>` | Summary for `<details>`. |\n| `<dialog>` | Modal dialog. |\n| `<template>` | Client‑side template. |\n| `<slot>` | Slot for Web Components. |\n\n> **Tip:** When you’re building a page, start with the semantic tags (`<header>`, `<nav>`, `<main>`, `<footer>`) to give structure, then add the content‑specific tags (like `<article>`, `<', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('6f866059-a1ee-4130-9abb-869a26726ad4'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 38, 50874), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='Describa about anime and its impact', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('49ca68bf-d39e-4e8a-bd38-6ffdc3efb49b'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 39, 795989), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**Anime y su impacto: una mirada profunda**\n\n---\n\n### 1. ¿Qué es el anime?\n\nEl anime es la abreviatura de *animation* en japonés, pero hoy se entiende como el estilo de animación originario de Japón. Se caracteriza por:\n\n- **Estilo visual distintivo**: ojos grandes, expresiones exageradas y colores vibrantes.  \n- **Narrativas variadas**: desde historias de ciencia ficción y fantasía hasta dramas cotidianos y comedias románticas.  \n- **Formato flexible**: puede presentarse en series de televisión, películas, OVA (Original Video Animation) y web series.\n\nEjemplos icónicos: *Naruto*, *Spirited Away*, *Attack on Titan*, *My Hero Academia*.\n\n---\n\n### 2. Impacto cultural\n\n| Área | Efecto del anime | Ejemplo |\n|------|------------------|---------|\n| **Moda** | Influencia en la ropa y accesorios (cosplay, streetwear). | La popularidad de *Kawaii* y la adopción de chaquetas de manga en la moda urbana. |\n| **Lenguaje** | Expresiones y modismos japoneses se incorporan al habla cotidiana. | Frases como “kawaii” o “sugoi” se usan en conversaciones informales. |\n| **Arte y diseño** | Inspiración para ilustradores, diseñadores gráficos y artistas digitales. | Estilos de dibujo de *Studio Ghibli* influyen en la estética de videojuegos. |\n| **Música** | OSTs y temas de apertura se convierten en éxitos internacionales. | “Gurenge” de *Demon Slayer* alcanzó el #1 en Billboard Hot 100. |\n\n---\n\n### 3. Impacto económico\n\n1. **Industria del entretenimiento**  \n   - **Ventas de DVDs/Blu‑ray**: millones de unidades vendidas globalmente.  \n   - **Licencias de merchandising**: figuras, ropa, accesorios.  \n   - **Streaming**: plataformas como Crunchyroll, Netflix y Amazon Prime generan ingresos significativos con suscripciones y licencias de anime.\n\n2. **Turismo**  \n   - **Visitas a lugares de filmación**: ciudades como Tokio y Kyoto atraen a fans que buscan experiencias inmersivas.  \n   - **Eventos y convenciones**: Anime Expo, Comiket y Otakon generan miles de visitantes y ventas de productos.\n\n3. **Empleo**  \n   - **Creadores y artistas**: animadores, guionistas, compositores.  \n   - **Industria de la traducción**: subtituladores y dubladores.  \n   - **Marketing y publicidad**: campañas que utilizan personajes de anime para promocionar productos.\n\n---\n\n### 4. Impacto social y educativo\n\n- **Fomento de la creatividad**: los jóvenes se inspiran a crear sus propias historias y animaciones.  \n- **Aprendizaje de idiomas**: ver anime con subtítulos ayuda a mejorar la comprensión del japonés y, en muchos casos, del inglés.  \n- **Exploración de temas complejos**: series como *Death Note* o *Psycho-Pass* abordan dilemas éticos, filosóficos y sociales que generan debates en foros y grupos de estudio.  \n- **Inclusión y diversidad**: personajes LGBTQ+ y representaciones de diferentes culturas están cada vez más presentes, promoviendo la empatía y la aceptación.\n\n---\n\n### 5. Ejemplos de impacto concreto\n\n- **“Demon Slayer” (Kimetsu no Yaiba)**:  \n  - Ventas de manga superaron los 200 millones de copias.  \n  - La película *Mugen Train* se convirtió en la película más taquillera de Japón en 2020.  \n  - Influencia en la moda con la popularidad de la chaqueta de Tanjiro.\n\n- **“Attack on Titan” (Shingeki no Kyojin)**:  \n  - Generó un fenómeno global con fan art, cosplay y debates sobre su trama política.  \n  - La serie ha sido citada en estudios académicos sobre narrativas de conflicto y supervivencia.\n\n- **“My Hero Academia” (Boku no Hero Academia)**:  \n  - Ha inspirado a jóvenes a estudiar ingeniería y ciencias, citando la tecnología de los “quirks” como motivación.  \n  - La franquicia ha lanzado videojuegos, juguetes y colaboraciones con marcas como Nike.\n\n---\n\n### 6. Conclusión\n\nEl anime no es solo entretenimiento; es un fenómeno cultural que trasciende fronteras. Su capacidad para contar historias universales, combinar arte visual con narrativa profunda y generar comunidades globales lo convierte en una fuerza poderosa que influye en la moda, la economía, la educación y la sociedad en general. Cada episodio, cada personaje y cada banda sonora contribuyen a un ecosistema que sigue creciendo y evolucionando, demostrando que el anime seguirá siendo un motor de creatividad y conexión humana en el futuro.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('5e75f140-f61c-442b-99d1-940c01154b5c'), timestamp=datetime.datetime(2025, 8, 15, 19, 41, 1, 752634), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='In english', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('8c95fe14-e7e8-4ab6-af58-980912a98d4b'), timestamp=datetime.datetime(2025, 8, 15, 19, 41, 3, 761388), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**All HTML Tags (HTML\u202f5) + A Quick Guide to Anime & Its Impact**  \n*(English version)*  \n\n---\n\n## 1. Complete List of HTML\u202f5 Tags\n\nBelow is a grouped, up‑to‑date inventory of every standard element you’ll find in the HTML\u202f5 specification.  \nFeel free to copy‑paste the snippets into your own projects or use them as a reference when building a new page.\n\n| Category | Tag | Typical Use |\n|----------|-----|-------------|\n| **Document Structure** | `<!DOCTYPE html>` | Declares the document type. |\n| | `<html>` | Root element. |\n| | `<head>` | Metadata, links, scripts. |\n| | `<body>` | Visible content. |\n| **Metadata & Head Elements** | `<title>` | Page title. |\n| | `<base>` | Base URL for relative links. |\n| | `<link>` | External resources (CSS, icons). |\n| | `<meta>` | Charset, viewport, description, etc. |\n| | `<style>` | Inline CSS. |\n| | `<script>` | Inline or external JS. |\n| | `<noscript>` | Fallback when JS disabled. |\n| **Text & Semantic Content** | `<h1>`–`<h6>` | Headings. |\n| | `<p>` | Paragraph. |\n| | `<blockquote>` | Quoted text. |\n|ol>`, `<ul>`, `<li>` | Ordered & unordered lists. |\n| | `<dl>`, `<dt>`, `<dd>` | Definition lists. |\n| | `<figure>`, `<figcaption>` | Self‑contained media. |\n| | `<hr>` | Thematic break. |\n| | `<pre>`, `<code>`, `<samp>`, `<kbd>`, `<var>` | Code & sample text. |\n| | `<abbr>`, `<cite>`, `<b>`, `<strong>`, `<i>`, `<em>`, `<mark>`, `<small>`, `<sub>`, `<sup>`, `<span>` | Various inline semantics. |\n| | `<a>` | Hyperlink. |\n| | `<img>` | Image. |\n| | `<area>`, `<map>` | Image maps. |\n| | `<object>`, `<embed>` | Embedded objects. |\n| | `<iframe>` | Inline frame. |\n| | `<video>`, `<audio>`, `<source>`, `<track>` Media elements. |\n| | `<canvas>` | Drawing surface. |\n| | `<svg>` | Scalable vector graphics. |\n| | `<math>` | MathML. |\n| **Forms & Input** | `<form>` | Form container. |\n| | `<input>` | Various input types. |\n| | `<button>` | Clickable button. |\n| | `<select>`, `<option>`, `<optgroup>` | Dropdowns. |\n| | `<textarea>` | Multi‑line text. |\n| | `<label>` | Label for controls. |\n| | `<fieldset>`, `<legend>` | Grouped controls. |\n| | `<datalist>` | Pre‑defined options. |\n| | `<output>` | Result of calculation. |\n| | `<progress>`, `<meter>` | Progress & measurement. |\n| **Semantic & Structural Elements** | `<header>`, `<nav>`, `<main>`, `<section>`, `<article>`, `<aside>`, `<footer>` | Page layout. |\n| | `<details>`, `<summary>` | Disclosure widget. |\n| | `<dialog>` | Modal dialog. |\n| | `<template>` | Client‑side template. |\n| | `<slot>` | Web‑components placeholder. |\n| | `<picture>`, `<source>` | Responsive images. |\n| | `<noscript>` | Fallback for no JS. |\n| **Tables** | `<table>`, `<caption>`, `<thead>`, `<tbody>`, `<tfoot>`, `<tr>`, `<th>`, `<td>`, `<col>`, `<colgroup>` | Tabular data. |\n| **Miscellaneous** | `<link>`, `<meta>`, `<style>`, `<script>`, `<noscript>`, `<iframe>`, `<object>`, `<embed>`, `<param>`, `<bdi>`, `<bdo>`, `<wbr>`, `<ruby>`, `<rt>`, `<rp>` | Various utilities. |\n\n> **Tip:** Start your page with the semantic tags (`<header>`, `<nav>`, `<main>`, `<footer>`) to give it a clear structure, then sprinkle in the content‑specific tags as needed.\n\n---\n\n## 2. Anime & Its Impact – A Quick Overview\n\n### What Is Anime?\n\nAnime is the term used for Japanese animation, but it has become a global cultural phenomenon.  \nTypical characteristics:\n\n- **Visual style:** large expressive eyes, vibrant colors, dynamic action.\n- **Narrative breadth:** from slice‑of‑life dramas to epic sci‑fi sagas.\n- **Formats:** TV series, movies, OVAs, web‑only series, and more.\n\n**Examples:** *Naruto*, *Spirited\u202fAway*, *Attack\u202fon\u202fTitan*, *My\u202fHero\u202fAcademia*.\n\n---\n\n### Cultural Influence\n\n| Area | Effect | Example |\n|------|--------|---------|\n| **Fashion** | Cosplay, streetwear, Kawaii trends. | The rise of “anime‑inspired” sneakers and jackets. |\n| **Language** | Borrowed Japanese words. | “Kawaii,” “sugoi,” “otaku” used worldwide. |\n| **Art & Design** | Inspiration for illustrators, game designers. | Studio\u202fGhibli’s aesthetic influencing indie game art. |\n| **Music** | OSTs topping charts. | “Gurenge” (Demon\u202fSlayer) hit Billboard\u202fHot\u202f100. |\n\n---\n\n### Economic Impact\n\n1. **Entertainment Industry**  \n   - **Physical media sales** (DVD/Blu‑ray) still strong in Japan.  \n   - **Merchandising**: figures, apparel, accessories.  \n   - **Streaming**: Crunchyroll, Netflix, Amazon Prime license anime, generating subscription revenue.\n\n2. **Tourism & Events**  \n   - Fans visit filming locations in Tokyo, Kyoto, etc.  \n   - Conventions (Anime\u202fExpo, Otakon, Comiket) bring in millions of visitors and sales.\n\n3. **Employment**  \n   - Creators (animators, writers, composers).  \n   - Translators, subtitlers, voice actors.  \n   - Marketing teams that use anime characters for brand campaigns.\n\n---\n\n### Social & Educational Impact\n\n- **Creativity & DIY culture** – fans produce fan‑art, fan‑fiction, and even fan‑made animations.  \n- **Language learning** – watching anime with subtitles improves listening and reading skills.  \n- **Complex themes** – series like *Death\u202fNote* or *Psycho‑Pass* spark discussions on ethics, law, and society.  \n- **Representation** – increasing LGBTQ+ characters and diverse cultural portrayals promote empathy and inclusion.\n\n---\n\n### Concrete Success Stories\n\n| Series | Milestones | Cultural Footprint |\n|--------|------------|--------------------|\n| **Demon\u202fSlayer** | >200\u202fM manga copies; *Mugen\u202fTrain* the highest‑grossing Japanese film 2020 | Influenced fashion (Tanjiro’s jacket), spawned a massive merch line. |\n| **Attack\u202fon\u202fTitan** | Global fan‑art, cosplay, academic papers on its narrative | Sparked debates on war, survival, and political allegory. |\n| **My\u202fHero\u202fAcademia** | Video games, collaborations with Nike, tech‑inspired “quirks” | Inspired STEM interest among teens, cross‑industry partnerships. |\n\n---\n\n### Bottom Line\n\nAnime is more than entertainment; it’s a cultural engine that shapes fashion, language, art, and even economics.  \nIts stories resonate across borders, fostering communities that share creativity, curiosity, and a love for storytelling. Whether you’re a casual viewer or a hardcore fan, anime’s ripple effects are felt in everyday life—from the clothes you wear to the conversations you have.', files=None, model_response_time_ms=None)]
2025-08-15 19:58:52.820 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('2f77bf50-ceae-4dbb-b360-6b717f378eab'), 'timestamp': datetime.datetime(2025, 8, 15, 19, 40, 9, 752307), 'session_id': UUID('418cd133-0a53-4c78-826e-9257286284d7'), 'content': 'Give all html tags you can and write about anime', 'files': [], 'model_response_time_ms': None}
2025-08-15 19:58:52.820 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('2f77bf50-ceae-4dbb-b360-6b717f378eab'), 'timestamp': datetime.datetime(2025, 8, 15, 19, 40, 9, 752307), 'session_id': UUID('418cd133-0a53-4c78-826e-9257286284d7'), 'content': 'Give all html tags you can and write about anime', 'files': [], 'model_response_time_ms': None}
2025-08-15 19:58:53.104 | INFO     | src.main:log_requests:54 - GET /sessions/history/418cd133-0a53-4c78-826e-9257286284d7 → 200 (1302.0ms)
2025-08-15 19:58:53.104 | INFO     | src.main:log_requests:54 - GET /sessions/history/418cd133-0a53-4c78-826e-9257286284d7 → 200 (1302.0ms)
2025-08-15 19:58:53.108 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/418cd133-0a53-4c78-826e-9257286284d7
2025-08-15 19:58:53.108 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/418cd133-0a53-4c78-826e-9257286284d7
2025-08-15 19:58:54.322 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('2f77bf50-ceae-4dbb-b360-6b717f378eab'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 9, 752307), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='Give all html tags you can and write about anime', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('d0e84b5d-ac22-4a07-ad2e-9805336f97b8'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 11, 619485), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**Hello!**  \nBelow you’ll find a comprehensive list of HTML tags that are part of the current HTML5 specification, followed by a short, conversational discussion about anime. I’ve organized the tags into logical groups so you can see how they’re typically used, and I’ve sprinkled in a few examples to make things clearer.\n\n---\n\n## 1. All HTML Tags (HTML5)\n\n> *Note: The list below includes every standard tag that is officially part of the HTML5 spec. Some tags are rarely used in everyday web pages, but they’re still part of the language.*\n\n### 1.1 Document Structure\n\n| Tag | Purpose |\n|-----|---------|\n| `<!DOCTYPE>` | Declares the document type (e.g., `<!DOCTYPE html>`). |\n| `<html>` | Root element of an HTML document. |\n| `<head>` | Contains meta‑information, links, scripts, etc. |\n| `<body>` | Holds the visible content of the page. |\n\n### 1.2 Metadata & Head Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<title>` | Sets the page title shown in the browser tab. |\n| `<base>` | Specifies a base URL for relative links. |\n| `<link>` | Links external resources (e.g., CSS, icons). |\n| `<meta>` | Provides metadata such as charset, viewport, description. |\n| `<style>` | Embeds CSS styles directly in the document. |\n| `<script>` | Embeds or references JavaScript. |\n| `<noscript>` | Content shown when JavaScript is disabled. |\n\n### 1.3 Text Content\n\n| Tag | Purpose |\n|-----|---------|\n| `<h1>`–`<h6>` | Headings of decreasing importance. |\n| `<p>` | Paragraph. |\n| `<blockquote>` | Quoted text. |\n| `<ol>` | Ordered list. |\n| `<ul>` | Unordered list. |\n| `<li>` | List item. |\n| `<dl>` | Definition list. |\n| `<dt>` | Definition term. |\n| `<dd>` | Definition description. |\n| `<figure>` | Self‑contained content (image, diagram, etc.). |\n| `<figcaption>` | Caption for a `<figure>`. |\n| `<hr>` | Horizontal rule (thematic break). |\n| `<pre>` | Pre‑formatted text. |\n| `<code>` | Inline code snippet. |\n| `<samp>` | Sample output from a program. |\n| `<kbd>` | User input (keyboard). |\n| `<var>` | Variable name. |\n| `<abbr>` | Abbreviation with optional title. |\n| `<cite>` | Citation. |\n| `<b>` | Bold (semantic emphasis). |\n| `<strong>` | Strong importance (semantically bold). |\n| `<i>` | Italic (semantic emphasis). |\n| `<em>` | Emphasis (semantically italic). |\n| `<mark>` | Highlighted text. |\n| `<small>` | Smaller text. |\n| `<sub>` | Subscript. |\n| `<sup>` | Superscript. |\n| `<span>` | Generic inline container. |\n| `<a>` | Anchor (hyperlink). |\n| `<img>` | Embedded image. |\n| `<area>` | Image map area. |\n| `<map>` | Image map definition. |\n| `<object>` | Embedded object (e.g., plugin). |\n| `<embed>` | Embedded content (e.g., Flash). |\n| `<iframe>` | Inline frame (embedded page). |\n| `<video>` | Video element. |\n| `<audio>` | Audio element. |\n| `<source>` | Media source for `<video>`/`<audio>`. |\n| `<track>` | Text track for media. |\n| `<canvas>` | Drawing surface for graphics. |\n| `<svg>` | Scalable Vector Graphics. |\n| `<math>` | MathML content. |\n\n### 1.4 Forms & Input\n\n| Tag | Purpose |\n|-----|---------|\n| `<form>` | Form container. |\n| `<input>` | Input field (various types). |\n| `<button>` | Clickable button. |\n| `<select>` | Dropdown list. |\n| `<option>` | Option `<select>`. |\n| `<optgroup>` | Group of options. |\n| `<textarea>` | Multi‑line text input. |\n| `<label>` | Label for a form control. |\n| `<fieldset>` | Group of form controls. |\n| `<legend>` | Caption for a `<fieldset>`. |\n| `<datalist>` | List of predefined options. |\n| `<output>` | Result of a calculation. |\n| `<progress>` | Progress indicator. |\n| `<meter>` | Scalar measurement. |\n\n### 1.5 Semantic & Structural Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<header>` | Introductory content (header). |\n| `<nav>` | Navigation links. |\n| `<main>` | Primary content of the document. |\n| `<section>` | Thematic grouping of content. |\n| `<article>` | Self‑contained composition (blog post, news article). |\n| `<aside>` | Tangentially related content (sidebar). |\n| `<footer>` | Footer of a section or page. |\n| `<details>` | Disclosure widget. |\n| `<summary>` | Summary for `<details>`. |\n| `<dialog>` | Modal dialog. |\n| `<template>` | Template for client‑side rendering. |\n| `<slot>` | Placeholder for distributed content (Web Components). |\n| `<picture>` | Responsive image container. |\n| `<source>` | Media source for `<picture>`. |\n| `<noscript>` | Fallback content when JavaScript is disabled. |\n\n### 1.6 Table Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<table>` | Table container. |\n| `<caption>` | Table caption. |\n| `<thead>` | Header rows. |\n| `<tbody>` | Body rows. |\n| `<tfoot>` | Footer rows. |\n| `<tr>` | Table row. |\n| `<th>` | Header cell. |\n| `<td>` | Data cell. |\n| `<col>` | Column definition. |\n| `<colgroup>` | Group of columns. |\n\n### 1.7 Miscellaneous\n\n| Tag | Purpose |\n|-----|---------|\n| `<link>` | External resource (e.g., stylesheet). |\n| `<meta>` | Metadata. |\n| `<style>` | CSS styles. |\n| `<script>` | JavaScript. |\n| `<noscript>` | Fallback when JS disabled. |\n| `<iframe>` | Embedded browsing context. |\n| `<object>` | Embedded object. |\n| `<embed>` | Embedded content. |\n| `<param>` | Parameter for `<object>`. |\n| `<bdi>` | Bi‑directional isolation. |\n| `<bdo>` | Bi‑directional override. |\n| `<wbr>` | Word break opportunity. |\n| `<ruby>` | Ruby annotation. |\n| `<rt>` | Ruby text. |\n| `<rp>` | Ruby parenthesis. |\n| `<bdi>` | Bi‑directional isolation. |\n| `<bdo>` | Bi‑directional override. |\n| `<wbr>` | Word break opportunity. |\n| `<details>` | Disclosure widget. |\n| `<summary>` | Summary for `<details>`. |\n| `<dialog>` | Modal dialog. |\n| `<template>` | Client‑side template. |\n| `<slot>` | Slot for Web Components. |\n\n> **Tip:** When you’re building a page, start with the semantic tags (`<header>`, `<nav>`, `<main>`, `<footer>`) to give structure, then add the content‑specific tags (like `<article>`, `<', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('6f866059-a1ee-4130-9abb-869a26726ad4'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 38, 50874), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='Describa about anime and its impact', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('49ca68bf-d39e-4e8a-bd38-6ffdc3efb49b'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 39, 795989), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**Anime y su impacto: una mirada profunda**\n\n---\n\n### 1. ¿Qué es el anime?\n\nEl anime es la abreviatura de *animation* en japonés, pero hoy se entiende como el estilo de animación originario de Japón. Se caracteriza por:\n\n- **Estilo visual distintivo**: ojos grandes, expresiones exageradas y colores vibrantes.  \n- **Narrativas variadas**: desde historias de ciencia ficción y fantasía hasta dramas cotidianos y comedias románticas.  \n- **Formato flexible**: puede presentarse en series de televisión, películas, OVA (Original Video Animation) y web series.\n\nEjemplos icónicos: *Naruto*, *Spirited Away*, *Attack on Titan*, *My Hero Academia*.\n\n---\n\n### 2. Impacto cultural\n\n| Área | Efecto del anime | Ejemplo |\n|------|------------------|---------|\n| **Moda** | Influencia en la ropa y accesorios (cosplay, streetwear). | La popularidad de *Kawaii* y la adopción de chaquetas de manga en la moda urbana. |\n| **Lenguaje** | Expresiones y modismos japoneses se incorporan al habla cotidiana. | Frases como “kawaii” o “sugoi” se usan en conversaciones informales. |\n| **Arte y diseño** | Inspiración para ilustradores, diseñadores gráficos y artistas digitales. | Estilos de dibujo de *Studio Ghibli* influyen en la estética de videojuegos. |\n| **Música** | OSTs y temas de apertura se convierten en éxitos internacionales. | “Gurenge” de *Demon Slayer* alcanzó el #1 en Billboard Hot 100. |\n\n---\n\n### 3. Impacto económico\n\n1. **Industria del entretenimiento**  \n   - **Ventas de DVDs/Blu‑ray**: millones de unidades vendidas globalmente.  \n   - **Licencias de merchandising**: figuras, ropa, accesorios.  \n   - **Streaming**: plataformas como Crunchyroll, Netflix y Amazon Prime generan ingresos significativos con suscripciones y licencias de anime.\n\n2. **Turismo**  \n   - **Visitas a lugares de filmación**: ciudades como Tokio y Kyoto atraen a fans que buscan experiencias inmersivas.  \n   - **Eventos y convenciones**: Anime Expo, Comiket y Otakon generan miles de visitantes y ventas de productos.\n\n3. **Empleo**  \n   - **Creadores y artistas**: animadores, guionistas, compositores.  \n   - **Industria de la traducción**: subtituladores y dubladores.  \n   - **Marketing y publicidad**: campañas que utilizan personajes de anime para promocionar productos.\n\n---\n\n### 4. Impacto social y educativo\n\n- **Fomento de la creatividad**: los jóvenes se inspiran a crear sus propias historias y animaciones.  \n- **Aprendizaje de idiomas**: ver anime con subtítulos ayuda a mejorar la comprensión del japonés y, en muchos casos, del inglés.  \n- **Exploración de temas complejos**: series como *Death Note* o *Psycho-Pass* abordan dilemas éticos, filosóficos y sociales que generan debates en foros y grupos de estudio.  \n- **Inclusión y diversidad**: personajes LGBTQ+ y representaciones de diferentes culturas están cada vez más presentes, promoviendo la empatía y la aceptación.\n\n---\n\n### 5. Ejemplos de impacto concreto\n\n- **“Demon Slayer” (Kimetsu no Yaiba)**:  \n  - Ventas de manga superaron los 200 millones de copias.  \n  - La película *Mugen Train* se convirtió en la película más taquillera de Japón en 2020.  \n  - Influencia en la moda con la popularidad de la chaqueta de Tanjiro.\n\n- **“Attack on Titan” (Shingeki no Kyojin)**:  \n  - Generó un fenómeno global con fan art, cosplay y debates sobre su trama política.  \n  - La serie ha sido citada en estudios académicos sobre narrativas de conflicto y supervivencia.\n\n- **“My Hero Academia” (Boku no Hero Academia)**:  \n  - Ha inspirado a jóvenes a estudiar ingeniería y ciencias, citando la tecnología de los “quirks” como motivación.  \n  - La franquicia ha lanzado videojuegos, juguetes y colaboraciones con marcas como Nike.\n\n---\n\n### 6. Conclusión\n\nEl anime no es solo entretenimiento; es un fenómeno cultural que trasciende fronteras. Su capacidad para contar historias universales, combinar arte visual con narrativa profunda y generar comunidades globales lo convierte en una fuerza poderosa que influye en la moda, la economía, la educación y la sociedad en general. Cada episodio, cada personaje y cada banda sonora contribuyen a un ecosistema que sigue creciendo y evolucionando, demostrando que el anime seguirá siendo un motor de creatividad y conexión humana en el futuro.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('5e75f140-f61c-442b-99d1-940c01154b5c'), timestamp=datetime.datetime(2025, 8, 15, 19, 41, 1, 752634), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='In english', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('8c95fe14-e7e8-4ab6-af58-980912a98d4b'), timestamp=datetime.datetime(2025, 8, 15, 19, 41, 3, 761388), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**All HTML Tags (HTML\u202f5) + A Quick Guide to Anime & Its Impact**  \n*(English version)*  \n\n---\n\n## 1. Complete List of HTML\u202f5 Tags\n\nBelow is a grouped, up‑to‑date inventory of every standard element you’ll find in the HTML\u202f5 specification.  \nFeel free to copy‑paste the snippets into your own projects or use them as a reference when building a new page.\n\n| Category | Tag | Typical Use |\n|----------|-----|-------------|\n| **Document Structure** | `<!DOCTYPE html>` | Declares the document type. |\n| | `<html>` | Root element. |\n| | `<head>` | Metadata, links, scripts. |\n| | `<body>` | Visible content. |\n| **Metadata & Head Elements** | `<title>` | Page title. |\n| | `<base>` | Base URL for relative links. |\n| | `<link>` | External resources (CSS, icons). |\n| | `<meta>` | Charset, viewport, description, etc. |\n| | `<style>` | Inline CSS. |\n| | `<script>` | Inline or external JS. |\n| | `<noscript>` | Fallback when JS disabled. |\n| **Text & Semantic Content** | `<h1>`–`<h6>` | Headings. |\n| | `<p>` | Paragraph. |\n| | `<blockquote>` | Quoted text. |\n|ol>`, `<ul>`, `<li>` | Ordered & unordered lists. |\n| | `<dl>`, `<dt>`, `<dd>` | Definition lists. |\n| | `<figure>`, `<figcaption>` | Self‑contained media. |\n| | `<hr>` | Thematic break. |\n| | `<pre>`, `<code>`, `<samp>`, `<kbd>`, `<var>` | Code & sample text. |\n| | `<abbr>`, `<cite>`, `<b>`, `<strong>`, `<i>`, `<em>`, `<mark>`, `<small>`, `<sub>`, `<sup>`, `<span>` | Various inline semantics. |\n| | `<a>` | Hyperlink. |\n| | `<img>` | Image. |\n| | `<area>`, `<map>` | Image maps. |\n| | `<object>`, `<embed>` | Embedded objects. |\n| | `<iframe>` | Inline frame. |\n| | `<video>`, `<audio>`, `<source>`, `<track>` Media elements. |\n| | `<canvas>` | Drawing surface. |\n| | `<svg>` | Scalable vector graphics. |\n| | `<math>` | MathML. |\n| **Forms & Input** | `<form>` | Form container. |\n| | `<input>` | Various input types. |\n| | `<button>` | Clickable button. |\n| | `<select>`, `<option>`, `<optgroup>` | Dropdowns. |\n| | `<textarea>` | Multi‑line text. |\n| | `<label>` | Label for controls. |\n| | `<fieldset>`, `<legend>` | Grouped controls. |\n| | `<datalist>` | Pre‑defined options. |\n| | `<output>` | Result of calculation. |\n| | `<progress>`, `<meter>` | Progress & measurement. |\n| **Semantic & Structural Elements** | `<header>`, `<nav>`, `<main>`, `<section>`, `<article>`, `<aside>`, `<footer>` | Page layout. |\n| | `<details>`, `<summary>` | Disclosure widget. |\n| | `<dialog>` | Modal dialog. |\n| | `<template>` | Client‑side template. |\n| | `<slot>` | Web‑components placeholder. |\n| | `<picture>`, `<source>` | Responsive images. |\n| | `<noscript>` | Fallback for no JS. |\n| **Tables** | `<table>`, `<caption>`, `<thead>`, `<tbody>`, `<tfoot>`, `<tr>`, `<th>`, `<td>`, `<col>`, `<colgroup>` | Tabular data. |\n| **Miscellaneous** | `<link>`, `<meta>`, `<style>`, `<script>`, `<noscript>`, `<iframe>`, `<object>`, `<embed>`, `<param>`, `<bdi>`, `<bdo>`, `<wbr>`, `<ruby>`, `<rt>`, `<rp>` | Various utilities. |\n\n> **Tip:** Start your page with the semantic tags (`<header>`, `<nav>`, `<main>`, `<footer>`) to give it a clear structure, then sprinkle in the content‑specific tags as needed.\n\n---\n\n## 2. Anime & Its Impact – A Quick Overview\n\n### What Is Anime?\n\nAnime is the term used for Japanese animation, but it has become a global cultural phenomenon.  \nTypical characteristics:\n\n- **Visual style:** large expressive eyes, vibrant colors, dynamic action.\n- **Narrative breadth:** from slice‑of‑life dramas to epic sci‑fi sagas.\n- **Formats:** TV series, movies, OVAs, web‑only series, and more.\n\n**Examples:** *Naruto*, *Spirited\u202fAway*, *Attack\u202fon\u202fTitan*, *My\u202fHero\u202fAcademia*.\n\n---\n\n### Cultural Influence\n\n| Area | Effect | Example |\n|------|--------|---------|\n| **Fashion** | Cosplay, streetwear, Kawaii trends. | The rise of “anime‑inspired” sneakers and jackets. |\n| **Language** | Borrowed Japanese words. | “Kawaii,” “sugoi,” “otaku” used worldwide. |\n| **Art & Design** | Inspiration for illustrators, game designers. | Studio\u202fGhibli’s aesthetic influencing indie game art. |\n| **Music** | OSTs topping charts. | “Gurenge” (Demon\u202fSlayer) hit Billboard\u202fHot\u202f100. |\n\n---\n\n### Economic Impact\n\n1. **Entertainment Industry**  \n   - **Physical media sales** (DVD/Blu‑ray) still strong in Japan.  \n   - **Merchandising**: figures, apparel, accessories.  \n   - **Streaming**: Crunchyroll, Netflix, Amazon Prime license anime, generating subscription revenue.\n\n2. **Tourism & Events**  \n   - Fans visit filming locations in Tokyo, Kyoto, etc.  \n   - Conventions (Anime\u202fExpo, Otakon, Comiket) bring in millions of visitors and sales.\n\n3. **Employment**  \n   - Creators (animators, writers, composers).  \n   - Translators, subtitlers, voice actors.  \n   - Marketing teams that use anime characters for brand campaigns.\n\n---\n\n### Social & Educational Impact\n\n- **Creativity & DIY culture** – fans produce fan‑art, fan‑fiction, and even fan‑made animations.  \n- **Language learning** – watching anime with subtitles improves listening and reading skills.  \n- **Complex themes** – series like *Death\u202fNote* or *Psycho‑Pass* spark discussions on ethics, law, and society.  \n- **Representation** – increasing LGBTQ+ characters and diverse cultural portrayals promote empathy and inclusion.\n\n---\n\n### Concrete Success Stories\n\n| Series | Milestones | Cultural Footprint |\n|--------|------------|--------------------|\n| **Demon\u202fSlayer** | >200\u202fM manga copies; *Mugen\u202fTrain* the highest‑grossing Japanese film 2020 | Influenced fashion (Tanjiro’s jacket), spawned a massive merch line. |\n| **Attack\u202fon\u202fTitan** | Global fan‑art, cosplay, academic papers on its narrative | Sparked debates on war, survival, and political allegory. |\n| **My\u202fHero\u202fAcademia** | Video games, collaborations with Nike, tech‑inspired “quirks” | Inspired STEM interest among teens, cross‑industry partnerships. |\n\n---\n\n### Bottom Line\n\nAnime is more than entertainment; it’s a cultural engine that shapes fashion, language, art, and even economics.  \nIts stories resonate across borders, fostering communities that share creativity, curiosity, and a love for storytelling. Whether you’re a casual viewer or a hardcore fan, anime’s ripple effects are felt in everyday life—from the clothes you wear to the conversations you have.', files=None, model_response_time_ms=None)]
2025-08-15 19:58:54.322 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('2f77bf50-ceae-4dbb-b360-6b717f378eab'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 9, 752307), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='Give all html tags you can and write about anime', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('d0e84b5d-ac22-4a07-ad2e-9805336f97b8'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 11, 619485), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**Hello!**  \nBelow you’ll find a comprehensive list of HTML tags that are part of the current HTML5 specification, followed by a short, conversational discussion about anime. I’ve organized the tags into logical groups so you can see how they’re typically used, and I’ve sprinkled in a few examples to make things clearer.\n\n---\n\n## 1. All HTML Tags (HTML5)\n\n> *Note: The list below includes every standard tag that is officially part of the HTML5 spec. Some tags are rarely used in everyday web pages, but they’re still part of the language.*\n\n### 1.1 Document Structure\n\n| Tag | Purpose |\n|-----|---------|\n| `<!DOCTYPE>` | Declares the document type (e.g., `<!DOCTYPE html>`). |\n| `<html>` | Root element of an HTML document. |\n| `<head>` | Contains meta‑information, links, scripts, etc. |\n| `<body>` | Holds the visible content of the page. |\n\n### 1.2 Metadata & Head Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<title>` | Sets the page title shown in the browser tab. |\n| `<base>` | Specifies a base URL for relative links. |\n| `<link>` | Links external resources (e.g., CSS, icons). |\n| `<meta>` | Provides metadata such as charset, viewport, description. |\n| `<style>` | Embeds CSS styles directly in the document. |\n| `<script>` | Embeds or references JavaScript. |\n| `<noscript>` | Content shown when JavaScript is disabled. |\n\n### 1.3 Text Content\n\n| Tag | Purpose |\n|-----|---------|\n| `<h1>`–`<h6>` | Headings of decreasing importance. |\n| `<p>` | Paragraph. |\n| `<blockquote>` | Quoted text. |\n| `<ol>` | Ordered list. |\n| `<ul>` | Unordered list. |\n| `<li>` | List item. |\n| `<dl>` | Definition list. |\n| `<dt>` | Definition term. |\n| `<dd>` | Definition description. |\n| `<figure>` | Self‑contained content (image, diagram, etc.). |\n| `<figcaption>` | Caption for a `<figure>`. |\n| `<hr>` | Horizontal rule (thematic break). |\n| `<pre>` | Pre‑formatted text. |\n| `<code>` | Inline code snippet. |\n| `<samp>` | Sample output from a program. |\n| `<kbd>` | User input (keyboard). |\n| `<var>` | Variable name. |\n| `<abbr>` | Abbreviation with optional title. |\n| `<cite>` | Citation. |\n| `<b>` | Bold (semantic emphasis). |\n| `<strong>` | Strong importance (semantically bold). |\n| `<i>` | Italic (semantic emphasis). |\n| `<em>` | Emphasis (semantically italic). |\n| `<mark>` | Highlighted text. |\n| `<small>` | Smaller text. |\n| `<sub>` | Subscript. |\n| `<sup>` | Superscript. |\n| `<span>` | Generic inline container. |\n| `<a>` | Anchor (hyperlink). |\n| `<img>` | Embedded image. |\n| `<area>` | Image map area. |\n| `<map>` | Image map definition. |\n| `<object>` | Embedded object (e.g., plugin). |\n| `<embed>` | Embedded content (e.g., Flash). |\n| `<iframe>` | Inline frame (embedded page). |\n| `<video>` | Video element. |\n| `<audio>` | Audio element. |\n| `<source>` | Media source for `<video>`/`<audio>`. |\n| `<track>` | Text track for media. |\n| `<canvas>` | Drawing surface for graphics. |\n| `<svg>` | Scalable Vector Graphics. |\n| `<math>` | MathML content. |\n\n### 1.4 Forms & Input\n\n| Tag | Purpose |\n|-----|---------|\n| `<form>` | Form container. |\n| `<input>` | Input field (various types). |\n| `<button>` | Clickable button. |\n| `<select>` | Dropdown list. |\n| `<option>` | Option `<select>`. |\n| `<optgroup>` | Group of options. |\n| `<textarea>` | Multi‑line text input. |\n| `<label>` | Label for a form control. |\n| `<fieldset>` | Group of form controls. |\n| `<legend>` | Caption for a `<fieldset>`. |\n| `<datalist>` | List of predefined options. |\n| `<output>` | Result of a calculation. |\n| `<progress>` | Progress indicator. |\n| `<meter>` | Scalar measurement. |\n\n### 1.5 Semantic & Structural Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<header>` | Introductory content (header). |\n| `<nav>` | Navigation links. |\n| `<main>` | Primary content of the document. |\n| `<section>` | Thematic grouping of content. |\n| `<article>` | Self‑contained composition (blog post, news article). |\n| `<aside>` | Tangentially related content (sidebar). |\n| `<footer>` | Footer of a section or page. |\n| `<details>` | Disclosure widget. |\n| `<summary>` | Summary for `<details>`. |\n| `<dialog>` | Modal dialog. |\n| `<template>` | Template for client‑side rendering. |\n| `<slot>` | Placeholder for distributed content (Web Components). |\n| `<picture>` | Responsive image container. |\n| `<source>` | Media source for `<picture>`. |\n| `<noscript>` | Fallback content when JavaScript is disabled. |\n\n### 1.6 Table Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<table>` | Table container. |\n| `<caption>` | Table caption. |\n| `<thead>` | Header rows. |\n| `<tbody>` | Body rows. |\n| `<tfoot>` | Footer rows. |\n| `<tr>` | Table row. |\n| `<th>` | Header cell. |\n| `<td>` | Data cell. |\n| `<col>` | Column definition. |\n| `<colgroup>` | Group of columns. |\n\n### 1.7 Miscellaneous\n\n| Tag | Purpose |\n|-----|---------|\n| `<link>` | External resource (e.g., stylesheet). |\n| `<meta>` | Metadata. |\n| `<style>` | CSS styles. |\n| `<script>` | JavaScript. |\n| `<noscript>` | Fallback when JS disabled. |\n| `<iframe>` | Embedded browsing context. |\n| `<object>` | Embedded object. |\n| `<embed>` | Embedded content. |\n| `<param>` | Parameter for `<object>`. |\n| `<bdi>` | Bi‑directional isolation. |\n| `<bdo>` | Bi‑directional override. |\n| `<wbr>` | Word break opportunity. |\n| `<ruby>` | Ruby annotation. |\n| `<rt>` | Ruby text. |\n| `<rp>` | Ruby parenthesis. |\n| `<bdi>` | Bi‑directional isolation. |\n| `<bdo>` | Bi‑directional override. |\n| `<wbr>` | Word break opportunity. |\n| `<details>` | Disclosure widget. |\n| `<summary>` | Summary for `<details>`. |\n| `<dialog>` | Modal dialog. |\n| `<template>` | Client‑side template. |\n| `<slot>` | Slot for Web Components. |\n\n> **Tip:** When you’re building a page, start with the semantic tags (`<header>`, `<nav>`, `<main>`, `<footer>`) to give structure, then add the content‑specific tags (like `<article>`, `<', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('6f866059-a1ee-4130-9abb-869a26726ad4'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 38, 50874), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='Describa about anime and its impact', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('49ca68bf-d39e-4e8a-bd38-6ffdc3efb49b'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 39, 795989), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**Anime y su impacto: una mirada profunda**\n\n---\n\n### 1. ¿Qué es el anime?\n\nEl anime es la abreviatura de *animation* en japonés, pero hoy se entiende como el estilo de animación originario de Japón. Se caracteriza por:\n\n- **Estilo visual distintivo**: ojos grandes, expresiones exageradas y colores vibrantes.  \n- **Narrativas variadas**: desde historias de ciencia ficción y fantasía hasta dramas cotidianos y comedias románticas.  \n- **Formato flexible**: puede presentarse en series de televisión, películas, OVA (Original Video Animation) y web series.\n\nEjemplos icónicos: *Naruto*, *Spirited Away*, *Attack on Titan*, *My Hero Academia*.\n\n---\n\n### 2. Impacto cultural\n\n| Área | Efecto del anime | Ejemplo |\n|------|------------------|---------|\n| **Moda** | Influencia en la ropa y accesorios (cosplay, streetwear). | La popularidad de *Kawaii* y la adopción de chaquetas de manga en la moda urbana. |\n| **Lenguaje** | Expresiones y modismos japoneses se incorporan al habla cotidiana. | Frases como “kawaii” o “sugoi” se usan en conversaciones informales. |\n| **Arte y diseño** | Inspiración para ilustradores, diseñadores gráficos y artistas digitales. | Estilos de dibujo de *Studio Ghibli* influyen en la estética de videojuegos. |\n| **Música** | OSTs y temas de apertura se convierten en éxitos internacionales. | “Gurenge” de *Demon Slayer* alcanzó el #1 en Billboard Hot 100. |\n\n---\n\n### 3. Impacto económico\n\n1. **Industria del entretenimiento**  \n   - **Ventas de DVDs/Blu‑ray**: millones de unidades vendidas globalmente.  \n   - **Licencias de merchandising**: figuras, ropa, accesorios.  \n   - **Streaming**: plataformas como Crunchyroll, Netflix y Amazon Prime generan ingresos significativos con suscripciones y licencias de anime.\n\n2. **Turismo**  \n   - **Visitas a lugares de filmación**: ciudades como Tokio y Kyoto atraen a fans que buscan experiencias inmersivas.  \n   - **Eventos y convenciones**: Anime Expo, Comiket y Otakon generan miles de visitantes y ventas de productos.\n\n3. **Empleo**  \n   - **Creadores y artistas**: animadores, guionistas, compositores.  \n   - **Industria de la traducción**: subtituladores y dubladores.  \n   - **Marketing y publicidad**: campañas que utilizan personajes de anime para promocionar productos.\n\n---\n\n### 4. Impacto social y educativo\n\n- **Fomento de la creatividad**: los jóvenes se inspiran a crear sus propias historias y animaciones.  \n- **Aprendizaje de idiomas**: ver anime con subtítulos ayuda a mejorar la comprensión del japonés y, en muchos casos, del inglés.  \n- **Exploración de temas complejos**: series como *Death Note* o *Psycho-Pass* abordan dilemas éticos, filosóficos y sociales que generan debates en foros y grupos de estudio.  \n- **Inclusión y diversidad**: personajes LGBTQ+ y representaciones de diferentes culturas están cada vez más presentes, promoviendo la empatía y la aceptación.\n\n---\n\n### 5. Ejemplos de impacto concreto\n\n- **“Demon Slayer” (Kimetsu no Yaiba)**:  \n  - Ventas de manga superaron los 200 millones de copias.  \n  - La película *Mugen Train* se convirtió en la película más taquillera de Japón en 2020.  \n  - Influencia en la moda con la popularidad de la chaqueta de Tanjiro.\n\n- **“Attack on Titan” (Shingeki no Kyojin)**:  \n  - Generó un fenómeno global con fan art, cosplay y debates sobre su trama política.  \n  - La serie ha sido citada en estudios académicos sobre narrativas de conflicto y supervivencia.\n\n- **“My Hero Academia” (Boku no Hero Academia)**:  \n  - Ha inspirado a jóvenes a estudiar ingeniería y ciencias, citando la tecnología de los “quirks” como motivación.  \n  - La franquicia ha lanzado videojuegos, juguetes y colaboraciones con marcas como Nike.\n\n---\n\n### 6. Conclusión\n\nEl anime no es solo entretenimiento; es un fenómeno cultural que trasciende fronteras. Su capacidad para contar historias universales, combinar arte visual con narrativa profunda y generar comunidades globales lo convierte en una fuerza poderosa que influye en la moda, la economía, la educación y la sociedad en general. Cada episodio, cada personaje y cada banda sonora contribuyen a un ecosistema que sigue creciendo y evolucionando, demostrando que el anime seguirá siendo un motor de creatividad y conexión humana en el futuro.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('5e75f140-f61c-442b-99d1-940c01154b5c'), timestamp=datetime.datetime(2025, 8, 15, 19, 41, 1, 752634), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='In english', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('8c95fe14-e7e8-4ab6-af58-980912a98d4b'), timestamp=datetime.datetime(2025, 8, 15, 19, 41, 3, 761388), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**All HTML Tags (HTML\u202f5) + A Quick Guide to Anime & Its Impact**  \n*(English version)*  \n\n---\n\n## 1. Complete List of HTML\u202f5 Tags\n\nBelow is a grouped, up‑to‑date inventory of every standard element you’ll find in the HTML\u202f5 specification.  \nFeel free to copy‑paste the snippets into your own projects or use them as a reference when building a new page.\n\n| Category | Tag | Typical Use |\n|----------|-----|-------------|\n| **Document Structure** | `<!DOCTYPE html>` | Declares the document type. |\n| | `<html>` | Root element. |\n| | `<head>` | Metadata, links, scripts. |\n| | `<body>` | Visible content. |\n| **Metadata & Head Elements** | `<title>` | Page title. |\n| | `<base>` | Base URL for relative links. |\n| | `<link>` | External resources (CSS, icons). |\n| | `<meta>` | Charset, viewport, description, etc. |\n| | `<style>` | Inline CSS. |\n| | `<script>` | Inline or external JS. |\n| | `<noscript>` | Fallback when JS disabled. |\n| **Text & Semantic Content** | `<h1>`–`<h6>` | Headings. |\n| | `<p>` | Paragraph. |\n| | `<blockquote>` | Quoted text. |\n|ol>`, `<ul>`, `<li>` | Ordered & unordered lists. |\n| | `<dl>`, `<dt>`, `<dd>` | Definition lists. |\n| | `<figure>`, `<figcaption>` | Self‑contained media. |\n| | `<hr>` | Thematic break. |\n| | `<pre>`, `<code>`, `<samp>`, `<kbd>`, `<var>` | Code & sample text. |\n| | `<abbr>`, `<cite>`, `<b>`, `<strong>`, `<i>`, `<em>`, `<mark>`, `<small>`, `<sub>`, `<sup>`, `<span>` | Various inline semantics. |\n| | `<a>` | Hyperlink. |\n| | `<img>` | Image. |\n| | `<area>`, `<map>` | Image maps. |\n| | `<object>`, `<embed>` | Embedded objects. |\n| | `<iframe>` | Inline frame. |\n| | `<video>`, `<audio>`, `<source>`, `<track>` Media elements. |\n| | `<canvas>` | Drawing surface. |\n| | `<svg>` | Scalable vector graphics. |\n| | `<math>` | MathML. |\n| **Forms & Input** | `<form>` | Form container. |\n| | `<input>` | Various input types. |\n| | `<button>` | Clickable button. |\n| | `<select>`, `<option>`, `<optgroup>` | Dropdowns. |\n| | `<textarea>` | Multi‑line text. |\n| | `<label>` | Label for controls. |\n| | `<fieldset>`, `<legend>` | Grouped controls. |\n| | `<datalist>` | Pre‑defined options. |\n| | `<output>` | Result of calculation. |\n| | `<progress>`, `<meter>` | Progress & measurement. |\n| **Semantic & Structural Elements** | `<header>`, `<nav>`, `<main>`, `<section>`, `<article>`, `<aside>`, `<footer>` | Page layout. |\n| | `<details>`, `<summary>` | Disclosure widget. |\n| | `<dialog>` | Modal dialog. |\n| | `<template>` | Client‑side template. |\n| | `<slot>` | Web‑components placeholder. |\n| | `<picture>`, `<source>` | Responsive images. |\n| | `<noscript>` | Fallback for no JS. |\n| **Tables** | `<table>`, `<caption>`, `<thead>`, `<tbody>`, `<tfoot>`, `<tr>`, `<th>`, `<td>`, `<col>`, `<colgroup>` | Tabular data. |\n| **Miscellaneous** | `<link>`, `<meta>`, `<style>`, `<script>`, `<noscript>`, `<iframe>`, `<object>`, `<embed>`, `<param>`, `<bdi>`, `<bdo>`, `<wbr>`, `<ruby>`, `<rt>`, `<rp>` | Various utilities. |\n\n> **Tip:** Start your page with the semantic tags (`<header>`, `<nav>`, `<main>`, `<footer>`) to give it a clear structure, then sprinkle in the content‑specific tags as needed.\n\n---\n\n## 2. Anime & Its Impact – A Quick Overview\n\n### What Is Anime?\n\nAnime is the term used for Japanese animation, but it has become a global cultural phenomenon.  \nTypical characteristics:\n\n- **Visual style:** large expressive eyes, vibrant colors, dynamic action.\n- **Narrative breadth:** from slice‑of‑life dramas to epic sci‑fi sagas.\n- **Formats:** TV series, movies, OVAs, web‑only series, and more.\n\n**Examples:** *Naruto*, *Spirited\u202fAway*, *Attack\u202fon\u202fTitan*, *My\u202fHero\u202fAcademia*.\n\n---\n\n### Cultural Influence\n\n| Area | Effect | Example |\n|------|--------|---------|\n| **Fashion** | Cosplay, streetwear, Kawaii trends. | The rise of “anime‑inspired” sneakers and jackets. |\n| **Language** | Borrowed Japanese words. | “Kawaii,” “sugoi,” “otaku” used worldwide. |\n| **Art & Design** | Inspiration for illustrators, game designers. | Studio\u202fGhibli’s aesthetic influencing indie game art. |\n| **Music** | OSTs topping charts. | “Gurenge” (Demon\u202fSlayer) hit Billboard\u202fHot\u202f100. |\n\n---\n\n### Economic Impact\n\n1. **Entertainment Industry**  \n   - **Physical media sales** (DVD/Blu‑ray) still strong in Japan.  \n   - **Merchandising**: figures, apparel, accessories.  \n   - **Streaming**: Crunchyroll, Netflix, Amazon Prime license anime, generating subscription revenue.\n\n2. **Tourism & Events**  \n   - Fans visit filming locations in Tokyo, Kyoto, etc.  \n   - Conventions (Anime\u202fExpo, Otakon, Comiket) bring in millions of visitors and sales.\n\n3. **Employment**  \n   - Creators (animators, writers, composers).  \n   - Translators, subtitlers, voice actors.  \n   - Marketing teams that use anime characters for brand campaigns.\n\n---\n\n### Social & Educational Impact\n\n- **Creativity & DIY culture** – fans produce fan‑art, fan‑fiction, and even fan‑made animations.  \n- **Language learning** – watching anime with subtitles improves listening and reading skills.  \n- **Complex themes** – series like *Death\u202fNote* or *Psycho‑Pass* spark discussions on ethics, law, and society.  \n- **Representation** – increasing LGBTQ+ characters and diverse cultural portrayals promote empathy and inclusion.\n\n---\n\n### Concrete Success Stories\n\n| Series | Milestones | Cultural Footprint |\n|--------|------------|--------------------|\n| **Demon\u202fSlayer** | >200\u202fM manga copies; *Mugen\u202fTrain* the highest‑grossing Japanese film 2020 | Influenced fashion (Tanjiro’s jacket), spawned a massive merch line. |\n| **Attack\u202fon\u202fTitan** | Global fan‑art, cosplay, academic papers on its narrative | Sparked debates on war, survival, and political allegory. |\n| **My\u202fHero\u202fAcademia** | Video games, collaborations with Nike, tech‑inspired “quirks” | Inspired STEM interest among teens, cross‑industry partnerships. |\n\n---\n\n### Bottom Line\n\nAnime is more than entertainment; it’s a cultural engine that shapes fashion, language, art, and even economics.  \nIts stories resonate across borders, fostering communities that share creativity, curiosity, and a love for storytelling. Whether you’re a casual viewer or a hardcore fan, anime’s ripple effects are felt in everyday life—from the clothes you wear to the conversations you have.', files=None, model_response_time_ms=None)]
2025-08-15 19:58:54.338 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('2f77bf50-ceae-4dbb-b360-6b717f378eab'), 'timestamp': datetime.datetime(2025, 8, 15, 19, 40, 9, 752307), 'session_id': UUID('418cd133-0a53-4c78-826e-9257286284d7'), 'content': 'Give all html tags you can and write about anime', 'files': [], 'model_response_time_ms': None}
2025-08-15 19:58:54.338 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('2f77bf50-ceae-4dbb-b360-6b717f378eab'), 'timestamp': datetime.datetime(2025, 8, 15, 19, 40, 9, 752307), 'session_id': UUID('418cd133-0a53-4c78-826e-9257286284d7'), 'content': 'Give all html tags you can and write about anime', 'files': [], 'model_response_time_ms': None}
2025-08-15 19:58:54.699 | INFO     | src.main:log_requests:54 - GET /sessions/history/418cd133-0a53-4c78-826e-9257286284d7 → 200 (1591.14ms)
2025-08-15 19:58:54.699 | INFO     | src.main:log_requests:54 - GET /sessions/history/418cd133-0a53-4c78-826e-9257286284d7 → 200 (1591.14ms)
2025-08-15 19:58:54.703 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/418cd133-0a53-4c78-826e-9257286284d7
2025-08-15 19:58:54.703 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/418cd133-0a53-4c78-826e-9257286284d7
2025-08-15 19:58:55.827 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('2f77bf50-ceae-4dbb-b360-6b717f378eab'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 9, 752307), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='Give all html tags you can and write about anime', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('d0e84b5d-ac22-4a07-ad2e-9805336f97b8'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 11, 619485), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**Hello!**  \nBelow you’ll find a comprehensive list of HTML tags that are part of the current HTML5 specification, followed by a short, conversational discussion about anime. I’ve organized the tags into logical groups so you can see how they’re typically used, and I’ve sprinkled in a few examples to make things clearer.\n\n---\n\n## 1. All HTML Tags (HTML5)\n\n> *Note: The list below includes every standard tag that is officially part of the HTML5 spec. Some tags are rarely used in everyday web pages, but they’re still part of the language.*\n\n### 1.1 Document Structure\n\n| Tag | Purpose |\n|-----|---------|\n| `<!DOCTYPE>` | Declares the document type (e.g., `<!DOCTYPE html>`). |\n| `<html>` | Root element of an HTML document. |\n| `<head>` | Contains meta‑information, links, scripts, etc. |\n| `<body>` | Holds the visible content of the page. |\n\n### 1.2 Metadata & Head Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<title>` | Sets the page title shown in the browser tab. |\n| `<base>` | Specifies a base URL for relative links. |\n| `<link>` | Links external resources (e.g., CSS, icons). |\n| `<meta>` | Provides metadata such as charset, viewport, description. |\n| `<style>` | Embeds CSS styles directly in the document. |\n| `<script>` | Embeds or references JavaScript. |\n| `<noscript>` | Content shown when JavaScript is disabled. |\n\n### 1.3 Text Content\n\n| Tag | Purpose |\n|-----|---------|\n| `<h1>`–`<h6>` | Headings of decreasing importance. |\n| `<p>` | Paragraph. |\n| `<blockquote>` | Quoted text. |\n| `<ol>` | Ordered list. |\n| `<ul>` | Unordered list. |\n| `<li>` | List item. |\n| `<dl>` | Definition list. |\n| `<dt>` | Definition term. |\n| `<dd>` | Definition description. |\n| `<figure>` | Self‑contained content (image, diagram, etc.). |\n| `<figcaption>` | Caption for a `<figure>`. |\n| `<hr>` | Horizontal rule (thematic break). |\n| `<pre>` | Pre‑formatted text. |\n| `<code>` | Inline code snippet. |\n| `<samp>` | Sample output from a program. |\n| `<kbd>` | User input (keyboard). |\n| `<var>` | Variable name. |\n| `<abbr>` | Abbreviation with optional title. |\n| `<cite>` | Citation. |\n| `<b>` | Bold (semantic emphasis). |\n| `<strong>` | Strong importance (semantically bold). |\n| `<i>` | Italic (semantic emphasis). |\n| `<em>` | Emphasis (semantically italic). |\n| `<mark>` | Highlighted text. |\n| `<small>` | Smaller text. |\n| `<sub>` | Subscript. |\n| `<sup>` | Superscript. |\n| `<span>` | Generic inline container. |\n| `<a>` | Anchor (hyperlink). |\n| `<img>` | Embedded image. |\n| `<area>` | Image map area. |\n| `<map>` | Image map definition. |\n| `<object>` | Embedded object (e.g., plugin). |\n| `<embed>` | Embedded content (e.g., Flash). |\n| `<iframe>` | Inline frame (embedded page). |\n| `<video>` | Video element. |\n| `<audio>` | Audio element. |\n| `<source>` | Media source for `<video>`/`<audio>`. |\n| `<track>` | Text track for media. |\n| `<canvas>` | Drawing surface for graphics. |\n| `<svg>` | Scalable Vector Graphics. |\n| `<math>` | MathML content. |\n\n### 1.4 Forms & Input\n\n| Tag | Purpose |\n|-----|---------|\n| `<form>` | Form container. |\n| `<input>` | Input field (various types). |\n| `<button>` | Clickable button. |\n| `<select>` | Dropdown list. |\n| `<option>` | Option `<select>`. |\n| `<optgroup>` | Group of options. |\n| `<textarea>` | Multi‑line text input. |\n| `<label>` | Label for a form control. |\n| `<fieldset>` | Group of form controls. |\n| `<legend>` | Caption for a `<fieldset>`. |\n| `<datalist>` | List of predefined options. |\n| `<output>` | Result of a calculation. |\n| `<progress>` | Progress indicator. |\n| `<meter>` | Scalar measurement. |\n\n### 1.5 Semantic & Structural Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<header>` | Introductory content (header). |\n| `<nav>` | Navigation links. |\n| `<main>` | Primary content of the document. |\n| `<section>` | Thematic grouping of content. |\n| `<article>` | Self‑contained composition (blog post, news article). |\n| `<aside>` | Tangentially related content (sidebar). |\n| `<footer>` | Footer of a section or page. |\n| `<details>` | Disclosure widget. |\n| `<summary>` | Summary for `<details>`. |\n| `<dialog>` | Modal dialog. |\n| `<template>` | Template for client‑side rendering. |\n| `<slot>` | Placeholder for distributed content (Web Components). |\n| `<picture>` | Responsive image container. |\n| `<source>` | Media source for `<picture>`. |\n| `<noscript>` | Fallback content when JavaScript is disabled. |\n\n### 1.6 Table Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<table>` | Table container. |\n| `<caption>` | Table caption. |\n| `<thead>` | Header rows. |\n| `<tbody>` | Body rows. |\n| `<tfoot>` | Footer rows. |\n| `<tr>` | Table row. |\n| `<th>` | Header cell. |\n| `<td>` | Data cell. |\n| `<col>` | Column definition. |\n| `<colgroup>` | Group of columns. |\n\n### 1.7 Miscellaneous\n\n| Tag | Purpose |\n|-----|---------|\n| `<link>` | External resource (e.g., stylesheet). |\n| `<meta>` | Metadata. |\n| `<style>` | CSS styles. |\n| `<script>` | JavaScript. |\n| `<noscript>` | Fallback when JS disabled. |\n| `<iframe>` | Embedded browsing context. |\n| `<object>` | Embedded object. |\n| `<embed>` | Embedded content. |\n| `<param>` | Parameter for `<object>`. |\n| `<bdi>` | Bi‑directional isolation. |\n| `<bdo>` | Bi‑directional override. |\n| `<wbr>` | Word break opportunity. |\n| `<ruby>` | Ruby annotation. |\n| `<rt>` | Ruby text. |\n| `<rp>` | Ruby parenthesis. |\n| `<bdi>` | Bi‑directional isolation. |\n| `<bdo>` | Bi‑directional override. |\n| `<wbr>` | Word break opportunity. |\n| `<details>` | Disclosure widget. |\n| `<summary>` | Summary for `<details>`. |\n| `<dialog>` | Modal dialog. |\n| `<template>` | Client‑side template. |\n| `<slot>` | Slot for Web Components. |\n\n> **Tip:** When you’re building a page, start with the semantic tags (`<header>`, `<nav>`, `<main>`, `<footer>`) to give structure, then add the content‑specific tags (like `<article>`, `<', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('6f866059-a1ee-4130-9abb-869a26726ad4'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 38, 50874), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='Describa about anime and its impact', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('49ca68bf-d39e-4e8a-bd38-6ffdc3efb49b'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 39, 795989), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**Anime y su impacto: una mirada profunda**\n\n---\n\n### 1. ¿Qué es el anime?\n\nEl anime es la abreviatura de *animation* en japonés, pero hoy se entiende como el estilo de animación originario de Japón. Se caracteriza por:\n\n- **Estilo visual distintivo**: ojos grandes, expresiones exageradas y colores vibrantes.  \n- **Narrativas variadas**: desde historias de ciencia ficción y fantasía hasta dramas cotidianos y comedias románticas.  \n- **Formato flexible**: puede presentarse en series de televisión, películas, OVA (Original Video Animation) y web series.\n\nEjemplos icónicos: *Naruto*, *Spirited Away*, *Attack on Titan*, *My Hero Academia*.\n\n---\n\n### 2. Impacto cultural\n\n| Área | Efecto del anime | Ejemplo |\n|------|------------------|---------|\n| **Moda** | Influencia en la ropa y accesorios (cosplay, streetwear). | La popularidad de *Kawaii* y la adopción de chaquetas de manga en la moda urbana. |\n| **Lenguaje** | Expresiones y modismos japoneses se incorporan al habla cotidiana. | Frases como “kawaii” o “sugoi” se usan en conversaciones informales. |\n| **Arte y diseño** | Inspiración para ilustradores, diseñadores gráficos y artistas digitales. | Estilos de dibujo de *Studio Ghibli* influyen en la estética de videojuegos. |\n| **Música** | OSTs y temas de apertura se convierten en éxitos internacionales. | “Gurenge” de *Demon Slayer* alcanzó el #1 en Billboard Hot 100. |\n\n---\n\n### 3. Impacto económico\n\n1. **Industria del entretenimiento**  \n   - **Ventas de DVDs/Blu‑ray**: millones de unidades vendidas globalmente.  \n   - **Licencias de merchandising**: figuras, ropa, accesorios.  \n   - **Streaming**: plataformas como Crunchyroll, Netflix y Amazon Prime generan ingresos significativos con suscripciones y licencias de anime.\n\n2. **Turismo**  \n   - **Visitas a lugares de filmación**: ciudades como Tokio y Kyoto atraen a fans que buscan experiencias inmersivas.  \n   - **Eventos y convenciones**: Anime Expo, Comiket y Otakon generan miles de visitantes y ventas de productos.\n\n3. **Empleo**  \n   - **Creadores y artistas**: animadores, guionistas, compositores.  \n   - **Industria de la traducción**: subtituladores y dubladores.  \n   - **Marketing y publicidad**: campañas que utilizan personajes de anime para promocionar productos.\n\n---\n\n### 4. Impacto social y educativo\n\n- **Fomento de la creatividad**: los jóvenes se inspiran a crear sus propias historias y animaciones.  \n- **Aprendizaje de idiomas**: ver anime con subtítulos ayuda a mejorar la comprensión del japonés y, en muchos casos, del inglés.  \n- **Exploración de temas complejos**: series como *Death Note* o *Psycho-Pass* abordan dilemas éticos, filosóficos y sociales que generan debates en foros y grupos de estudio.  \n- **Inclusión y diversidad**: personajes LGBTQ+ y representaciones de diferentes culturas están cada vez más presentes, promoviendo la empatía y la aceptación.\n\n---\n\n### 5. Ejemplos de impacto concreto\n\n- **“Demon Slayer” (Kimetsu no Yaiba)**:  \n  - Ventas de manga superaron los 200 millones de copias.  \n  - La película *Mugen Train* se convirtió en la película más taquillera de Japón en 2020.  \n  - Influencia en la moda con la popularidad de la chaqueta de Tanjiro.\n\n- **“Attack on Titan” (Shingeki no Kyojin)**:  \n  - Generó un fenómeno global con fan art, cosplay y debates sobre su trama política.  \n  - La serie ha sido citada en estudios académicos sobre narrativas de conflicto y supervivencia.\n\n- **“My Hero Academia” (Boku no Hero Academia)**:  \n  - Ha inspirado a jóvenes a estudiar ingeniería y ciencias, citando la tecnología de los “quirks” como motivación.  \n  - La franquicia ha lanzado videojuegos, juguetes y colaboraciones con marcas como Nike.\n\n---\n\n### 6. Conclusión\n\nEl anime no es solo entretenimiento; es un fenómeno cultural que trasciende fronteras. Su capacidad para contar historias universales, combinar arte visual con narrativa profunda y generar comunidades globales lo convierte en una fuerza poderosa que influye en la moda, la economía, la educación y la sociedad en general. Cada episodio, cada personaje y cada banda sonora contribuyen a un ecosistema que sigue creciendo y evolucionando, demostrando que el anime seguirá siendo un motor de creatividad y conexión humana en el futuro.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('5e75f140-f61c-442b-99d1-940c01154b5c'), timestamp=datetime.datetime(2025, 8, 15, 19, 41, 1, 752634), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='In english', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('8c95fe14-e7e8-4ab6-af58-980912a98d4b'), timestamp=datetime.datetime(2025, 8, 15, 19, 41, 3, 761388), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**All HTML Tags (HTML\u202f5) + A Quick Guide to Anime & Its Impact**  \n*(English version)*  \n\n---\n\n## 1. Complete List of HTML\u202f5 Tags\n\nBelow is a grouped, up‑to‑date inventory of every standard element you’ll find in the HTML\u202f5 specification.  \nFeel free to copy‑paste the snippets into your own projects or use them as a reference when building a new page.\n\n| Category | Tag | Typical Use |\n|----------|-----|-------------|\n| **Document Structure** | `<!DOCTYPE html>` | Declares the document type. |\n| | `<html>` | Root element. |\n| | `<head>` | Metadata, links, scripts. |\n| | `<body>` | Visible content. |\n| **Metadata & Head Elements** | `<title>` | Page title. |\n| | `<base>` | Base URL for relative links. |\n| | `<link>` | External resources (CSS, icons). |\n| | `<meta>` | Charset, viewport, description, etc. |\n| | `<style>` | Inline CSS. |\n| | `<script>` | Inline or external JS. |\n| | `<noscript>` | Fallback when JS disabled. |\n| **Text & Semantic Content** | `<h1>`–`<h6>` | Headings. |\n| | `<p>` | Paragraph. |\n| | `<blockquote>` | Quoted text. |\n|ol>`, `<ul>`, `<li>` | Ordered & unordered lists. |\n| | `<dl>`, `<dt>`, `<dd>` | Definition lists. |\n| | `<figure>`, `<figcaption>` | Self‑contained media. |\n| | `<hr>` | Thematic break. |\n| | `<pre>`, `<code>`, `<samp>`, `<kbd>`, `<var>` | Code & sample text. |\n| | `<abbr>`, `<cite>`, `<b>`, `<strong>`, `<i>`, `<em>`, `<mark>`, `<small>`, `<sub>`, `<sup>`, `<span>` | Various inline semantics. |\n| | `<a>` | Hyperlink. |\n| | `<img>` | Image. |\n| | `<area>`, `<map>` | Image maps. |\n| | `<object>`, `<embed>` | Embedded objects. |\n| | `<iframe>` | Inline frame. |\n| | `<video>`, `<audio>`, `<source>`, `<track>` Media elements. |\n| | `<canvas>` | Drawing surface. |\n| | `<svg>` | Scalable vector graphics. |\n| | `<math>` | MathML. |\n| **Forms & Input** | `<form>` | Form container. |\n| | `<input>` | Various input types. |\n| | `<button>` | Clickable button. |\n| | `<select>`, `<option>`, `<optgroup>` | Dropdowns. |\n| | `<textarea>` | Multi‑line text. |\n| | `<label>` | Label for controls. |\n| | `<fieldset>`, `<legend>` | Grouped controls. |\n| | `<datalist>` | Pre‑defined options. |\n| | `<output>` | Result of calculation. |\n| | `<progress>`, `<meter>` | Progress & measurement. |\n| **Semantic & Structural Elements** | `<header>`, `<nav>`, `<main>`, `<section>`, `<article>`, `<aside>`, `<footer>` | Page layout. |\n| | `<details>`, `<summary>` | Disclosure widget. |\n| | `<dialog>` | Modal dialog. |\n| | `<template>` | Client‑side template. |\n| | `<slot>` | Web‑components placeholder. |\n| | `<picture>`, `<source>` | Responsive images. |\n| | `<noscript>` | Fallback for no JS. |\n| **Tables** | `<table>`, `<caption>`, `<thead>`, `<tbody>`, `<tfoot>`, `<tr>`, `<th>`, `<td>`, `<col>`, `<colgroup>` | Tabular data. |\n| **Miscellaneous** | `<link>`, `<meta>`, `<style>`, `<script>`, `<noscript>`, `<iframe>`, `<object>`, `<embed>`, `<param>`, `<bdi>`, `<bdo>`, `<wbr>`, `<ruby>`, `<rt>`, `<rp>` | Various utilities. |\n\n> **Tip:** Start your page with the semantic tags (`<header>`, `<nav>`, `<main>`, `<footer>`) to give it a clear structure, then sprinkle in the content‑specific tags as needed.\n\n---\n\n## 2. Anime & Its Impact – A Quick Overview\n\n### What Is Anime?\n\nAnime is the term used for Japanese animation, but it has become a global cultural phenomenon.  \nTypical characteristics:\n\n- **Visual style:** large expressive eyes, vibrant colors, dynamic action.\n- **Narrative breadth:** from slice‑of‑life dramas to epic sci‑fi sagas.\n- **Formats:** TV series, movies, OVAs, web‑only series, and more.\n\n**Examples:** *Naruto*, *Spirited\u202fAway*, *Attack\u202fon\u202fTitan*, *My\u202fHero\u202fAcademia*.\n\n---\n\n### Cultural Influence\n\n| Area | Effect | Example |\n|------|--------|---------|\n| **Fashion** | Cosplay, streetwear, Kawaii trends. | The rise of “anime‑inspired” sneakers and jackets. |\n| **Language** | Borrowed Japanese words. | “Kawaii,” “sugoi,” “otaku” used worldwide. |\n| **Art & Design** | Inspiration for illustrators, game designers. | Studio\u202fGhibli’s aesthetic influencing indie game art. |\n| **Music** | OSTs topping charts. | “Gurenge” (Demon\u202fSlayer) hit Billboard\u202fHot\u202f100. |\n\n---\n\n### Economic Impact\n\n1. **Entertainment Industry**  \n   - **Physical media sales** (DVD/Blu‑ray) still strong in Japan.  \n   - **Merchandising**: figures, apparel, accessories.  \n   - **Streaming**: Crunchyroll, Netflix, Amazon Prime license anime, generating subscription revenue.\n\n2. **Tourism & Events**  \n   - Fans visit filming locations in Tokyo, Kyoto, etc.  \n   - Conventions (Anime\u202fExpo, Otakon, Comiket) bring in millions of visitors and sales.\n\n3. **Employment**  \n   - Creators (animators, writers, composers).  \n   - Translators, subtitlers, voice actors.  \n   - Marketing teams that use anime characters for brand campaigns.\n\n---\n\n### Social & Educational Impact\n\n- **Creativity & DIY culture** – fans produce fan‑art, fan‑fiction, and even fan‑made animations.  \n- **Language learning** – watching anime with subtitles improves listening and reading skills.  \n- **Complex themes** – series like *Death\u202fNote* or *Psycho‑Pass* spark discussions on ethics, law, and society.  \n- **Representation** – increasing LGBTQ+ characters and diverse cultural portrayals promote empathy and inclusion.\n\n---\n\n### Concrete Success Stories\n\n| Series | Milestones | Cultural Footprint |\n|--------|------------|--------------------|\n| **Demon\u202fSlayer** | >200\u202fM manga copies; *Mugen\u202fTrain* the highest‑grossing Japanese film 2020 | Influenced fashion (Tanjiro’s jacket), spawned a massive merch line. |\n| **Attack\u202fon\u202fTitan** | Global fan‑art, cosplay, academic papers on its narrative | Sparked debates on war, survival, and political allegory. |\n| **My\u202fHero\u202fAcademia** | Video games, collaborations with Nike, tech‑inspired “quirks” | Inspired STEM interest among teens, cross‑industry partnerships. |\n\n---\n\n### Bottom Line\n\nAnime is more than entertainment; it’s a cultural engine that shapes fashion, language, art, and even economics.  \nIts stories resonate across borders, fostering communities that share creativity, curiosity, and a love for storytelling. Whether you’re a casual viewer or a hardcore fan, anime’s ripple effects are felt in everyday life—from the clothes you wear to the conversations you have.', files=None, model_response_time_ms=None)]
2025-08-15 19:58:55.827 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('2f77bf50-ceae-4dbb-b360-6b717f378eab'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 9, 752307), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='Give all html tags you can and write about anime', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('d0e84b5d-ac22-4a07-ad2e-9805336f97b8'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 11, 619485), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**Hello!**  \nBelow you’ll find a comprehensive list of HTML tags that are part of the current HTML5 specification, followed by a short, conversational discussion about anime. I’ve organized the tags into logical groups so you can see how they’re typically used, and I’ve sprinkled in a few examples to make things clearer.\n\n---\n\n## 1. All HTML Tags (HTML5)\n\n> *Note: The list below includes every standard tag that is officially part of the HTML5 spec. Some tags are rarely used in everyday web pages, but they’re still part of the language.*\n\n### 1.1 Document Structure\n\n| Tag | Purpose |\n|-----|---------|\n| `<!DOCTYPE>` | Declares the document type (e.g., `<!DOCTYPE html>`). |\n| `<html>` | Root element of an HTML document. |\n| `<head>` | Contains meta‑information, links, scripts, etc. |\n| `<body>` | Holds the visible content of the page. |\n\n### 1.2 Metadata & Head Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<title>` | Sets the page title shown in the browser tab. |\n| `<base>` | Specifies a base URL for relative links. |\n| `<link>` | Links external resources (e.g., CSS, icons). |\n| `<meta>` | Provides metadata such as charset, viewport, description. |\n| `<style>` | Embeds CSS styles directly in the document. |\n| `<script>` | Embeds or references JavaScript. |\n| `<noscript>` | Content shown when JavaScript is disabled. |\n\n### 1.3 Text Content\n\n| Tag | Purpose |\n|-----|---------|\n| `<h1>`–`<h6>` | Headings of decreasing importance. |\n| `<p>` | Paragraph. |\n| `<blockquote>` | Quoted text. |\n| `<ol>` | Ordered list. |\n| `<ul>` | Unordered list. |\n| `<li>` | List item. |\n| `<dl>` | Definition list. |\n| `<dt>` | Definition term. |\n| `<dd>` | Definition description. |\n| `<figure>` | Self‑contained content (image, diagram, etc.). |\n| `<figcaption>` | Caption for a `<figure>`. |\n| `<hr>` | Horizontal rule (thematic break). |\n| `<pre>` | Pre‑formatted text. |\n| `<code>` | Inline code snippet. |\n| `<samp>` | Sample output from a program. |\n| `<kbd>` | User input (keyboard). |\n| `<var>` | Variable name. |\n| `<abbr>` | Abbreviation with optional title. |\n| `<cite>` | Citation. |\n| `<b>` | Bold (semantic emphasis). |\n| `<strong>` | Strong importance (semantically bold). |\n| `<i>` | Italic (semantic emphasis). |\n| `<em>` | Emphasis (semantically italic). |\n| `<mark>` | Highlighted text. |\n| `<small>` | Smaller text. |\n| `<sub>` | Subscript. |\n| `<sup>` | Superscript. |\n| `<span>` | Generic inline container. |\n| `<a>` | Anchor (hyperlink). |\n| `<img>` | Embedded image. |\n| `<area>` | Image map area. |\n| `<map>` | Image map definition. |\n| `<object>` | Embedded object (e.g., plugin). |\n| `<embed>` | Embedded content (e.g., Flash). |\n| `<iframe>` | Inline frame (embedded page). |\n| `<video>` | Video element. |\n| `<audio>` | Audio element. |\n| `<source>` | Media source for `<video>`/`<audio>`. |\n| `<track>` | Text track for media. |\n| `<canvas>` | Drawing surface for graphics. |\n| `<svg>` | Scalable Vector Graphics. |\n| `<math>` | MathML content. |\n\n### 1.4 Forms & Input\n\n| Tag | Purpose |\n|-----|---------|\n| `<form>` | Form container. |\n| `<input>` | Input field (various types). |\n| `<button>` | Clickable button. |\n| `<select>` | Dropdown list. |\n| `<option>` | Option `<select>`. |\n| `<optgroup>` | Group of options. |\n| `<textarea>` | Multi‑line text input. |\n| `<label>` | Label for a form control. |\n| `<fieldset>` | Group of form controls. |\n| `<legend>` | Caption for a `<fieldset>`. |\n| `<datalist>` | List of predefined options. |\n| `<output>` | Result of a calculation. |\n| `<progress>` | Progress indicator. |\n| `<meter>` | Scalar measurement. |\n\n### 1.5 Semantic & Structural Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<header>` | Introductory content (header). |\n| `<nav>` | Navigation links. |\n| `<main>` | Primary content of the document. |\n| `<section>` | Thematic grouping of content. |\n| `<article>` | Self‑contained composition (blog post, news article). |\n| `<aside>` | Tangentially related content (sidebar). |\n| `<footer>` | Footer of a section or page. |\n| `<details>` | Disclosure widget. |\n| `<summary>` | Summary for `<details>`. |\n| `<dialog>` | Modal dialog. |\n| `<template>` | Template for client‑side rendering. |\n| `<slot>` | Placeholder for distributed content (Web Components). |\n| `<picture>` | Responsive image container. |\n| `<source>` | Media source for `<picture>`. |\n| `<noscript>` | Fallback content when JavaScript is disabled. |\n\n### 1.6 Table Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<table>` | Table container. |\n| `<caption>` | Table caption. |\n| `<thead>` | Header rows. |\n| `<tbody>` | Body rows. |\n| `<tfoot>` | Footer rows. |\n| `<tr>` | Table row. |\n| `<th>` | Header cell. |\n| `<td>` | Data cell. |\n| `<col>` | Column definition. |\n| `<colgroup>` | Group of columns. |\n\n### 1.7 Miscellaneous\n\n| Tag | Purpose |\n|-----|---------|\n| `<link>` | External resource (e.g., stylesheet). |\n| `<meta>` | Metadata. |\n| `<style>` | CSS styles. |\n| `<script>` | JavaScript. |\n| `<noscript>` | Fallback when JS disabled. |\n| `<iframe>` | Embedded browsing context. |\n| `<object>` | Embedded object. |\n| `<embed>` | Embedded content. |\n| `<param>` | Parameter for `<object>`. |\n| `<bdi>` | Bi‑directional isolation. |\n| `<bdo>` | Bi‑directional override. |\n| `<wbr>` | Word break opportunity. |\n| `<ruby>` | Ruby annotation. |\n| `<rt>` | Ruby text. |\n| `<rp>` | Ruby parenthesis. |\n| `<bdi>` | Bi‑directional isolation. |\n| `<bdo>` | Bi‑directional override. |\n| `<wbr>` | Word break opportunity. |\n| `<details>` | Disclosure widget. |\n| `<summary>` | Summary for `<details>`. |\n| `<dialog>` | Modal dialog. |\n| `<template>` | Client‑side template. |\n| `<slot>` | Slot for Web Components. |\n\n> **Tip:** When you’re building a page, start with the semantic tags (`<header>`, `<nav>`, `<main>`, `<footer>`) to give structure, then add the content‑specific tags (like `<article>`, `<', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('6f866059-a1ee-4130-9abb-869a26726ad4'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 38, 50874), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='Describa about anime and its impact', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('49ca68bf-d39e-4e8a-bd38-6ffdc3efb49b'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 39, 795989), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**Anime y su impacto: una mirada profunda**\n\n---\n\n### 1. ¿Qué es el anime?\n\nEl anime es la abreviatura de *animation* en japonés, pero hoy se entiende como el estilo de animación originario de Japón. Se caracteriza por:\n\n- **Estilo visual distintivo**: ojos grandes, expresiones exageradas y colores vibrantes.  \n- **Narrativas variadas**: desde historias de ciencia ficción y fantasía hasta dramas cotidianos y comedias románticas.  \n- **Formato flexible**: puede presentarse en series de televisión, películas, OVA (Original Video Animation) y web series.\n\nEjemplos icónicos: *Naruto*, *Spirited Away*, *Attack on Titan*, *My Hero Academia*.\n\n---\n\n### 2. Impacto cultural\n\n| Área | Efecto del anime | Ejemplo |\n|------|------------------|---------|\n| **Moda** | Influencia en la ropa y accesorios (cosplay, streetwear). | La popularidad de *Kawaii* y la adopción de chaquetas de manga en la moda urbana. |\n| **Lenguaje** | Expresiones y modismos japoneses se incorporan al habla cotidiana. | Frases como “kawaii” o “sugoi” se usan en conversaciones informales. |\n| **Arte y diseño** | Inspiración para ilustradores, diseñadores gráficos y artistas digitales. | Estilos de dibujo de *Studio Ghibli* influyen en la estética de videojuegos. |\n| **Música** | OSTs y temas de apertura se convierten en éxitos internacionales. | “Gurenge” de *Demon Slayer* alcanzó el #1 en Billboard Hot 100. |\n\n---\n\n### 3. Impacto económico\n\n1. **Industria del entretenimiento**  \n   - **Ventas de DVDs/Blu‑ray**: millones de unidades vendidas globalmente.  \n   - **Licencias de merchandising**: figuras, ropa, accesorios.  \n   - **Streaming**: plataformas como Crunchyroll, Netflix y Amazon Prime generan ingresos significativos con suscripciones y licencias de anime.\n\n2. **Turismo**  \n   - **Visitas a lugares de filmación**: ciudades como Tokio y Kyoto atraen a fans que buscan experiencias inmersivas.  \n   - **Eventos y convenciones**: Anime Expo, Comiket y Otakon generan miles de visitantes y ventas de productos.\n\n3. **Empleo**  \n   - **Creadores y artistas**: animadores, guionistas, compositores.  \n   - **Industria de la traducción**: subtituladores y dubladores.  \n   - **Marketing y publicidad**: campañas que utilizan personajes de anime para promocionar productos.\n\n---\n\n### 4. Impacto social y educativo\n\n- **Fomento de la creatividad**: los jóvenes se inspiran a crear sus propias historias y animaciones.  \n- **Aprendizaje de idiomas**: ver anime con subtítulos ayuda a mejorar la comprensión del japonés y, en muchos casos, del inglés.  \n- **Exploración de temas complejos**: series como *Death Note* o *Psycho-Pass* abordan dilemas éticos, filosóficos y sociales que generan debates en foros y grupos de estudio.  \n- **Inclusión y diversidad**: personajes LGBTQ+ y representaciones de diferentes culturas están cada vez más presentes, promoviendo la empatía y la aceptación.\n\n---\n\n### 5. Ejemplos de impacto concreto\n\n- **“Demon Slayer” (Kimetsu no Yaiba)**:  \n  - Ventas de manga superaron los 200 millones de copias.  \n  - La película *Mugen Train* se convirtió en la película más taquillera de Japón en 2020.  \n  - Influencia en la moda con la popularidad de la chaqueta de Tanjiro.\n\n- **“Attack on Titan” (Shingeki no Kyojin)**:  \n  - Generó un fenómeno global con fan art, cosplay y debates sobre su trama política.  \n  - La serie ha sido citada en estudios académicos sobre narrativas de conflicto y supervivencia.\n\n- **“My Hero Academia” (Boku no Hero Academia)**:  \n  - Ha inspirado a jóvenes a estudiar ingeniería y ciencias, citando la tecnología de los “quirks” como motivación.  \n  - La franquicia ha lanzado videojuegos, juguetes y colaboraciones con marcas como Nike.\n\n---\n\n### 6. Conclusión\n\nEl anime no es solo entretenimiento; es un fenómeno cultural que trasciende fronteras. Su capacidad para contar historias universales, combinar arte visual con narrativa profunda y generar comunidades globales lo convierte en una fuerza poderosa que influye en la moda, la economía, la educación y la sociedad en general. Cada episodio, cada personaje y cada banda sonora contribuyen a un ecosistema que sigue creciendo y evolucionando, demostrando que el anime seguirá siendo un motor de creatividad y conexión humana en el futuro.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('5e75f140-f61c-442b-99d1-940c01154b5c'), timestamp=datetime.datetime(2025, 8, 15, 19, 41, 1, 752634), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='In english', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('8c95fe14-e7e8-4ab6-af58-980912a98d4b'), timestamp=datetime.datetime(2025, 8, 15, 19, 41, 3, 761388), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**All HTML Tags (HTML\u202f5) + A Quick Guide to Anime & Its Impact**  \n*(English version)*  \n\n---\n\n## 1. Complete List of HTML\u202f5 Tags\n\nBelow is a grouped, up‑to‑date inventory of every standard element you’ll find in the HTML\u202f5 specification.  \nFeel free to copy‑paste the snippets into your own projects or use them as a reference when building a new page.\n\n| Category | Tag | Typical Use |\n|----------|-----|-------------|\n| **Document Structure** | `<!DOCTYPE html>` | Declares the document type. |\n| | `<html>` | Root element. |\n| | `<head>` | Metadata, links, scripts. |\n| | `<body>` | Visible content. |\n| **Metadata & Head Elements** | `<title>` | Page title. |\n| | `<base>` | Base URL for relative links. |\n| | `<link>` | External resources (CSS, icons). |\n| | `<meta>` | Charset, viewport, description, etc. |\n| | `<style>` | Inline CSS. |\n| | `<script>` | Inline or external JS. |\n| | `<noscript>` | Fallback when JS disabled. |\n| **Text & Semantic Content** | `<h1>`–`<h6>` | Headings. |\n| | `<p>` | Paragraph. |\n| | `<blockquote>` | Quoted text. |\n|ol>`, `<ul>`, `<li>` | Ordered & unordered lists. |\n| | `<dl>`, `<dt>`, `<dd>` | Definition lists. |\n| | `<figure>`, `<figcaption>` | Self‑contained media. |\n| | `<hr>` | Thematic break. |\n| | `<pre>`, `<code>`, `<samp>`, `<kbd>`, `<var>` | Code & sample text. |\n| | `<abbr>`, `<cite>`, `<b>`, `<strong>`, `<i>`, `<em>`, `<mark>`, `<small>`, `<sub>`, `<sup>`, `<span>` | Various inline semantics. |\n| | `<a>` | Hyperlink. |\n| | `<img>` | Image. |\n| | `<area>`, `<map>` | Image maps. |\n| | `<object>`, `<embed>` | Embedded objects. |\n| | `<iframe>` | Inline frame. |\n| | `<video>`, `<audio>`, `<source>`, `<track>` Media elements. |\n| | `<canvas>` | Drawing surface. |\n| | `<svg>` | Scalable vector graphics. |\n| | `<math>` | MathML. |\n| **Forms & Input** | `<form>` | Form container. |\n| | `<input>` | Various input types. |\n| | `<button>` | Clickable button. |\n| | `<select>`, `<option>`, `<optgroup>` | Dropdowns. |\n| | `<textarea>` | Multi‑line text. |\n| | `<label>` | Label for controls. |\n| | `<fieldset>`, `<legend>` | Grouped controls. |\n| | `<datalist>` | Pre‑defined options. |\n| | `<output>` | Result of calculation. |\n| | `<progress>`, `<meter>` | Progress & measurement. |\n| **Semantic & Structural Elements** | `<header>`, `<nav>`, `<main>`, `<section>`, `<article>`, `<aside>`, `<footer>` | Page layout. |\n| | `<details>`, `<summary>` | Disclosure widget. |\n| | `<dialog>` | Modal dialog. |\n| | `<template>` | Client‑side template. |\n| | `<slot>` | Web‑components placeholder. |\n| | `<picture>`, `<source>` | Responsive images. |\n| | `<noscript>` | Fallback for no JS. |\n| **Tables** | `<table>`, `<caption>`, `<thead>`, `<tbody>`, `<tfoot>`, `<tr>`, `<th>`, `<td>`, `<col>`, `<colgroup>` | Tabular data. |\n| **Miscellaneous** | `<link>`, `<meta>`, `<style>`, `<script>`, `<noscript>`, `<iframe>`, `<object>`, `<embed>`, `<param>`, `<bdi>`, `<bdo>`, `<wbr>`, `<ruby>`, `<rt>`, `<rp>` | Various utilities. |\n\n> **Tip:** Start your page with the semantic tags (`<header>`, `<nav>`, `<main>`, `<footer>`) to give it a clear structure, then sprinkle in the content‑specific tags as needed.\n\n---\n\n## 2. Anime & Its Impact – A Quick Overview\n\n### What Is Anime?\n\nAnime is the term used for Japanese animation, but it has become a global cultural phenomenon.  \nTypical characteristics:\n\n- **Visual style:** large expressive eyes, vibrant colors, dynamic action.\n- **Narrative breadth:** from slice‑of‑life dramas to epic sci‑fi sagas.\n- **Formats:** TV series, movies, OVAs, web‑only series, and more.\n\n**Examples:** *Naruto*, *Spirited\u202fAway*, *Attack\u202fon\u202fTitan*, *My\u202fHero\u202fAcademia*.\n\n---\n\n### Cultural Influence\n\n| Area | Effect | Example |\n|------|--------|---------|\n| **Fashion** | Cosplay, streetwear, Kawaii trends. | The rise of “anime‑inspired” sneakers and jackets. |\n| **Language** | Borrowed Japanese words. | “Kawaii,” “sugoi,” “otaku” used worldwide. |\n| **Art & Design** | Inspiration for illustrators, game designers. | Studio\u202fGhibli’s aesthetic influencing indie game art. |\n| **Music** | OSTs topping charts. | “Gurenge” (Demon\u202fSlayer) hit Billboard\u202fHot\u202f100. |\n\n---\n\n### Economic Impact\n\n1. **Entertainment Industry**  \n   - **Physical media sales** (DVD/Blu‑ray) still strong in Japan.  \n   - **Merchandising**: figures, apparel, accessories.  \n   - **Streaming**: Crunchyroll, Netflix, Amazon Prime license anime, generating subscription revenue.\n\n2. **Tourism & Events**  \n   - Fans visit filming locations in Tokyo, Kyoto, etc.  \n   - Conventions (Anime\u202fExpo, Otakon, Comiket) bring in millions of visitors and sales.\n\n3. **Employment**  \n   - Creators (animators, writers, composers).  \n   - Translators, subtitlers, voice actors.  \n   - Marketing teams that use anime characters for brand campaigns.\n\n---\n\n### Social & Educational Impact\n\n- **Creativity & DIY culture** – fans produce fan‑art, fan‑fiction, and even fan‑made animations.  \n- **Language learning** – watching anime with subtitles improves listening and reading skills.  \n- **Complex themes** – series like *Death\u202fNote* or *Psycho‑Pass* spark discussions on ethics, law, and society.  \n- **Representation** – increasing LGBTQ+ characters and diverse cultural portrayals promote empathy and inclusion.\n\n---\n\n### Concrete Success Stories\n\n| Series | Milestones | Cultural Footprint |\n|--------|------------|--------------------|\n| **Demon\u202fSlayer** | >200\u202fM manga copies; *Mugen\u202fTrain* the highest‑grossing Japanese film 2020 | Influenced fashion (Tanjiro’s jacket), spawned a massive merch line. |\n| **Attack\u202fon\u202fTitan** | Global fan‑art, cosplay, academic papers on its narrative | Sparked debates on war, survival, and political allegory. |\n| **My\u202fHero\u202fAcademia** | Video games, collaborations with Nike, tech‑inspired “quirks” | Inspired STEM interest among teens, cross‑industry partnerships. |\n\n---\n\n### Bottom Line\n\nAnime is more than entertainment; it’s a cultural engine that shapes fashion, language, art, and even economics.  \nIts stories resonate across borders, fostering communities that share creativity, curiosity, and a love for storytelling. Whether you’re a casual viewer or a hardcore fan, anime’s ripple effects are felt in everyday life—from the clothes you wear to the conversations you have.', files=None, model_response_time_ms=None)]
2025-08-15 19:58:55.850 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('2f77bf50-ceae-4dbb-b360-6b717f378eab'), 'timestamp': datetime.datetime(2025, 8, 15, 19, 40, 9, 752307), 'session_id': UUID('418cd133-0a53-4c78-826e-9257286284d7'), 'content': 'Give all html tags you can and write about anime', 'files': [], 'model_response_time_ms': None}
2025-08-15 19:58:55.850 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('2f77bf50-ceae-4dbb-b360-6b717f378eab'), 'timestamp': datetime.datetime(2025, 8, 15, 19, 40, 9, 752307), 'session_id': UUID('418cd133-0a53-4c78-826e-9257286284d7'), 'content': 'Give all html tags you can and write about anime', 'files': [], 'model_response_time_ms': None}
2025-08-15 19:58:56.128 | INFO     | src.main:log_requests:54 - GET /sessions/history/418cd133-0a53-4c78-826e-9257286284d7 → 200 (1425.02ms)
2025-08-15 19:58:56.128 | INFO     | src.main:log_requests:54 - GET /sessions/history/418cd133-0a53-4c78-826e-9257286284d7 → 200 (1425.02ms)
2025-08-15 19:58:56.132 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/418cd133-0a53-4c78-826e-9257286284d7
2025-08-15 19:58:56.132 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/418cd133-0a53-4c78-826e-9257286284d7
2025-08-15 19:58:57.422 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('2f77bf50-ceae-4dbb-b360-6b717f378eab'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 9, 752307), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='Give all html tags you can and write about anime', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('d0e84b5d-ac22-4a07-ad2e-9805336f97b8'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 11, 619485), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**Hello!**  \nBelow you’ll find a comprehensive list of HTML tags that are part of the current HTML5 specification, followed by a short, conversational discussion about anime. I’ve organized the tags into logical groups so you can see how they’re typically used, and I’ve sprinkled in a few examples to make things clearer.\n\n---\n\n## 1. All HTML Tags (HTML5)\n\n> *Note: The list below includes every standard tag that is officially part of the HTML5 spec. Some tags are rarely used in everyday web pages, but they’re still part of the language.*\n\n### 1.1 Document Structure\n\n| Tag | Purpose |\n|-----|---------|\n| `<!DOCTYPE>` | Declares the document type (e.g., `<!DOCTYPE html>`). |\n| `<html>` | Root element of an HTML document. |\n| `<head>` | Contains meta‑information, links, scripts, etc. |\n| `<body>` | Holds the visible content of the page. |\n\n### 1.2 Metadata & Head Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<title>` | Sets the page title shown in the browser tab. |\n| `<base>` | Specifies a base URL for relative links. |\n| `<link>` | Links external resources (e.g., CSS, icons). |\n| `<meta>` | Provides metadata such as charset, viewport, description. |\n| `<style>` | Embeds CSS styles directly in the document. |\n| `<script>` | Embeds or references JavaScript. |\n| `<noscript>` | Content shown when JavaScript is disabled. |\n\n### 1.3 Text Content\n\n| Tag | Purpose |\n|-----|---------|\n| `<h1>`–`<h6>` | Headings of decreasing importance. |\n| `<p>` | Paragraph. |\n| `<blockquote>` | Quoted text. |\n| `<ol>` | Ordered list. |\n| `<ul>` | Unordered list. |\n| `<li>` | List item. |\n| `<dl>` | Definition list. |\n| `<dt>` | Definition term. |\n| `<dd>` | Definition description. |\n| `<figure>` | Self‑contained content (image, diagram, etc.). |\n| `<figcaption>` | Caption for a `<figure>`. |\n| `<hr>` | Horizontal rule (thematic break). |\n| `<pre>` | Pre‑formatted text. |\n| `<code>` | Inline code snippet. |\n| `<samp>` | Sample output from a program. |\n| `<kbd>` | User input (keyboard). |\n| `<var>` | Variable name. |\n| `<abbr>` | Abbreviation with optional title. |\n| `<cite>` | Citation. |\n| `<b>` | Bold (semantic emphasis). |\n| `<strong>` | Strong importance (semantically bold). |\n| `<i>` | Italic (semantic emphasis). |\n| `<em>` | Emphasis (semantically italic). |\n| `<mark>` | Highlighted text. |\n| `<small>` | Smaller text. |\n| `<sub>` | Subscript. |\n| `<sup>` | Superscript. |\n| `<span>` | Generic inline container. |\n| `<a>` | Anchor (hyperlink). |\n| `<img>` | Embedded image. |\n| `<area>` | Image map area. |\n| `<map>` | Image map definition. |\n| `<object>` | Embedded object (e.g., plugin). |\n| `<embed>` | Embedded content (e.g., Flash). |\n| `<iframe>` | Inline frame (embedded page). |\n| `<video>` | Video element. |\n| `<audio>` | Audio element. |\n| `<source>` | Media source for `<video>`/`<audio>`. |\n| `<track>` | Text track for media. |\n| `<canvas>` | Drawing surface for graphics. |\n| `<svg>` | Scalable Vector Graphics. |\n| `<math>` | MathML content. |\n\n### 1.4 Forms & Input\n\n| Tag | Purpose |\n|-----|---------|\n| `<form>` | Form container. |\n| `<input>` | Input field (various types). |\n| `<button>` | Clickable button. |\n| `<select>` | Dropdown list. |\n| `<option>` | Option `<select>`. |\n| `<optgroup>` | Group of options. |\n| `<textarea>` | Multi‑line text input. |\n| `<label>` | Label for a form control. |\n| `<fieldset>` | Group of form controls. |\n| `<legend>` | Caption for a `<fieldset>`. |\n| `<datalist>` | List of predefined options. |\n| `<output>` | Result of a calculation. |\n| `<progress>` | Progress indicator. |\n| `<meter>` | Scalar measurement. |\n\n### 1.5 Semantic & Structural Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<header>` | Introductory content (header). |\n| `<nav>` | Navigation links. |\n| `<main>` | Primary content of the document. |\n| `<section>` | Thematic grouping of content. |\n| `<article>` | Self‑contained composition (blog post, news article). |\n| `<aside>` | Tangentially related content (sidebar). |\n| `<footer>` | Footer of a section or page. |\n| `<details>` | Disclosure widget. |\n| `<summary>` | Summary for `<details>`. |\n| `<dialog>` | Modal dialog. |\n| `<template>` | Template for client‑side rendering. |\n| `<slot>` | Placeholder for distributed content (Web Components). |\n| `<picture>` | Responsive image container. |\n| `<source>` | Media source for `<picture>`. |\n| `<noscript>` | Fallback content when JavaScript is disabled. |\n\n### 1.6 Table Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<table>` | Table container. |\n| `<caption>` | Table caption. |\n| `<thead>` | Header rows. |\n| `<tbody>` | Body rows. |\n| `<tfoot>` | Footer rows. |\n| `<tr>` | Table row. |\n| `<th>` | Header cell. |\n| `<td>` | Data cell. |\n| `<col>` | Column definition. |\n| `<colgroup>` | Group of columns. |\n\n### 1.7 Miscellaneous\n\n| Tag | Purpose |\n|-----|---------|\n| `<link>` | External resource (e.g., stylesheet). |\n| `<meta>` | Metadata. |\n| `<style>` | CSS styles. |\n| `<script>` | JavaScript. |\n| `<noscript>` | Fallback when JS disabled. |\n| `<iframe>` | Embedded browsing context. |\n| `<object>` | Embedded object. |\n| `<embed>` | Embedded content. |\n| `<param>` | Parameter for `<object>`. |\n| `<bdi>` | Bi‑directional isolation. |\n| `<bdo>` | Bi‑directional override. |\n| `<wbr>` | Word break opportunity. |\n| `<ruby>` | Ruby annotation. |\n| `<rt>` | Ruby text. |\n| `<rp>` | Ruby parenthesis. |\n| `<bdi>` | Bi‑directional isolation. |\n| `<bdo>` | Bi‑directional override. |\n| `<wbr>` | Word break opportunity. |\n| `<details>` | Disclosure widget. |\n| `<summary>` | Summary for `<details>`. |\n| `<dialog>` | Modal dialog. |\n| `<template>` | Client‑side template. |\n| `<slot>` | Slot for Web Components. |\n\n> **Tip:** When you’re building a page, start with the semantic tags (`<header>`, `<nav>`, `<main>`, `<footer>`) to give structure, then add the content‑specific tags (like `<article>`, `<', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('6f866059-a1ee-4130-9abb-869a26726ad4'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 38, 50874), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='Describa about anime and its impact', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('49ca68bf-d39e-4e8a-bd38-6ffdc3efb49b'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 39, 795989), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**Anime y su impacto: una mirada profunda**\n\n---\n\n### 1. ¿Qué es el anime?\n\nEl anime es la abreviatura de *animation* en japonés, pero hoy se entiende como el estilo de animación originario de Japón. Se caracteriza por:\n\n- **Estilo visual distintivo**: ojos grandes, expresiones exageradas y colores vibrantes.  \n- **Narrativas variadas**: desde historias de ciencia ficción y fantasía hasta dramas cotidianos y comedias románticas.  \n- **Formato flexible**: puede presentarse en series de televisión, películas, OVA (Original Video Animation) y web series.\n\nEjemplos icónicos: *Naruto*, *Spirited Away*, *Attack on Titan*, *My Hero Academia*.\n\n---\n\n### 2. Impacto cultural\n\n| Área | Efecto del anime | Ejemplo |\n|------|------------------|---------|\n| **Moda** | Influencia en la ropa y accesorios (cosplay, streetwear). | La popularidad de *Kawaii* y la adopción de chaquetas de manga en la moda urbana. |\n| **Lenguaje** | Expresiones y modismos japoneses se incorporan al habla cotidiana. | Frases como “kawaii” o “sugoi” se usan en conversaciones informales. |\n| **Arte y diseño** | Inspiración para ilustradores, diseñadores gráficos y artistas digitales. | Estilos de dibujo de *Studio Ghibli* influyen en la estética de videojuegos. |\n| **Música** | OSTs y temas de apertura se convierten en éxitos internacionales. | “Gurenge” de *Demon Slayer* alcanzó el #1 en Billboard Hot 100. |\n\n---\n\n### 3. Impacto económico\n\n1. **Industria del entretenimiento**  \n   - **Ventas de DVDs/Blu‑ray**: millones de unidades vendidas globalmente.  \n   - **Licencias de merchandising**: figuras, ropa, accesorios.  \n   - **Streaming**: plataformas como Crunchyroll, Netflix y Amazon Prime generan ingresos significativos con suscripciones y licencias de anime.\n\n2. **Turismo**  \n   - **Visitas a lugares de filmación**: ciudades como Tokio y Kyoto atraen a fans que buscan experiencias inmersivas.  \n   - **Eventos y convenciones**: Anime Expo, Comiket y Otakon generan miles de visitantes y ventas de productos.\n\n3. **Empleo**  \n   - **Creadores y artistas**: animadores, guionistas, compositores.  \n   - **Industria de la traducción**: subtituladores y dubladores.  \n   - **Marketing y publicidad**: campañas que utilizan personajes de anime para promocionar productos.\n\n---\n\n### 4. Impacto social y educativo\n\n- **Fomento de la creatividad**: los jóvenes se inspiran a crear sus propias historias y animaciones.  \n- **Aprendizaje de idiomas**: ver anime con subtítulos ayuda a mejorar la comprensión del japonés y, en muchos casos, del inglés.  \n- **Exploración de temas complejos**: series como *Death Note* o *Psycho-Pass* abordan dilemas éticos, filosóficos y sociales que generan debates en foros y grupos de estudio.  \n- **Inclusión y diversidad**: personajes LGBTQ+ y representaciones de diferentes culturas están cada vez más presentes, promoviendo la empatía y la aceptación.\n\n---\n\n### 5. Ejemplos de impacto concreto\n\n- **“Demon Slayer” (Kimetsu no Yaiba)**:  \n  - Ventas de manga superaron los 200 millones de copias.  \n  - La película *Mugen Train* se convirtió en la película más taquillera de Japón en 2020.  \n  - Influencia en la moda con la popularidad de la chaqueta de Tanjiro.\n\n- **“Attack on Titan” (Shingeki no Kyojin)**:  \n  - Generó un fenómeno global con fan art, cosplay y debates sobre su trama política.  \n  - La serie ha sido citada en estudios académicos sobre narrativas de conflicto y supervivencia.\n\n- **“My Hero Academia” (Boku no Hero Academia)**:  \n  - Ha inspirado a jóvenes a estudiar ingeniería y ciencias, citando la tecnología de los “quirks” como motivación.  \n  - La franquicia ha lanzado videojuegos, juguetes y colaboraciones con marcas como Nike.\n\n---\n\n### 6. Conclusión\n\nEl anime no es solo entretenimiento; es un fenómeno cultural que trasciende fronteras. Su capacidad para contar historias universales, combinar arte visual con narrativa profunda y generar comunidades globales lo convierte en una fuerza poderosa que influye en la moda, la economía, la educación y la sociedad en general. Cada episodio, cada personaje y cada banda sonora contribuyen a un ecosistema que sigue creciendo y evolucionando, demostrando que el anime seguirá siendo un motor de creatividad y conexión humana en el futuro.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('5e75f140-f61c-442b-99d1-940c01154b5c'), timestamp=datetime.datetime(2025, 8, 15, 19, 41, 1, 752634), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='In english', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('8c95fe14-e7e8-4ab6-af58-980912a98d4b'), timestamp=datetime.datetime(2025, 8, 15, 19, 41, 3, 761388), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**All HTML Tags (HTML\u202f5) + A Quick Guide to Anime & Its Impact**  \n*(English version)*  \n\n---\n\n## 1. Complete List of HTML\u202f5 Tags\n\nBelow is a grouped, up‑to‑date inventory of every standard element you’ll find in the HTML\u202f5 specification.  \nFeel free to copy‑paste the snippets into your own projects or use them as a reference when building a new page.\n\n| Category | Tag | Typical Use |\n|----------|-----|-------------|\n| **Document Structure** | `<!DOCTYPE html>` | Declares the document type. |\n| | `<html>` | Root element. |\n| | `<head>` | Metadata, links, scripts. |\n| | `<body>` | Visible content. |\n| **Metadata & Head Elements** | `<title>` | Page title. |\n| | `<base>` | Base URL for relative links. |\n| | `<link>` | External resources (CSS, icons). |\n| | `<meta>` | Charset, viewport, description, etc. |\n| | `<style>` | Inline CSS. |\n| | `<script>` | Inline or external JS. |\n| | `<noscript>` | Fallback when JS disabled. |\n| **Text & Semantic Content** | `<h1>`–`<h6>` | Headings. |\n| | `<p>` | Paragraph. |\n| | `<blockquote>` | Quoted text. |\n|ol>`, `<ul>`, `<li>` | Ordered & unordered lists. |\n| | `<dl>`, `<dt>`, `<dd>` | Definition lists. |\n| | `<figure>`, `<figcaption>` | Self‑contained media. |\n| | `<hr>` | Thematic break. |\n| | `<pre>`, `<code>`, `<samp>`, `<kbd>`, `<var>` | Code & sample text. |\n| | `<abbr>`, `<cite>`, `<b>`, `<strong>`, `<i>`, `<em>`, `<mark>`, `<small>`, `<sub>`, `<sup>`, `<span>` | Various inline semantics. |\n| | `<a>` | Hyperlink. |\n| | `<img>` | Image. |\n| | `<area>`, `<map>` | Image maps. |\n| | `<object>`, `<embed>` | Embedded objects. |\n| | `<iframe>` | Inline frame. |\n| | `<video>`, `<audio>`, `<source>`, `<track>` Media elements. |\n| | `<canvas>` | Drawing surface. |\n| | `<svg>` | Scalable vector graphics. |\n| | `<math>` | MathML. |\n| **Forms & Input** | `<form>` | Form container. |\n| | `<input>` | Various input types. |\n| | `<button>` | Clickable button. |\n| | `<select>`, `<option>`, `<optgroup>` | Dropdowns. |\n| | `<textarea>` | Multi‑line text. |\n| | `<label>` | Label for controls. |\n| | `<fieldset>`, `<legend>` | Grouped controls. |\n| | `<datalist>` | Pre‑defined options. |\n| | `<output>` | Result of calculation. |\n| | `<progress>`, `<meter>` | Progress & measurement. |\n| **Semantic & Structural Elements** | `<header>`, `<nav>`, `<main>`, `<section>`, `<article>`, `<aside>`, `<footer>` | Page layout. |\n| | `<details>`, `<summary>` | Disclosure widget. |\n| | `<dialog>` | Modal dialog. |\n| | `<template>` | Client‑side template. |\n| | `<slot>` | Web‑components placeholder. |\n| | `<picture>`, `<source>` | Responsive images. |\n| | `<noscript>` | Fallback for no JS. |\n| **Tables** | `<table>`, `<caption>`, `<thead>`, `<tbody>`, `<tfoot>`, `<tr>`, `<th>`, `<td>`, `<col>`, `<colgroup>` | Tabular data. |\n| **Miscellaneous** | `<link>`, `<meta>`, `<style>`, `<script>`, `<noscript>`, `<iframe>`, `<object>`, `<embed>`, `<param>`, `<bdi>`, `<bdo>`, `<wbr>`, `<ruby>`, `<rt>`, `<rp>` | Various utilities. |\n\n> **Tip:** Start your page with the semantic tags (`<header>`, `<nav>`, `<main>`, `<footer>`) to give it a clear structure, then sprinkle in the content‑specific tags as needed.\n\n---\n\n## 2. Anime & Its Impact – A Quick Overview\n\n### What Is Anime?\n\nAnime is the term used for Japanese animation, but it has become a global cultural phenomenon.  \nTypical characteristics:\n\n- **Visual style:** large expressive eyes, vibrant colors, dynamic action.\n- **Narrative breadth:** from slice‑of‑life dramas to epic sci‑fi sagas.\n- **Formats:** TV series, movies, OVAs, web‑only series, and more.\n\n**Examples:** *Naruto*, *Spirited\u202fAway*, *Attack\u202fon\u202fTitan*, *My\u202fHero\u202fAcademia*.\n\n---\n\n### Cultural Influence\n\n| Area | Effect | Example |\n|------|--------|---------|\n| **Fashion** | Cosplay, streetwear, Kawaii trends. | The rise of “anime‑inspired” sneakers and jackets. |\n| **Language** | Borrowed Japanese words. | “Kawaii,” “sugoi,” “otaku” used worldwide. |\n| **Art & Design** | Inspiration for illustrators, game designers. | Studio\u202fGhibli’s aesthetic influencing indie game art. |\n| **Music** | OSTs topping charts. | “Gurenge” (Demon\u202fSlayer) hit Billboard\u202fHot\u202f100. |\n\n---\n\n### Economic Impact\n\n1. **Entertainment Industry**  \n   - **Physical media sales** (DVD/Blu‑ray) still strong in Japan.  \n   - **Merchandising**: figures, apparel, accessories.  \n   - **Streaming**: Crunchyroll, Netflix, Amazon Prime license anime, generating subscription revenue.\n\n2. **Tourism & Events**  \n   - Fans visit filming locations in Tokyo, Kyoto, etc.  \n   - Conventions (Anime\u202fExpo, Otakon, Comiket) bring in millions of visitors and sales.\n\n3. **Employment**  \n   - Creators (animators, writers, composers).  \n   - Translators, subtitlers, voice actors.  \n   - Marketing teams that use anime characters for brand campaigns.\n\n---\n\n### Social & Educational Impact\n\n- **Creativity & DIY culture** – fans produce fan‑art, fan‑fiction, and even fan‑made animations.  \n- **Language learning** – watching anime with subtitles improves listening and reading skills.  \n- **Complex themes** – series like *Death\u202fNote* or *Psycho‑Pass* spark discussions on ethics, law, and society.  \n- **Representation** – increasing LGBTQ+ characters and diverse cultural portrayals promote empathy and inclusion.\n\n---\n\n### Concrete Success Stories\n\n| Series | Milestones | Cultural Footprint |\n|--------|------------|--------------------|\n| **Demon\u202fSlayer** | >200\u202fM manga copies; *Mugen\u202fTrain* the highest‑grossing Japanese film 2020 | Influenced fashion (Tanjiro’s jacket), spawned a massive merch line. |\n| **Attack\u202fon\u202fTitan** | Global fan‑art, cosplay, academic papers on its narrative | Sparked debates on war, survival, and political allegory. |\n| **My\u202fHero\u202fAcademia** | Video games, collaborations with Nike, tech‑inspired “quirks” | Inspired STEM interest among teens, cross‑industry partnerships. |\n\n---\n\n### Bottom Line\n\nAnime is more than entertainment; it’s a cultural engine that shapes fashion, language, art, and even economics.  \nIts stories resonate across borders, fostering communities that share creativity, curiosity, and a love for storytelling. Whether you’re a casual viewer or a hardcore fan, anime’s ripple effects are felt in everyday life—from the clothes you wear to the conversations you have.', files=None, model_response_time_ms=None)]
2025-08-15 19:58:57.422 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('2f77bf50-ceae-4dbb-b360-6b717f378eab'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 9, 752307), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='Give all html tags you can and write about anime', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('d0e84b5d-ac22-4a07-ad2e-9805336f97b8'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 11, 619485), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**Hello!**  \nBelow you’ll find a comprehensive list of HTML tags that are part of the current HTML5 specification, followed by a short, conversational discussion about anime. I’ve organized the tags into logical groups so you can see how they’re typically used, and I’ve sprinkled in a few examples to make things clearer.\n\n---\n\n## 1. All HTML Tags (HTML5)\n\n> *Note: The list below includes every standard tag that is officially part of the HTML5 spec. Some tags are rarely used in everyday web pages, but they’re still part of the language.*\n\n### 1.1 Document Structure\n\n| Tag | Purpose |\n|-----|---------|\n| `<!DOCTYPE>` | Declares the document type (e.g., `<!DOCTYPE html>`). |\n| `<html>` | Root element of an HTML document. |\n| `<head>` | Contains meta‑information, links, scripts, etc. |\n| `<body>` | Holds the visible content of the page. |\n\n### 1.2 Metadata & Head Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<title>` | Sets the page title shown in the browser tab. |\n| `<base>` | Specifies a base URL for relative links. |\n| `<link>` | Links external resources (e.g., CSS, icons). |\n| `<meta>` | Provides metadata such as charset, viewport, description. |\n| `<style>` | Embeds CSS styles directly in the document. |\n| `<script>` | Embeds or references JavaScript. |\n| `<noscript>` | Content shown when JavaScript is disabled. |\n\n### 1.3 Text Content\n\n| Tag | Purpose |\n|-----|---------|\n| `<h1>`–`<h6>` | Headings of decreasing importance. |\n| `<p>` | Paragraph. |\n| `<blockquote>` | Quoted text. |\n| `<ol>` | Ordered list. |\n| `<ul>` | Unordered list. |\n| `<li>` | List item. |\n| `<dl>` | Definition list. |\n| `<dt>` | Definition term. |\n| `<dd>` | Definition description. |\n| `<figure>` | Self‑contained content (image, diagram, etc.). |\n| `<figcaption>` | Caption for a `<figure>`. |\n| `<hr>` | Horizontal rule (thematic break). |\n| `<pre>` | Pre‑formatted text. |\n| `<code>` | Inline code snippet. |\n| `<samp>` | Sample output from a program. |\n| `<kbd>` | User input (keyboard). |\n| `<var>` | Variable name. |\n| `<abbr>` | Abbreviation with optional title. |\n| `<cite>` | Citation. |\n| `<b>` | Bold (semantic emphasis). |\n| `<strong>` | Strong importance (semantically bold). |\n| `<i>` | Italic (semantic emphasis). |\n| `<em>` | Emphasis (semantically italic). |\n| `<mark>` | Highlighted text. |\n| `<small>` | Smaller text. |\n| `<sub>` | Subscript. |\n| `<sup>` | Superscript. |\n| `<span>` | Generic inline container. |\n| `<a>` | Anchor (hyperlink). |\n| `<img>` | Embedded image. |\n| `<area>` | Image map area. |\n| `<map>` | Image map definition. |\n| `<object>` | Embedded object (e.g., plugin). |\n| `<embed>` | Embedded content (e.g., Flash). |\n| `<iframe>` | Inline frame (embedded page). |\n| `<video>` | Video element. |\n| `<audio>` | Audio element. |\n| `<source>` | Media source for `<video>`/`<audio>`. |\n| `<track>` | Text track for media. |\n| `<canvas>` | Drawing surface for graphics. |\n| `<svg>` | Scalable Vector Graphics. |\n| `<math>` | MathML content. |\n\n### 1.4 Forms & Input\n\n| Tag | Purpose |\n|-----|---------|\n| `<form>` | Form container. |\n| `<input>` | Input field (various types). |\n| `<button>` | Clickable button. |\n| `<select>` | Dropdown list. |\n| `<option>` | Option `<select>`. |\n| `<optgroup>` | Group of options. |\n| `<textarea>` | Multi‑line text input. |\n| `<label>` | Label for a form control. |\n| `<fieldset>` | Group of form controls. |\n| `<legend>` | Caption for a `<fieldset>`. |\n| `<datalist>` | List of predefined options. |\n| `<output>` | Result of a calculation. |\n| `<progress>` | Progress indicator. |\n| `<meter>` | Scalar measurement. |\n\n### 1.5 Semantic & Structural Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<header>` | Introductory content (header). |\n| `<nav>` | Navigation links. |\n| `<main>` | Primary content of the document. |\n| `<section>` | Thematic grouping of content. |\n| `<article>` | Self‑contained composition (blog post, news article). |\n| `<aside>` | Tangentially related content (sidebar). |\n| `<footer>` | Footer of a section or page. |\n| `<details>` | Disclosure widget. |\n| `<summary>` | Summary for `<details>`. |\n| `<dialog>` | Modal dialog. |\n| `<template>` | Template for client‑side rendering. |\n| `<slot>` | Placeholder for distributed content (Web Components). |\n| `<picture>` | Responsive image container. |\n| `<source>` | Media source for `<picture>`. |\n| `<noscript>` | Fallback content when JavaScript is disabled. |\n\n### 1.6 Table Elements\n\n| Tag | Purpose |\n|-----|---------|\n| `<table>` | Table container. |\n| `<caption>` | Table caption. |\n| `<thead>` | Header rows. |\n| `<tbody>` | Body rows. |\n| `<tfoot>` | Footer rows. |\n| `<tr>` | Table row. |\n| `<th>` | Header cell. |\n| `<td>` | Data cell. |\n| `<col>` | Column definition. |\n| `<colgroup>` | Group of columns. |\n\n### 1.7 Miscellaneous\n\n| Tag | Purpose |\n|-----|---------|\n| `<link>` | External resource (e.g., stylesheet). |\n| `<meta>` | Metadata. |\n| `<style>` | CSS styles. |\n| `<script>` | JavaScript. |\n| `<noscript>` | Fallback when JS disabled. |\n| `<iframe>` | Embedded browsing context. |\n| `<object>` | Embedded object. |\n| `<embed>` | Embedded content. |\n| `<param>` | Parameter for `<object>`. |\n| `<bdi>` | Bi‑directional isolation. |\n| `<bdo>` | Bi‑directional override. |\n| `<wbr>` | Word break opportunity. |\n| `<ruby>` | Ruby annotation. |\n| `<rt>` | Ruby text. |\n| `<rp>` | Ruby parenthesis. |\n| `<bdi>` | Bi‑directional isolation. |\n| `<bdo>` | Bi‑directional override. |\n| `<wbr>` | Word break opportunity. |\n| `<details>` | Disclosure widget. |\n| `<summary>` | Summary for `<details>`. |\n| `<dialog>` | Modal dialog. |\n| `<template>` | Client‑side template. |\n| `<slot>` | Slot for Web Components. |\n\n> **Tip:** When you’re building a page, start with the semantic tags (`<header>`, `<nav>`, `<main>`, `<footer>`) to give structure, then add the content‑specific tags (like `<article>`, `<', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('6f866059-a1ee-4130-9abb-869a26726ad4'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 38, 50874), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='Describa about anime and its impact', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('49ca68bf-d39e-4e8a-bd38-6ffdc3efb49b'), timestamp=datetime.datetime(2025, 8, 15, 19, 40, 39, 795989), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**Anime y su impacto: una mirada profunda**\n\n---\n\n### 1. ¿Qué es el anime?\n\nEl anime es la abreviatura de *animation* en japonés, pero hoy se entiende como el estilo de animación originario de Japón. Se caracteriza por:\n\n- **Estilo visual distintivo**: ojos grandes, expresiones exageradas y colores vibrantes.  \n- **Narrativas variadas**: desde historias de ciencia ficción y fantasía hasta dramas cotidianos y comedias románticas.  \n- **Formato flexible**: puede presentarse en series de televisión, películas, OVA (Original Video Animation) y web series.\n\nEjemplos icónicos: *Naruto*, *Spirited Away*, *Attack on Titan*, *My Hero Academia*.\n\n---\n\n### 2. Impacto cultural\n\n| Área | Efecto del anime | Ejemplo |\n|------|------------------|---------|\n| **Moda** | Influencia en la ropa y accesorios (cosplay, streetwear). | La popularidad de *Kawaii* y la adopción de chaquetas de manga en la moda urbana. |\n| **Lenguaje** | Expresiones y modismos japoneses se incorporan al habla cotidiana. | Frases como “kawaii” o “sugoi” se usan en conversaciones informales. |\n| **Arte y diseño** | Inspiración para ilustradores, diseñadores gráficos y artistas digitales. | Estilos de dibujo de *Studio Ghibli* influyen en la estética de videojuegos. |\n| **Música** | OSTs y temas de apertura se convierten en éxitos internacionales. | “Gurenge” de *Demon Slayer* alcanzó el #1 en Billboard Hot 100. |\n\n---\n\n### 3. Impacto económico\n\n1. **Industria del entretenimiento**  \n   - **Ventas de DVDs/Blu‑ray**: millones de unidades vendidas globalmente.  \n   - **Licencias de merchandising**: figuras, ropa, accesorios.  \n   - **Streaming**: plataformas como Crunchyroll, Netflix y Amazon Prime generan ingresos significativos con suscripciones y licencias de anime.\n\n2. **Turismo**  \n   - **Visitas a lugares de filmación**: ciudades como Tokio y Kyoto atraen a fans que buscan experiencias inmersivas.  \n   - **Eventos y convenciones**: Anime Expo, Comiket y Otakon generan miles de visitantes y ventas de productos.\n\n3. **Empleo**  \n   - **Creadores y artistas**: animadores, guionistas, compositores.  \n   - **Industria de la traducción**: subtituladores y dubladores.  \n   - **Marketing y publicidad**: campañas que utilizan personajes de anime para promocionar productos.\n\n---\n\n### 4. Impacto social y educativo\n\n- **Fomento de la creatividad**: los jóvenes se inspiran a crear sus propias historias y animaciones.  \n- **Aprendizaje de idiomas**: ver anime con subtítulos ayuda a mejorar la comprensión del japonés y, en muchos casos, del inglés.  \n- **Exploración de temas complejos**: series como *Death Note* o *Psycho-Pass* abordan dilemas éticos, filosóficos y sociales que generan debates en foros y grupos de estudio.  \n- **Inclusión y diversidad**: personajes LGBTQ+ y representaciones de diferentes culturas están cada vez más presentes, promoviendo la empatía y la aceptación.\n\n---\n\n### 5. Ejemplos de impacto concreto\n\n- **“Demon Slayer” (Kimetsu no Yaiba)**:  \n  - Ventas de manga superaron los 200 millones de copias.  \n  - La película *Mugen Train* se convirtió en la película más taquillera de Japón en 2020.  \n  - Influencia en la moda con la popularidad de la chaqueta de Tanjiro.\n\n- **“Attack on Titan” (Shingeki no Kyojin)**:  \n  - Generó un fenómeno global con fan art, cosplay y debates sobre su trama política.  \n  - La serie ha sido citada en estudios académicos sobre narrativas de conflicto y supervivencia.\n\n- **“My Hero Academia” (Boku no Hero Academia)**:  \n  - Ha inspirado a jóvenes a estudiar ingeniería y ciencias, citando la tecnología de los “quirks” como motivación.  \n  - La franquicia ha lanzado videojuegos, juguetes y colaboraciones con marcas como Nike.\n\n---\n\n### 6. Conclusión\n\nEl anime no es solo entretenimiento; es un fenómeno cultural que trasciende fronteras. Su capacidad para contar historias universales, combinar arte visual con narrativa profunda y generar comunidades globales lo convierte en una fuerza poderosa que influye en la moda, la economía, la educación y la sociedad en general. Cada episodio, cada personaje y cada banda sonora contribuyen a un ecosistema que sigue creciendo y evolucionando, demostrando que el anime seguirá siendo un motor de creatividad y conexión humana en el futuro.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('5e75f140-f61c-442b-99d1-940c01154b5c'), timestamp=datetime.datetime(2025, 8, 15, 19, 41, 1, 752634), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='In english', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('8c95fe14-e7e8-4ab6-af58-980912a98d4b'), timestamp=datetime.datetime(2025, 8, 15, 19, 41, 3, 761388), session_id=UUID('418cd133-0a53-4c78-826e-9257286284d7'), content='**All HTML Tags (HTML\u202f5) + A Quick Guide to Anime & Its Impact**  \n*(English version)*  \n\n---\n\n## 1. Complete List of HTML\u202f5 Tags\n\nBelow is a grouped, up‑to‑date inventory of every standard element you’ll find in the HTML\u202f5 specification.  \nFeel free to copy‑paste the snippets into your own projects or use them as a reference when building a new page.\n\n| Category | Tag | Typical Use |\n|----------|-----|-------------|\n| **Document Structure** | `<!DOCTYPE html>` | Declares the document type. |\n| | `<html>` | Root element. |\n| | `<head>` | Metadata, links, scripts. |\n| | `<body>` | Visible content. |\n| **Metadata & Head Elements** | `<title>` | Page title. |\n| | `<base>` | Base URL for relative links. |\n| | `<link>` | External resources (CSS, icons). |\n| | `<meta>` | Charset, viewport, description, etc. |\n| | `<style>` | Inline CSS. |\n| | `<script>` | Inline or external JS. |\n| | `<noscript>` | Fallback when JS disabled. |\n| **Text & Semantic Content** | `<h1>`–`<h6>` | Headings. |\n| | `<p>` | Paragraph. |\n| | `<blockquote>` | Quoted text. |\n|ol>`, `<ul>`, `<li>` | Ordered & unordered lists. |\n| | `<dl>`, `<dt>`, `<dd>` | Definition lists. |\n| | `<figure>`, `<figcaption>` | Self‑contained media. |\n| | `<hr>` | Thematic break. |\n| | `<pre>`, `<code>`, `<samp>`, `<kbd>`, `<var>` | Code & sample text. |\n| | `<abbr>`, `<cite>`, `<b>`, `<strong>`, `<i>`, `<em>`, `<mark>`, `<small>`, `<sub>`, `<sup>`, `<span>` | Various inline semantics. |\n| | `<a>` | Hyperlink. |\n| | `<img>` | Image. |\n| | `<area>`, `<map>` | Image maps. |\n| | `<object>`, `<embed>` | Embedded objects. |\n| | `<iframe>` | Inline frame. |\n| | `<video>`, `<audio>`, `<source>`, `<track>` Media elements. |\n| | `<canvas>` | Drawing surface. |\n| | `<svg>` | Scalable vector graphics. |\n| | `<math>` | MathML. |\n| **Forms & Input** | `<form>` | Form container. |\n| | `<input>` | Various input types. |\n| | `<button>` | Clickable button. |\n| | `<select>`, `<option>`, `<optgroup>` | Dropdowns. |\n| | `<textarea>` | Multi‑line text. |\n| | `<label>` | Label for controls. |\n| | `<fieldset>`, `<legend>` | Grouped controls. |\n| | `<datalist>` | Pre‑defined options. |\n| | `<output>` | Result of calculation. |\n| | `<progress>`, `<meter>` | Progress & measurement. |\n| **Semantic & Structural Elements** | `<header>`, `<nav>`, `<main>`, `<section>`, `<article>`, `<aside>`, `<footer>` | Page layout. |\n| | `<details>`, `<summary>` | Disclosure widget. |\n| | `<dialog>` | Modal dialog. |\n| | `<template>` | Client‑side template. |\n| | `<slot>` | Web‑components placeholder. |\n| | `<picture>`, `<source>` | Responsive images. |\n| | `<noscript>` | Fallback for no JS. |\n| **Tables** | `<table>`, `<caption>`, `<thead>`, `<tbody>`, `<tfoot>`, `<tr>`, `<th>`, `<td>`, `<col>`, `<colgroup>` | Tabular data. |\n| **Miscellaneous** | `<link>`, `<meta>`, `<style>`, `<script>`, `<noscript>`, `<iframe>`, `<object>`, `<embed>`, `<param>`, `<bdi>`, `<bdo>`, `<wbr>`, `<ruby>`, `<rt>`, `<rp>` | Various utilities. |\n\n> **Tip:** Start your page with the semantic tags (`<header>`, `<nav>`, `<main>`, `<footer>`) to give it a clear structure, then sprinkle in the content‑specific tags as needed.\n\n---\n\n## 2. Anime & Its Impact – A Quick Overview\n\n### What Is Anime?\n\nAnime is the term used for Japanese animation, but it has become a global cultural phenomenon.  \nTypical characteristics:\n\n- **Visual style:** large expressive eyes, vibrant colors, dynamic action.\n- **Narrative breadth:** from slice‑of‑life dramas to epic sci‑fi sagas.\n- **Formats:** TV series, movies, OVAs, web‑only series, and more.\n\n**Examples:** *Naruto*, *Spirited\u202fAway*, *Attack\u202fon\u202fTitan*, *My\u202fHero\u202fAcademia*.\n\n---\n\n### Cultural Influence\n\n| Area | Effect | Example |\n|------|--------|---------|\n| **Fashion** | Cosplay, streetwear, Kawaii trends. | The rise of “anime‑inspired” sneakers and jackets. |\n| **Language** | Borrowed Japanese words. | “Kawaii,” “sugoi,” “otaku” used worldwide. |\n| **Art & Design** | Inspiration for illustrators, game designers. | Studio\u202fGhibli’s aesthetic influencing indie game art. |\n| **Music** | OSTs topping charts. | “Gurenge” (Demon\u202fSlayer) hit Billboard\u202fHot\u202f100. |\n\n---\n\n### Economic Impact\n\n1. **Entertainment Industry**  \n   - **Physical media sales** (DVD/Blu‑ray) still strong in Japan.  \n   - **Merchandising**: figures, apparel, accessories.  \n   - **Streaming**: Crunchyroll, Netflix, Amazon Prime license anime, generating subscription revenue.\n\n2. **Tourism & Events**  \n   - Fans visit filming locations in Tokyo, Kyoto, etc.  \n   - Conventions (Anime\u202fExpo, Otakon, Comiket) bring in millions of visitors and sales.\n\n3. **Employment**  \n   - Creators (animators, writers, composers).  \n   - Translators, subtitlers, voice actors.  \n   - Marketing teams that use anime characters for brand campaigns.\n\n---\n\n### Social & Educational Impact\n\n- **Creativity & DIY culture** – fans produce fan‑art, fan‑fiction, and even fan‑made animations.  \n- **Language learning** – watching anime with subtitles improves listening and reading skills.  \n- **Complex themes** – series like *Death\u202fNote* or *Psycho‑Pass* spark discussions on ethics, law, and society.  \n- **Representation** – increasing LGBTQ+ characters and diverse cultural portrayals promote empathy and inclusion.\n\n---\n\n### Concrete Success Stories\n\n| Series | Milestones | Cultural Footprint |\n|--------|------------|--------------------|\n| **Demon\u202fSlayer** | >200\u202fM manga copies; *Mugen\u202fTrain* the highest‑grossing Japanese film 2020 | Influenced fashion (Tanjiro’s jacket), spawned a massive merch line. |\n| **Attack\u202fon\u202fTitan** | Global fan‑art, cosplay, academic papers on its narrative | Sparked debates on war, survival, and political allegory. |\n| **My\u202fHero\u202fAcademia** | Video games, collaborations with Nike, tech‑inspired “quirks” | Inspired STEM interest among teens, cross‑industry partnerships. |\n\n---\n\n### Bottom Line\n\nAnime is more than entertainment; it’s a cultural engine that shapes fashion, language, art, and even economics.  \nIts stories resonate across borders, fostering communities that share creativity, curiosity, and a love for storytelling. Whether you’re a casual viewer or a hardcore fan, anime’s ripple effects are felt in everyday life—from the clothes you wear to the conversations you have.', files=None, model_response_time_ms=None)]
2025-08-15 19:58:57.439 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('2f77bf50-ceae-4dbb-b360-6b717f378eab'), 'timestamp': datetime.datetime(2025, 8, 15, 19, 40, 9, 752307), 'session_id': UUID('418cd133-0a53-4c78-826e-9257286284d7'), 'content': 'Give all html tags you can and write about anime', 'files': [], 'model_response_time_ms': None}
2025-08-15 19:58:57.439 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('2f77bf50-ceae-4dbb-b360-6b717f378eab'), 'timestamp': datetime.datetime(2025, 8, 15, 19, 40, 9, 752307), 'session_id': UUID('418cd133-0a53-4c78-826e-9257286284d7'), 'content': 'Give all html tags you can and write about anime', 'files': [], 'model_response_time_ms': None}
2025-08-15 19:58:57.684 | INFO     | src.main:log_requests:54 - GET /sessions/history/418cd133-0a53-4c78-826e-9257286284d7 → 200 (1551.65ms)
2025-08-15 19:58:57.684 | INFO     | src.main:log_requests:54 - GET /sessions/history/418cd133-0a53-4c78-826e-9257286284d7 → 200 (1551.65ms)
2025-08-15 20:00:18.094 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-15 20:00:18.094 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-15 20:00:18.096 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.51ms)
2025-08-15 20:00:18.096 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.51ms)
2025-08-15 20:00:18.098 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:00:18.098 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:00:19.856 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 20:00:19.856 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 20:00:20.137 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2038.8ms)
2025-08-15 20:00:20.137 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2038.8ms)
2025-08-15 20:00:57.212 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:00:57.212 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:00:58.598 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 20:00:58.598 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 20:00:58.848 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (1636.25ms)
2025-08-15 20:00:58.848 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (1636.25ms)
2025-08-15 20:01:39.239 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:01:39.239 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:01:42.940 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 20:01:42.940 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 20:01:43.185 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3946.18ms)
2025-08-15 20:01:43.185 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3946.18ms)
2025-08-15 20:02:05.751 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-15 20:02:05.751 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-15 20:02:05.752 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.0ms)
2025-08-15 20:02:05.752 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.0ms)
2025-08-15 20:02:06.070 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-15 20:02:06.070 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-15 20:02:12.383 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (6312.79ms)
2025-08-15 20:02:12.383 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (6312.79ms)
2025-08-15 20:26:30.987 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-15 20:26:30.987 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-15 20:26:57.716 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-15 20:27:18.204 | INFO     | src.main:<module>:20 - Server started
2025-08-15 20:27:18.204 | INFO     | src.main:<module>:20 - Server started
2025-08-15 20:27:18.230 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-15 20:27:18.230 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-15 20:27:26.948 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-15 20:27:26.948 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-15 20:27:26.960 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-15 20:27:26.960 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-15 20:27:26.961 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.0ms)
2025-08-15 20:27:26.961 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.0ms)
2025-08-15 20:27:27.279 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-15 20:27:27.279 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-15 20:27:29.781 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2502.61ms)
2025-08-15 20:27:29.781 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2502.61ms)
2025-08-15 20:27:51.462 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-15 20:27:51.462 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-15 20:27:51.464 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.99ms)
2025-08-15 20:27:51.464 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.99ms)
2025-08-15 20:27:51.469 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-15 20:27:51.469 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-15 20:27:56.364 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (4894.61ms)
2025-08-15 20:27:56.364 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (4894.61ms)
2025-08-15 20:27:56.435 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-15 20:27:56.435 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-15 20:27:56.436 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.0ms)
2025-08-15 20:27:56.436 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.0ms)
2025-08-15 20:27:56.439 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:27:56.439 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:27:57.745 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaResume.pdf']
2025-08-15 20:27:57.745 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaResume.pdf']
2025-08-15 20:28:00.857 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4419.2ms)
2025-08-15 20:28:00.857 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4419.2ms)
2025-08-15 20:28:07.275 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/50843ba6-13c8-4050-b0df-4d9b9379e590/title
2025-08-15 20:28:07.275 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/50843ba6-13c8-4050-b0df-4d9b9379e590/title
2025-08-15 20:28:07.276 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/50843ba6-13c8-4050-b0df-4d9b9379e590/title → 200 (1.0ms)
2025-08-15 20:28:07.276 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/50843ba6-13c8-4050-b0df-4d9b9379e590/title → 200 (1.0ms)
2025-08-15 20:28:07.583 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/50843ba6-13c8-4050-b0df-4d9b9379e590/title
2025-08-15 20:28:07.583 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/50843ba6-13c8-4050-b0df-4d9b9379e590/title
2025-08-15 20:28:11.634 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 50843ba6-13c8-4050-b0df-4d9b9379e590: Resume Review and Feedback Discussion
2025-08-15 20:28:11.634 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 50843ba6-13c8-4050-b0df-4d9b9379e590: Resume Review and Feedback Discussion
2025-08-15 20:28:11.904 | INFO     | src.main:log_requests:54 - PATCH /sessions/50843ba6-13c8-4050-b0df-4d9b9379e590/title → 200 (4320.32ms)
2025-08-15 20:28:11.904 | INFO     | src.main:log_requests:54 - PATCH /sessions/50843ba6-13c8-4050-b0df-4d9b9379e590/title → 200 (4320.32ms)
2025-08-15 20:28:30.829 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-15 20:28:30.829 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-15 20:28:50.218 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-15 20:29:09.579 | INFO     | src.main:<module>:20 - Server started
2025-08-15 20:29:09.579 | INFO     | src.main:<module>:20 - Server started
2025-08-15 20:29:09.603 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-15 20:29:09.603 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-15 20:29:22.461 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-15 20:29:22.461 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-15 20:29:32.628 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:29:32.628 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:29:34.113 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 20:29:34.113 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 20:29:34.338 | INFO     | src.router.messages:message_stream:125 - Retiver has not has been init properly currently using Simple Chat Engine
2025-08-15 20:29:34.338 | INFO     | src.router.messages:message_stream:125 - Retiver has not has been init properly currently using Simple Chat Engine
2025-08-15 20:29:34.597 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (1968.15ms)
2025-08-15 20:29:34.597 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (1968.15ms)
2025-08-15 20:30:04.420 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:30:04.420 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:30:08.464 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 20:30:08.464 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 20:30:08.465 | INFO     | src.router.messages:message_stream:125 - Retiver has not has been init properly currently using Simple Chat Engine
2025-08-15 20:30:08.465 | INFO     | src.router.messages:message_stream:125 - Retiver has not has been init properly currently using Simple Chat Engine
2025-08-15 20:30:08.785 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4364.97ms)
2025-08-15 20:30:08.785 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4364.97ms)
2025-08-15 20:32:15.617 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-15 20:32:15.617 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-15 20:32:19.766 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (4149.31ms)
2025-08-15 20:32:19.766 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (4149.31ms)
2025-08-15 20:34:05.185 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-15 20:34:05.185 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-15 20:34:09.703 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (4518.34ms)
2025-08-15 20:34:09.703 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (4518.34ms)
2025-08-15 20:34:15.231 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:34:15.231 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:34:16.520 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaResume.pdf']
2025-08-15 20:34:16.520 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaResume.pdf']
2025-08-15 20:34:18.771 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3540.17ms)
2025-08-15 20:34:18.771 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3540.17ms)
2025-08-15 20:34:26.570 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/33661f12-c884-4445-8b04-06c72dfaed44/title
2025-08-15 20:34:26.570 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/33661f12-c884-4445-8b04-06c72dfaed44/title
2025-08-15 20:34:26.571 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/33661f12-c884-4445-8b04-06c72dfaed44/title → 200 (0.99ms)
2025-08-15 20:34:26.571 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/33661f12-c884-4445-8b04-06c72dfaed44/title → 200 (0.99ms)
2025-08-15 20:34:26.576 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/33661f12-c884-4445-8b04-06c72dfaed44/title
2025-08-15 20:34:26.576 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/33661f12-c884-4445-8b04-06c72dfaed44/title
2025-08-15 20:34:28.876 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 33661f12-c884-4445-8b04-06c72dfaed44: Resume Review and Feedback Discussion
2025-08-15 20:34:28.876 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 33661f12-c884-4445-8b04-06c72dfaed44: Resume Review and Feedback Discussion
2025-08-15 20:34:29.133 | INFO     | src.main:log_requests:54 - PATCH /sessions/33661f12-c884-4445-8b04-06c72dfaed44/title → 200 (2556.9ms)
2025-08-15 20:34:29.133 | INFO     | src.main:log_requests:54 - PATCH /sessions/33661f12-c884-4445-8b04-06c72dfaed44/title → 200 (2556.9ms)
2025-08-15 20:34:39.970 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:34:39.970 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:34:41.481 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 20:34:41.481 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 20:34:44.423 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4452.33ms)
2025-08-15 20:34:44.423 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4452.33ms)
2025-08-15 20:34:59.474 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: dc33a8bf-2cf1-4add-8e57-d473ba7c714c
Text: Dinesh  Thumma  9393519918  |  dineshthumma15@gmail.com
|Github|Leetcode|Codechef  PROFESSIONAL  SUMMARY  An  undergraduate
specializing  in  Artificial  Intelligence  and  Data  Science,  with
a  primary  focus  on  backend  systems   and   applied   generative
AI.   Seeking   to   contribute   to   real-world   projects   and
collabora...
Score:  0.525

2025-08-15 20:34:59.474 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: dc33a8bf-2cf1-4add-8e57-d473ba7c714c
Text: Dinesh  Thumma  9393519918  |  dineshthumma15@gmail.com
|Github|Leetcode|Codechef  PROFESSIONAL  SUMMARY  An  undergraduate
specializing  in  Artificial  Intelligence  and  Data  Science,  with
a  primary  focus  on  backend  systems   and   applied   generative
AI.   Seeking   to   contribute   to   real-world   projects   and
collabora...
Score:  0.525

2025-08-15 20:34:59.475 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-15 20:34:59.475 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-15 20:42:06.081 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-15 20:42:06.081 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-15 20:42:06.082 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.02ms)
2025-08-15 20:42:06.082 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.02ms)
2025-08-15 20:42:06.087 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:42:06.087 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:42:07.857 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 20:42:07.857 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 20:42:09.899 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3811.86ms)
2025-08-15 20:42:09.899 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3811.86ms)
2025-08-15 20:42:18.854 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: 3e6a96de-74c5-465f-87be-09419c88fe2c
Text: ●  Enabled  PDF-based  RAG  for  contextual  responses  from
uploaded  documents.  ●  Developed  GitHub  integration  for  RAG
operations  using  specified  repository  files.  ●  Engineered  a
robust  session  management  system  with  Redis  caching  and
PostgreSQL  for  persistent  storage,   ensuring   efficient   context
management.  ...
Score:  0.529

2025-08-15 20:42:18.854 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: 3e6a96de-74c5-465f-87be-09419c88fe2c
Text: ●  Enabled  PDF-based  RAG  for  contextual  responses  from
uploaded  documents.  ●  Developed  GitHub  integration  for  RAG
operations  using  specified  repository  files.  ●  Engineered  a
robust  session  management  system  with  Redis  caching  and
PostgreSQL  for  persistent  storage,   ensuring   efficient   context
management.  ...
Score:  0.529

2025-08-15 20:42:18.857 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-15 20:42:18.857 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-15 20:42:42.647 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-15 20:42:42.647 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-15 20:42:42.648 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.0ms)
2025-08-15 20:42:42.648 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.0ms)
2025-08-15 20:42:42.967 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-15 20:42:42.967 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-15 20:42:46.316 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (3349.17ms)
2025-08-15 20:42:46.316 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (3349.17ms)
2025-08-15 20:42:57.928 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:42:57.928 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:42:59.169 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaFrontend.pdf']
2025-08-15 20:42:59.169 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaFrontend.pdf']
2025-08-15 20:43:00.841 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2912.77ms)
2025-08-15 20:43:00.841 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2912.77ms)
2025-08-15 20:43:13.818 | ERROR    | src.router.messages:stream_response:78 - Streaming error: Calculated available context size -1090 was not non-negative.
2025-08-15 20:43:13.818 | ERROR    | src.router.messages:stream_response:78 - Streaming error: Calculated available context size -1090 was not non-negative.
2025-08-15 20:43:31.882 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:43:31.882 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:43:33.110 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 20:43:33.110 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 20:43:34.883 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3000.83ms)
2025-08-15 20:43:34.883 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3000.83ms)
2025-08-15 20:43:51.453 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: 2826a92c-b60f-4c86-a9f5-e977355d0494
Text: .                       EDUCATION  B.Tech  in  Artificial
Intelligence  and  Data  Science  2023-2027  CVR  College  of
Engineering
CGPA:7.7
Score:  0.518

2025-08-15 20:43:51.453 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: 2826a92c-b60f-4c86-a9f5-e977355d0494
Text: .                       EDUCATION  B.Tech  in  Artificial
Intelligence  and  Data  Science  2023-2027  CVR  College  of
Engineering
CGPA:7.7
Score:  0.518

2025-08-15 20:43:51.454 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-15 20:43:51.454 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-15 20:43:58.960 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-15 20:43:58.960 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-15 20:43:58.961 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.0ms)
2025-08-15 20:43:58.961 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.0ms)
2025-08-15 20:43:59.265 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-15 20:43:59.265 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-15 20:44:03.680 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (4415.01ms)
2025-08-15 20:44:03.680 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (4415.01ms)
2025-08-15 20:45:19.766 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-15 20:45:19.766 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-15 20:45:22.182 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (2416.55ms)
2025-08-15 20:45:22.182 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (2416.55ms)
2025-08-15 20:45:33.227 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:45:33.227 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:45:34.453 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaFrontend.pdf', 'FrontendResume.pdf']
2025-08-15 20:45:34.453 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaFrontend.pdf', 'FrontendResume.pdf']
2025-08-15 20:45:35.717 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2490.12ms)
2025-08-15 20:45:35.717 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2490.12ms)
2025-08-15 20:45:42.089 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/9fa48ed7-9d64-4169-92d8-295d64525e49/title
2025-08-15 20:45:42.089 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/9fa48ed7-9d64-4169-92d8-295d64525e49/title
2025-08-15 20:45:42.089 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/9fa48ed7-9d64-4169-92d8-295d64525e49/title → 200 (0.0ms)
2025-08-15 20:45:42.089 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/9fa48ed7-9d64-4169-92d8-295d64525e49/title → 200 (0.0ms)
2025-08-15 20:45:42.092 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/9fa48ed7-9d64-4169-92d8-295d64525e49/title
2025-08-15 20:45:42.092 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/9fa48ed7-9d64-4169-92d8-295d64525e49/title
2025-08-15 20:45:46.542 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 9fa48ed7-9d64-4169-92d8-295d64525e49: Review of Candidate Resumes
2025-08-15 20:45:46.542 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 9fa48ed7-9d64-4169-92d8-295d64525e49: Review of Candidate Resumes
2025-08-15 20:45:46.787 | INFO     | src.main:log_requests:54 - PATCH /sessions/9fa48ed7-9d64-4169-92d8-295d64525e49/title → 200 (4694.83ms)
2025-08-15 20:45:46.787 | INFO     | src.main:log_requests:54 - PATCH /sessions/9fa48ed7-9d64-4169-92d8-295d64525e49/title → 200 (4694.83ms)
2025-08-15 20:45:58.024 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:45:58.024 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 20:45:59.264 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 20:45:59.264 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 20:46:01.022 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2998.34ms)
2025-08-15 20:46:01.022 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2998.34ms)
2025-08-15 20:46:09.722 | ERROR    | src.router.messages:stream_response:78 - Streaming error: peer closed connection without sending complete message body (incomplete chunked read)
2025-08-15 20:46:09.722 | ERROR    | src.router.messages:stream_response:78 - Streaming error: peer closed connection without sending complete message body (incomplete chunked read)
2025-08-15 21:14:23.764 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-15 21:14:39.343 | INFO     | src.main:<module>:20 - Server started
2025-08-15 21:14:39.343 | INFO     | src.main:<module>:20 - Server started
2025-08-15 21:14:39.357 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-15 21:14:39.357 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-15 21:14:47.870 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-15 21:14:47.870 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-15 21:15:02.841 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-15 21:15:02.841 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-15 21:15:04.634 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-15 21:15:04.634 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-15 21:15:04.636 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (1794.53ms)
2025-08-15 21:15:04.636 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (1794.53ms)
2025-08-15 21:15:04.973 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-15 21:15:04.973 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-15 21:15:04.974 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.03ms)
2025-08-15 21:15:04.974 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.03ms)
2025-08-15 21:15:04.978 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-15 21:15:04.978 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-15 21:15:07.469 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2491.25ms)
2025-08-15 21:15:07.469 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2491.25ms)
2025-08-15 21:15:07.924 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-15 21:15:07.924 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-15 21:15:07.925 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-15 21:15:07.925 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-15 21:15:07.925 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (1.23ms)
2025-08-15 21:15:07.925 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (1.23ms)
2025-08-15 21:15:07.927 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.37ms)
2025-08-15 21:15:07.927 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.37ms)
2025-08-15 21:15:07.929 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:15:07.929 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:15:09.330 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1400.97ms)
2025-08-15 21:15:09.330 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1400.97ms)
2025-08-15 21:15:09.335 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:15:09.335 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:15:10.562 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1227.06ms)
2025-08-15 21:15:10.562 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1227.06ms)
2025-08-15 21:15:26.913 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-15 21:15:26.913 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-15 21:15:26.914 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (1.0ms)
2025-08-15 21:15:26.914 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (1.0ms)
2025-08-15 21:15:27.224 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-15 21:15:27.224 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-15 21:15:28.986 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1761.66ms)
2025-08-15 21:15:28.986 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1761.66ms)
2025-08-15 21:15:29.169 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-15 21:15:29.169 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-15 21:15:29.169 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (0.0ms)
2025-08-15 21:15:29.169 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (0.0ms)
2025-08-15 21:15:29.172 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-15 21:15:29.172 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-15 21:15:30.724 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1552.08ms)
2025-08-15 21:15:30.724 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1552.08ms)
2025-08-15 21:15:59.540 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-15 21:15:59.540 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-15 21:15:59.541 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.0ms)
2025-08-15 21:15:59.541 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.0ms)
2025-08-15 21:15:59.544 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-15 21:15:59.544 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-15 21:16:03.663 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (4118.33ms)
2025-08-15 21:16:03.663 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (4118.33ms)
2025-08-15 21:16:14.239 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-15 21:16:14.239 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-15 21:16:14.241 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.29ms)
2025-08-15 21:16:14.241 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.29ms)
2025-08-15 21:16:14.244 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 21:16:14.244 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 21:16:15.712 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaResume.pdf']
2025-08-15 21:16:15.712 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaResume.pdf']
2025-08-15 21:16:17.203 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2958.48ms)
2025-08-15 21:16:17.203 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2958.48ms)
2025-08-15 21:16:24.034 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/9b1eb7c1-5dea-48ad-a96d-c2fa63ef2715/title
2025-08-15 21:16:24.034 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/9b1eb7c1-5dea-48ad-a96d-c2fa63ef2715/title
2025-08-15 21:16:24.036 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/9b1eb7c1-5dea-48ad-a96d-c2fa63ef2715/title → 200 (2.32ms)
2025-08-15 21:16:24.036 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/9b1eb7c1-5dea-48ad-a96d-c2fa63ef2715/title → 200 (2.32ms)
2025-08-15 21:16:24.348 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/9b1eb7c1-5dea-48ad-a96d-c2fa63ef2715/title
2025-08-15 21:16:24.348 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/9b1eb7c1-5dea-48ad-a96d-c2fa63ef2715/title
2025-08-15 21:16:27.946 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 9b1eb7c1-5dea-48ad-a96d-c2fa63ef2715: Resume Explanation and Analysis Request 
Title: Resume Explanation Request
2025-08-15 21:16:27.946 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 9b1eb7c1-5dea-48ad-a96d-c2fa63ef2715: Resume Explanation and Analysis Request 
Title: Resume Explanation Request
2025-08-15 21:16:28.181 | INFO     | src.main:log_requests:54 - PATCH /sessions/9b1eb7c1-5dea-48ad-a96d-c2fa63ef2715/title → 200 (3832.85ms)
2025-08-15 21:16:28.181 | INFO     | src.main:log_requests:54 - PATCH /sessions/9b1eb7c1-5dea-48ad-a96d-c2fa63ef2715/title → 200 (3832.85ms)
2025-08-15 21:16:34.472 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 21:16:34.472 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 21:16:35.752 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 21:16:35.752 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 21:16:38.350 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3877.59ms)
2025-08-15 21:16:38.350 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3877.59ms)
2025-08-15 21:16:49.792 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: 185ec72a-fecf-45f3-aef9-e9001de41300
Text: Dinesh  Thumma  9393519918  |  dineshthumma15@gmail.com
|Github|Leetcode|Codechef  PROFESSIONAL  SUMMARY  An  undergraduate
specializing  in  Artificial  Intelligence  and  Data  Science,  with
a  primary  focus  on  backend  systems   and   applied   generative
AI.   Seeking   to   contribute   to   real-world   projects   and
collabora...
Score:  0.529

2025-08-15 21:16:49.792 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: 185ec72a-fecf-45f3-aef9-e9001de41300
Text: Dinesh  Thumma  9393519918  |  dineshthumma15@gmail.com
|Github|Leetcode|Codechef  PROFESSIONAL  SUMMARY  An  undergraduate
specializing  in  Artificial  Intelligence  and  Data  Science,  with
a  primary  focus  on  backend  systems   and   applied   generative
AI.   Seeking   to   contribute   to   real-world   projects   and
collabora...
Score:  0.529

2025-08-15 21:16:49.792 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-15 21:16:49.792 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-15 21:18:34.272 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-15 21:18:34.272 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-15 21:18:36.788 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (2515.91ms)
2025-08-15 21:18:36.788 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (2515.91ms)
2025-08-15 21:18:48.224 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 21:18:48.224 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 21:18:51.236 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaFrontend.pdf', 'FrontendResume.pdf']
2025-08-15 21:18:51.236 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaFrontend.pdf', 'FrontendResume.pdf']
2025-08-15 21:18:53.085 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4861.04ms)
2025-08-15 21:18:53.085 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4861.04ms)
2025-08-15 21:19:10.271 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: 4f131e59-0e1a-4fa1-a0d7-e8202ce8763e
Text: .                       EDUCATION  B.Tech  in  Artificial
Intelligence  and  Data  Science  2023-2027  CVR  College  of
Engineering
CGPA:7.7
Score:  0.574

2025-08-15 21:19:10.271 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: 4f131e59-0e1a-4fa1-a0d7-e8202ce8763e
Text: .                       EDUCATION  B.Tech  in  Artificial
Intelligence  and  Data  Science  2023-2027  CVR  College  of
Engineering
CGPA:7.7
Score:  0.574

2025-08-15 21:19:10.272 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-15 21:19:10.272 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-15 21:21:09.676 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 21:21:09.676 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 21:21:12.720 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 21:21:12.720 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 21:21:15.804 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (6128.15ms)
2025-08-15 21:21:15.804 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (6128.15ms)
2025-08-15 21:21:38.830 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: 4f131e59-0e1a-4fa1-a0d7-e8202ce8763e
Text: .                       EDUCATION  B.Tech  in  Artificial
Intelligence  and  Data  Science  2023-2027  CVR  College  of
Engineering
CGPA:7.7
Score:  0.575

2025-08-15 21:21:38.830 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: 4f131e59-0e1a-4fa1-a0d7-e8202ce8763e
Text: .                       EDUCATION  B.Tech  in  Artificial
Intelligence  and  Data  Science  2023-2027  CVR  College  of
Engineering
CGPA:7.7
Score:  0.575

2025-08-15 21:21:38.831 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-15 21:21:38.831 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-15 21:24:33.217 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:24:33.217 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:24:35.942 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2725.8ms)
2025-08-15 21:24:35.942 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2725.8ms)
2025-08-15 21:24:35.948 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:24:35.948 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:24:37.281 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1333.6ms)
2025-08-15 21:24:37.281 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1333.6ms)
2025-08-15 21:25:29.759 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-15 21:25:29.759 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-15 21:25:29.760 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-15 21:25:29.760 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-15 21:25:29.760 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.01ms)
2025-08-15 21:25:29.760 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.01ms)
2025-08-15 21:25:29.762 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (1.27ms)
2025-08-15 21:25:29.762 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (1.27ms)
2025-08-15 21:25:30.069 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:25:30.069 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:25:31.544 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1474.84ms)
2025-08-15 21:25:31.544 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1474.84ms)
2025-08-15 21:25:31.549 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:25:31.549 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:25:34.221 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2671.74ms)
2025-08-15 21:25:34.221 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2671.74ms)
2025-08-15 21:25:58.967 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:25:58.967 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:26:00.832 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1863.43ms)
2025-08-15 21:26:00.832 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1863.43ms)
2025-08-15 21:26:00.835 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:26:00.835 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:26:02.731 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1896.0ms)
2025-08-15 21:26:02.731 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1896.0ms)
2025-08-15 21:28:48.378 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:28:48.378 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:28:49.993 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1614.93ms)
2025-08-15 21:28:49.993 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1614.93ms)
2025-08-15 21:28:49.996 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:28:49.996 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:28:51.375 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1379.35ms)
2025-08-15 21:28:51.375 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1379.35ms)
2025-08-15 21:29:24.199 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:29:24.199 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:29:25.627 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1427.6ms)
2025-08-15 21:29:25.627 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1427.6ms)
2025-08-15 21:29:25.632 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:29:25.632 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 21:29:27.063 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1430.54ms)
2025-08-15 21:29:27.063 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1430.54ms)
2025-08-15 21:58:08.480 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-15 21:58:08.480 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-15 21:58:08.481 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-15 21:58:08.481 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-15 21:58:08.482 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.53ms)
2025-08-15 21:58:08.482 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.53ms)
2025-08-15 21:58:08.484 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (3.01ms)
2025-08-15 21:58:08.484 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (3.01ms)
2025-08-15 22:04:58.297 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-15 22:04:58.297 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-15 23:25:11.311 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-15 23:25:31.664 | INFO     | src.main:<module>:20 - Server started
2025-08-15 23:25:31.664 | INFO     | src.main:<module>:20 - Server started
2025-08-15 23:25:31.688 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-15 23:25:31.688 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-15 23:25:39.155 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-15 23:25:39.155 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-15 23:25:46.206 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-15 23:25:46.206 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-15 23:25:48.578 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-15 23:25:48.578 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-15 23:25:48.580 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (2374.05ms)
2025-08-15 23:25:48.580 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (2374.05ms)
2025-08-15 23:25:48.919 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-15 23:25:48.919 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-15 23:25:48.920 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (0.99ms)
2025-08-15 23:25:48.920 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (0.99ms)
2025-08-15 23:25:48.923 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-15 23:25:48.923 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-15 23:25:52.060 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (3137.67ms)
2025-08-15 23:25:52.060 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (3137.67ms)
2025-08-15 23:25:52.567 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-15 23:25:52.567 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-15 23:25:52.567 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-15 23:25:52.567 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-15 23:25:52.568 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (3.0ms)
2025-08-15 23:25:52.568 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (3.0ms)
2025-08-15 23:25:52.570 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.01ms)
2025-08-15 23:25:52.570 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.01ms)
2025-08-15 23:25:52.573 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 23:25:52.573 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 23:25:54.747 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2173.54ms)
2025-08-15 23:25:54.747 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2173.54ms)
2025-08-15 23:25:54.755 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 23:25:54.755 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-15 23:25:56.358 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1603.33ms)
2025-08-15 23:25:56.358 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1603.33ms)
2025-08-15 23:25:57.432 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-15 23:25:57.432 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-15 23:25:57.432 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (0.62ms)
2025-08-15 23:25:57.432 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (0.62ms)
2025-08-15 23:25:57.435 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-15 23:25:57.435 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-15 23:25:59.329 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1893.96ms)
2025-08-15 23:25:59.329 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1893.96ms)
2025-08-15 23:26:00.553 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-15 23:26:00.553 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-15 23:26:00.554 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (1.0ms)
2025-08-15 23:26:00.554 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (1.0ms)
2025-08-15 23:26:00.557 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-15 23:26:00.557 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-15 23:26:02.196 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1638.5ms)
2025-08-15 23:26:02.196 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1638.5ms)
2025-08-15 23:26:25.036 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-15 23:26:25.036 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-15 23:26:25.038 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.99ms)
2025-08-15 23:26:25.038 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.99ms)
2025-08-15 23:26:25.047 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-15 23:26:25.047 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-15 23:26:27.628 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (2580.96ms)
2025-08-15 23:26:27.628 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (2580.96ms)
2025-08-15 23:26:38.504 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-15 23:26:38.504 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-15 23:26:38.505 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.0ms)
2025-08-15 23:26:38.505 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.0ms)
2025-08-15 23:26:38.506 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 23:26:38.506 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 23:26:40.197 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaResume - Copy.pdf']
2025-08-15 23:26:40.197 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaResume - Copy.pdf']
2025-08-15 23:26:42.234 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3727.84ms)
2025-08-15 23:26:42.234 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3727.84ms)
2025-08-15 23:26:51.556 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/6f8f1aa7-6fa4-4277-94bb-a99502cf2d74/title
2025-08-15 23:26:51.556 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/6f8f1aa7-6fa4-4277-94bb-a99502cf2d74/title
2025-08-15 23:26:51.557 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/6f8f1aa7-6fa4-4277-94bb-a99502cf2d74/title → 200 (1.0ms)
2025-08-15 23:26:51.557 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/6f8f1aa7-6fa4-4277-94bb-a99502cf2d74/title → 200 (1.0ms)
2025-08-15 23:26:51.870 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/6f8f1aa7-6fa4-4277-94bb-a99502cf2d74/title
2025-08-15 23:26:51.870 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/6f8f1aa7-6fa4-4277-94bb-a99502cf2d74/title
2025-08-15 23:26:56.111 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 6f8f1aa7-6fa4-4277-94bb-a99502cf2d74: Resume Content Analysis Discussion
2025-08-15 23:26:56.111 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 6f8f1aa7-6fa4-4277-94bb-a99502cf2d74: Resume Content Analysis Discussion
2025-08-15 23:26:56.365 | INFO     | src.main:log_requests:54 - PATCH /sessions/6f8f1aa7-6fa4-4277-94bb-a99502cf2d74/title → 200 (4494.94ms)
2025-08-15 23:26:56.365 | INFO     | src.main:log_requests:54 - PATCH /sessions/6f8f1aa7-6fa4-4277-94bb-a99502cf2d74/title → 200 (4494.94ms)
2025-08-15 23:27:01.495 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 23:27:01.495 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 23:27:03.439 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 23:27:03.439 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 23:27:05.485 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3990.62ms)
2025-08-15 23:27:05.485 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3990.62ms)
2025-08-15 23:27:15.012 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: eebb23b7-b0df-4909-a83b-18d5c5889585
Text: Dinesh  Thumma  9393519918  |  dineshthumma15@gmail.com   |G i t
h u b   PROFESSIONAL  SUMMARY  Undergraduate  in  Artificial
Intelligence  and  Data  Science  with  a  focus  on  backend  systems
and  applied  generative  AI.   Interested   in   building   reliable,
scalable   applications.Looking   to   contribute   to   real-world
proje...
Score:  0.546

2025-08-15 23:27:15.012 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: eebb23b7-b0df-4909-a83b-18d5c5889585
Text: Dinesh  Thumma  9393519918  |  dineshthumma15@gmail.com   |G i t
h u b   PROFESSIONAL  SUMMARY  Undergraduate  in  Artificial
Intelligence  and  Data  Science  with  a  focus  on  backend  systems
and  applied  generative  AI.   Interested   in   building   reliable,
scalable   applications.Looking   to   contribute   to   real-world
proje...
Score:  0.546

2025-08-15 23:27:15.013 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-15 23:27:15.013 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-15 23:39:24.177 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-15 23:39:24.177 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-15 23:39:24.178 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.0ms)
2025-08-15 23:39:24.178 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.0ms)
2025-08-15 23:39:24.496 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-15 23:39:24.496 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-15 23:39:29.601 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (5104.49ms)
2025-08-15 23:39:29.601 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (5104.49ms)
2025-08-15 23:40:14.747 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-15 23:40:14.747 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-15 23:40:14.748 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.0ms)
2025-08-15 23:40:14.748 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.0ms)
2025-08-15 23:40:14.751 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-15 23:40:14.751 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-15 23:40:18.192 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (3440.33ms)
2025-08-15 23:40:18.192 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (3440.33ms)
2025-08-15 23:42:40.152 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-15 23:42:40.152 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-15 23:42:40.153 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.01ms)
2025-08-15 23:42:40.153 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.01ms)
2025-08-15 23:42:40.156 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 23:42:40.156 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 23:42:41.768 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 23:42:41.768 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 23:42:44.125 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3968.92ms)
2025-08-15 23:42:44.125 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3968.92ms)
2025-08-15 23:42:50.566 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: 141b6254-ea09-43fa-8cca-4f6fbb2a74da
Text: Dinesh  Thumma  9393519918  |  dineshthumma15@gmail.com   |G i t
h u b   PROFESSIONAL  SUMMARY  Undergraduate  in  Artificial
Intelligence  and  Data  Science  with  a  focus  on  backend  systems
and  applied  generative  AI.   Interested   in   building   reliable,
scalable   applications.Looking   to   contribute   to   real-world
proje...
Score:  0.606

2025-08-15 23:42:50.566 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: 141b6254-ea09-43fa-8cca-4f6fbb2a74da
Text: Dinesh  Thumma  9393519918  |  dineshthumma15@gmail.com   |G i t
h u b   PROFESSIONAL  SUMMARY  Undergraduate  in  Artificial
Intelligence  and  Data  Science  with  a  focus  on  backend  systems
and  applied  generative  AI.   Interested   in   building   reliable,
scalable   applications.Looking   to   contribute   to   real-world
proje...
Score:  0.606

2025-08-15 23:42:50.568 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-15 23:42:50.568 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-15 23:48:30.370 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-15 23:48:30.370 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-15 23:48:35.056 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (4685.7ms)
2025-08-15 23:48:35.056 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (4685.7ms)
2025-08-15 23:49:06.220 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-15 23:49:06.220 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-15 23:49:07.475 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (1254.84ms)
2025-08-15 23:49:07.475 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (1254.84ms)
2025-08-15 23:49:07.826 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 23:49:07.826 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 23:49:09.491 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['FrontendResume.pdf']
2025-08-15 23:49:09.491 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['FrontendResume.pdf']
2025-08-15 23:49:12.156 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4329.61ms)
2025-08-15 23:49:12.156 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4329.61ms)
2025-08-15 23:49:21.602 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/7237f86d-10da-4034-a354-e4bb715f93cf/title
2025-08-15 23:49:21.602 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/7237f86d-10da-4034-a354-e4bb715f93cf/title
2025-08-15 23:49:21.603 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/7237f86d-10da-4034-a354-e4bb715f93cf/title → 200 (1.16ms)
2025-08-15 23:49:21.603 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/7237f86d-10da-4034-a354-e4bb715f93cf/title → 200 (1.16ms)
2025-08-15 23:49:21.606 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/7237f86d-10da-4034-a354-e4bb715f93cf/title
2025-08-15 23:49:21.606 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/7237f86d-10da-4034-a354-e4bb715f93cf/title
2025-08-15 23:49:25.320 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 7237f86d-10da-4034-a354-e4bb715f93cf: Resume Explanation and Analysis Request 
is too long. A more suitable title would be 
Resume Analysis Request
2025-08-15 23:49:25.320 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 7237f86d-10da-4034-a354-e4bb715f93cf: Resume Explanation and Analysis Request 
is too long. A more suitable title would be 
Resume Analysis Request
2025-08-15 23:49:25.565 | INFO     | src.main:log_requests:54 - PATCH /sessions/7237f86d-10da-4034-a354-e4bb715f93cf/title → 200 (3959.72ms)
2025-08-15 23:49:25.565 | INFO     | src.main:log_requests:54 - PATCH /sessions/7237f86d-10da-4034-a354-e4bb715f93cf/title → 200 (3959.72ms)
2025-08-15 23:49:38.385 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 23:49:38.385 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 23:49:39.996 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 23:49:39.996 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 23:49:41.923 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3537.25ms)
2025-08-15 23:49:41.923 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3537.25ms)
2025-08-15 23:49:57.233 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: 07a502b0-d762-41b3-b26b-d7e51247ba41
Text: Dinesh  Thumma  9393519918  |  dineshthumma15@gmail.com
|Github|Leetcode|Codechef  PROFESSIONAL  SUMMARY   An  undergraduate
in  Artificial  Intelligence  and  Data  Science  with  a  focus  on
front-end  engineering.  Passionate   about   building   responsive,
user-centric   interfaces   and   delivering   smooth,   accessible
web   ex...
Score:  0.549

2025-08-15 23:49:57.233 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: 07a502b0-d762-41b3-b26b-d7e51247ba41
Text: Dinesh  Thumma  9393519918  |  dineshthumma15@gmail.com
|Github|Leetcode|Codechef  PROFESSIONAL  SUMMARY   An  undergraduate
in  Artificial  Intelligence  and  Data  Science  with  a  focus  on
front-end  engineering.  Passionate   about   building   responsive,
user-centric   interfaces   and   delivering   smooth,   accessible
web   ex...
Score:  0.549

2025-08-15 23:49:57.233 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-15 23:49:57.233 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-15 23:50:05.821 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-15 23:50:05.821 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-15 23:50:05.822 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.0ms)
2025-08-15 23:50:05.822 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.0ms)
2025-08-15 23:50:06.130 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-15 23:50:06.130 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-15 23:50:09.117 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2987.34ms)
2025-08-15 23:50:09.117 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2987.34ms)
2025-08-15 23:50:32.094 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-15 23:50:32.094 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-15 23:50:32.095 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (0.99ms)
2025-08-15 23:50:32.095 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (0.99ms)
2025-08-15 23:50:32.101 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-15 23:50:32.101 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-15 23:50:36.688 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (4587.24ms)
2025-08-15 23:50:36.688 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (4587.24ms)
2025-08-15 23:50:36.731 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 23:50:36.731 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 23:50:38.237 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['Luffy Naruto Rag.pdf']
2025-08-15 23:50:38.237 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['Luffy Naruto Rag.pdf']
2025-08-15 23:50:41.441 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4709.79ms)
2025-08-15 23:50:41.441 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4709.79ms)
2025-08-15 23:50:49.043 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/0b3c9dd2-6054-4c5c-aa30-6b2e6b32f2ba/title
2025-08-15 23:50:49.043 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/0b3c9dd2-6054-4c5c-aa30-6b2e6b32f2ba/title
2025-08-15 23:50:49.045 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/0b3c9dd2-6054-4c5c-aa30-6b2e6b32f2ba/title → 200 (2.01ms)
2025-08-15 23:50:49.045 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/0b3c9dd2-6054-4c5c-aa30-6b2e6b32f2ba/title → 200 (2.01ms)
2025-08-15 23:50:49.357 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/0b3c9dd2-6054-4c5c-aa30-6b2e6b32f2ba/title
2025-08-15 23:50:49.357 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/0b3c9dd2-6054-4c5c-aa30-6b2e6b32f2ba/title
2025-08-15 23:50:53.119 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 0b3c9dd2-6054-4c5c-aa30-6b2e6b32f2ba: Story Inquiry and Description Request
2025-08-15 23:50:53.119 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 0b3c9dd2-6054-4c5c-aa30-6b2e6b32f2ba: Story Inquiry and Description Request
2025-08-15 23:50:53.441 | INFO     | src.main:log_requests:54 - PATCH /sessions/0b3c9dd2-6054-4c5c-aa30-6b2e6b32f2ba/title → 200 (4084.64ms)
2025-08-15 23:50:53.441 | INFO     | src.main:log_requests:54 - PATCH /sessions/0b3c9dd2-6054-4c5c-aa30-6b2e6b32f2ba/title → 200 (4084.64ms)
2025-08-15 23:50:57.167 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 23:50:57.167 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-15 23:50:58.725 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 23:50:58.725 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-15 23:51:00.482 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3315.38ms)
2025-08-15 23:51:00.482 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3315.38ms)
2025-08-15 23:51:15.193 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: cbe72588-7a13-4d32-bb6c-2ac606274f0b
Text: •  •  2
Score:  0.533

2025-08-15 23:51:15.193 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: cbe72588-7a13-4d32-bb6c-2ac606274f0b
Text: •  •  2
Score:  0.533

2025-08-15 23:51:15.196 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-15 23:51:15.196 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-15 23:51:18.908 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-15 23:51:18.908 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-15 23:51:21.597 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2689.79ms)
2025-08-15 23:51:21.597 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2689.79ms)
2025-08-15 23:53:16.102 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-15 23:53:16.102 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-15 23:53:35.677 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-15 23:53:53.568 | INFO     | src.main:<module>:20 - Server started
2025-08-15 23:53:53.568 | INFO     | src.main:<module>:20 - Server started
2025-08-15 23:53:53.597 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-15 23:53:53.597 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-15 23:54:00.791 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-15 23:54:00.791 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-15 23:54:00.799 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-15 23:54:00.799 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-15 23:54:00.800 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (0.91ms)
2025-08-15 23:54:00.800 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (0.91ms)
2025-08-15 23:54:01.114 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-15 23:54:01.114 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-15 23:58:05.178 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-15 23:58:21.571 | INFO     | src.main:<module>:20 - Server started
2025-08-15 23:58:21.571 | INFO     | src.main:<module>:20 - Server started
2025-08-15 23:58:21.599 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-15 23:58:21.599 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-15 23:58:28.477 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-15 23:58:28.477 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-15 23:58:36.413 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-15 23:58:36.413 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-15 23:58:36.413 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.01ms)
2025-08-15 23:58:36.413 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.01ms)
2025-08-15 23:58:36.719 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-15 23:58:36.719 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 00:02:09.086 | INFO     | src.main:log_requests:54 - POST /rag/git → 200 (212366.92ms)
2025-08-16 00:02:09.086 | INFO     | src.main:log_requests:54 - POST /rag/git → 200 (212366.92ms)
2025-08-16 00:02:33.538 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 00:02:33.538 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 00:02:33.540 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.31ms)
2025-08-16 00:02:33.540 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.31ms)
2025-08-16 00:02:33.543 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 00:02:33.543 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 00:02:35.108 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-16 00:02:35.108 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-16 00:02:39.150 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (5606.63ms)
2025-08-16 00:02:39.150 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (5606.63ms)
2025-08-16 00:02:47.283 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: 2d54d819-d110-4e97-b48b-841e4c8f5d9b
Text: # 🧠 CentralGPT  **One Nexus Point to access and chat with
multiple LLM providers — Mistral, Ollama, Groq, TogetherAI.-With
GitHub and RAG Integration For Context  Relevant Answers**   Supports
memory, chat history, and persistent messages.  ---  ## 🛠 Tech Stack
| Layer         | Tech                                 |
|---------------|----------...
Score:  0.349

2025-08-16 00:02:47.283 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: 2d54d819-d110-4e97-b48b-841e4c8f5d9b
Text: # 🧠 CentralGPT  **One Nexus Point to access and chat with
multiple LLM providers — Mistral, Ollama, Groq, TogetherAI.-With
GitHub and RAG Integration For Context  Relevant Answers**   Supports
memory, chat history, and persistent messages.  ---  ## 🛠 Tech Stack
| Layer         | Tech                                 |
|---------------|----------...
Score:  0.349

2025-08-16 00:02:47.285 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['path', 'size'])
2025-08-16 00:02:47.285 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['path', 'size'])
2025-08-16 00:02:50.383 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/67d05fe1-8c4a-46e2-b94d-130797875043/title
2025-08-16 00:02:50.383 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/67d05fe1-8c4a-46e2-b94d-130797875043/title
2025-08-16 00:02:50.385 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/67d05fe1-8c4a-46e2-b94d-130797875043/title → 200 (1.99ms)
2025-08-16 00:02:50.385 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/67d05fe1-8c4a-46e2-b94d-130797875043/title → 200 (1.99ms)
2025-08-16 00:02:50.695 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/67d05fe1-8c4a-46e2-b94d-130797875043/title
2025-08-16 00:02:50.695 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/67d05fe1-8c4a-46e2-b94d-130797875043/title
2025-08-16 00:02:54.359 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 67d05fe1-8c4a-46e2-b94d-130797875043: Learning from Codebase
2025-08-16 00:02:54.359 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 67d05fe1-8c4a-46e2-b94d-130797875043: Learning from Codebase
2025-08-16 00:02:54.618 | INFO     | src.main:log_requests:54 - PATCH /sessions/67d05fe1-8c4a-46e2-b94d-130797875043/title → 200 (3922.77ms)
2025-08-16 00:02:54.618 | INFO     | src.main:log_requests:54 - PATCH /sessions/67d05fe1-8c4a-46e2-b94d-130797875043/title → 200 (3922.77ms)
2025-08-16 00:03:02.788 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 00:03:02.788 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 00:03:04.093 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-16 00:03:04.093 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-16 00:03:06.152 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3363.99ms)
2025-08-16 00:03:06.152 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3363.99ms)
2025-08-16 00:03:13.395 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: 3cba1ca0-b484-469f-b3d5-2ee5bbf336d2
Text: // src/routes/PublicRoute.tsx import {Navigate} from "react-
router-dom"; import type {JSX} from "react"; import useAuthStore from
"../store/authStore.ts";  export default function
PublicRoute({children}: { children: JSX.Element }) {     const token =
useAuthStore.getState().accessToken      return token ? <Navigate
to="/app"/> : children; }
Score:  0.352

2025-08-16 00:03:13.395 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: 3cba1ca0-b484-469f-b3d5-2ee5bbf336d2
Text: // src/routes/PublicRoute.tsx import {Navigate} from "react-
router-dom"; import type {JSX} from "react"; import useAuthStore from
"../store/authStore.ts";  export default function
PublicRoute({children}: { children: JSX.Element }) {     const token =
useAuthStore.getState().accessToken      return token ? <Navigate
to="/app"/> : children; }
Score:  0.352

2025-08-16 00:03:13.396 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 00:03:13.396 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 00:03:35.151 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 00:03:35.151 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 00:03:37.822 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-16 00:03:37.822 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-16 00:03:39.381 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4229.9ms)
2025-08-16 00:03:39.381 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4229.9ms)
2025-08-16 00:03:50.891 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: 228aed40-6d01-4ea6-bfc0-d946869c7a41
Text: visibilityIcon.off : visibilityIcon.on}
</VisibilityTrigger>       }       {...rootProps}     >       <Input
{...rest}         ref={mergeRefs(ref, inputRef)}         type={visible
? "text" : "password"}       />     </InputGroup>   ) })  const
VisibilityTrigger = React.forwardRef<HTMLButtonElement, ButtonProps>(
function Visibi...
Score:  0.398

2025-08-16 00:03:50.891 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: 228aed40-6d01-4ea6-bfc0-d946869c7a41
Text: visibilityIcon.off : visibilityIcon.on}
</VisibilityTrigger>       }       {...rootProps}     >       <Input
{...rest}         ref={mergeRefs(ref, inputRef)}         type={visible
? "text" : "password"}       />     </InputGroup>   ) })  const
VisibilityTrigger = React.forwardRef<HTMLButtonElement, ButtonProps>(
function Visibi...
Score:  0.398

2025-08-16 00:03:50.892 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 00:03:50.892 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 00:04:26.280 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 00:04:26.280 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 00:04:28.947 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-16 00:04:28.947 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-16 00:04:30.384 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4104.25ms)
2025-08-16 00:04:30.384 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4104.25ms)
2025-08-16 00:11:08.913 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 00:11:28.119 | INFO     | src.main:<module>:20 - Server started
2025-08-16 00:11:28.119 | INFO     | src.main:<module>:20 - Server started
2025-08-16 00:11:28.146 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 00:11:28.146 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 00:11:35.569 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 00:11:35.569 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 00:11:40.764 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 00:11:40.764 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 00:11:40.764 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (0.0ms)
2025-08-16 00:11:40.764 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (0.0ms)
2025-08-16 00:11:41.069 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 00:11:41.069 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 00:11:43.883 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2813.93ms)
2025-08-16 00:11:43.883 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2813.93ms)
2025-08-16 00:13:07.671 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 00:13:07.671 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 00:13:07.672 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.0ms)
2025-08-16 00:13:07.672 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.0ms)
2025-08-16 00:13:07.998 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 00:13:07.998 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 00:13:21.833 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (13835.1ms)
2025-08-16 00:13:21.833 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (13835.1ms)
2025-08-16 00:13:21.924 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 00:13:21.924 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 00:13:21.925 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.0ms)
2025-08-16 00:13:21.925 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.0ms)
2025-08-16 00:13:21.926 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 00:13:21.926 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 00:13:23.566 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaResume.pdf']
2025-08-16 00:13:23.566 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaResume.pdf']
2025-08-16 00:13:25.519 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3593.18ms)
2025-08-16 00:13:25.519 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3593.18ms)
2025-08-16 00:13:34.771 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/f5655040-e4f9-4f38-846a-e40644f7bf9a/title
2025-08-16 00:13:34.771 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/f5655040-e4f9-4f38-846a-e40644f7bf9a/title
2025-08-16 00:13:34.773 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/f5655040-e4f9-4f38-846a-e40644f7bf9a/title → 200 (2.0ms)
2025-08-16 00:13:34.773 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/f5655040-e4f9-4f38-846a-e40644f7bf9a/title → 200 (2.0ms)
2025-08-16 00:13:34.779 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/f5655040-e4f9-4f38-846a-e40644f7bf9a/title
2025-08-16 00:13:34.779 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/f5655040-e4f9-4f38-846a-e40644f7bf9a/title
2025-08-16 00:13:38.389 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session f5655040-e4f9-4f38-846a-e40644f7bf9a: Title: Reading From Given Sources
2025-08-16 00:13:38.389 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session f5655040-e4f9-4f38-846a-e40644f7bf9a: Title: Reading From Given Sources
2025-08-16 00:13:38.706 | INFO     | src.main:log_requests:54 - PATCH /sessions/f5655040-e4f9-4f38-846a-e40644f7bf9a/title → 200 (3927.13ms)
2025-08-16 00:13:38.706 | INFO     | src.main:log_requests:54 - PATCH /sessions/f5655040-e4f9-4f38-846a-e40644f7bf9a/title → 200 (3927.13ms)
2025-08-16 00:13:45.927 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 00:13:45.927 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 00:13:47.567 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-16 00:13:47.567 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-16 00:13:49.310 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3383.66ms)
2025-08-16 00:13:49.310 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3383.66ms)
2025-08-16 00:13:57.216 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: a764c607-b4c3-4bda-b4de-51538203421a
Text: Dinesh  Thumma  9393519918  |  dineshthumma15@gmail.com
|Github|Leetcode|Codechef  PROFESSIONAL  SUMMARY  An  undergraduate
specializing  in  Artificial  Intelligence  and  Data  Science,  with
a  primary  focus  on  backend  systems   and   applied   generative
AI.   Seeking   to   contribute   to   real-world   projects   and
collabora...
Score:  0.528

2025-08-16 00:13:57.216 | INFO     | src.router.messages:stream_response:54 - Sending Source nodes : Node ID: a764c607-b4c3-4bda-b4de-51538203421a
Text: Dinesh  Thumma  9393519918  |  dineshthumma15@gmail.com
|Github|Leetcode|Codechef  PROFESSIONAL  SUMMARY  An  undergraduate
specializing  in  Artificial  Intelligence  and  Data  Science,  with
a  primary  focus  on  backend  systems   and   applied   generative
AI.   Seeking   to   contribute   to   real-world   projects   and
collabora...
Score:  0.528

2025-08-16 00:13:57.217 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-16 00:13:57.217 | INFO     | src.router.messages:stream_response:55 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-16 00:14:16.824 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 00:14:16.824 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 00:14:21.691 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (4866.85ms)
2025-08-16 00:14:21.691 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (4866.85ms)
2025-08-16 10:10:19.889 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 10:10:36.402 | INFO     | src.main:<module>:20 - Server started
2025-08-16 10:10:36.402 | INFO     | src.main:<module>:20 - Server started
2025-08-16 10:10:36.432 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 10:10:36.432 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 10:10:42.301 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 10:10:42.301 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 10:11:22.913 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-16 10:11:22.913 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-16 10:11:24.912 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-16 10:11:24.912 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-16 10:11:24.915 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (2002.65ms)
2025-08-16 10:11:24.915 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (2002.65ms)
2025-08-16 10:11:25.265 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 10:11:25.265 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 10:11:25.267 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (2.01ms)
2025-08-16 10:11:25.267 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (2.01ms)
2025-08-16 10:11:25.272 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 10:11:25.272 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 10:11:28.364 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (3091.26ms)
2025-08-16 10:11:28.364 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (3091.26ms)
2025-08-16 10:11:29.380 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 10:11:29.380 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 10:11:29.381 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 10:11:29.381 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 10:11:29.382 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.0ms)
2025-08-16 10:11:29.382 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.0ms)
2025-08-16 10:11:29.384 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.01ms)
2025-08-16 10:11:29.384 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.01ms)
2025-08-16 10:11:29.387 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 10:11:29.387 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 10:11:33.173 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (3786.1ms)
2025-08-16 10:11:33.173 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (3786.1ms)
2025-08-16 10:11:33.180 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 10:11:33.180 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 10:11:35.489 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2308.16ms)
2025-08-16 10:11:35.489 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2308.16ms)
2025-08-16 10:11:43.915 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-16 10:11:43.915 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-16 10:11:43.916 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (1.0ms)
2025-08-16 10:11:43.916 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (1.0ms)
2025-08-16 10:11:44.222 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-16 10:11:44.222 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-16 10:11:46.226 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (2004.16ms)
2025-08-16 10:11:46.226 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (2004.16ms)
2025-08-16 10:11:47.129 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-16 10:11:47.129 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-16 10:11:49.412 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (2283.47ms)
2025-08-16 10:11:49.412 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (2283.47ms)
2025-08-16 10:11:50.368 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-16 10:11:50.368 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-16 10:11:50.370 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (1.64ms)
2025-08-16 10:11:50.370 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (1.64ms)
2025-08-16 10:11:50.372 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-16 10:11:50.372 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-16 10:11:52.093 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1720.27ms)
2025-08-16 10:11:52.093 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1720.27ms)
2025-08-16 10:12:02.991 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 10:12:02.991 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 10:12:02.993 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (2.0ms)
2025-08-16 10:12:02.993 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (2.0ms)
2025-08-16 10:12:03.304 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 10:12:03.304 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 10:12:20.765 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (17461.17ms)
2025-08-16 10:12:20.765 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (17461.17ms)
2025-08-16 10:12:21.110 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 10:12:21.110 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 10:12:21.112 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (2.0ms)
2025-08-16 10:12:21.112 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (2.0ms)
2025-08-16 10:12:21.116 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 10:12:21.116 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 10:12:22.228 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaResume.pdf']
2025-08-16 10:12:22.228 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaResume.pdf']
2025-08-16 10:12:27.051 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (5934.71ms)
2025-08-16 10:12:27.051 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (5934.71ms)
2025-08-16 10:12:34.345 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/8b654213-496e-4e7e-a066-d7a5528903d6/title
2025-08-16 10:12:34.345 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/8b654213-496e-4e7e-a066-d7a5528903d6/title
2025-08-16 10:12:34.346 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/8b654213-496e-4e7e-a066-d7a5528903d6/title → 200 (1.0ms)
2025-08-16 10:12:34.346 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/8b654213-496e-4e7e-a066-d7a5528903d6/title → 200 (1.0ms)
2025-08-16 10:12:34.655 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/8b654213-496e-4e7e-a066-d7a5528903d6/title
2025-08-16 10:12:34.655 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/8b654213-496e-4e7e-a066-d7a5528903d6/title
2025-08-16 10:12:39.565 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 8b654213-496e-4e7e-a066-d7a5528903d6: Resume Explanation and Analysis Request 
is too long. 
A more suitable title would be 
Resume Explanation Requested
2025-08-16 10:12:39.565 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 8b654213-496e-4e7e-a066-d7a5528903d6: Resume Explanation and Analysis Request 
is too long. 
A more suitable title would be 
Resume Explanation Requested
2025-08-16 10:12:39.836 | INFO     | src.main:log_requests:54 - PATCH /sessions/8b654213-496e-4e7e-a066-d7a5528903d6/title → 200 (5181.51ms)
2025-08-16 10:12:39.836 | INFO     | src.main:log_requests:54 - PATCH /sessions/8b654213-496e-4e7e-a066-d7a5528903d6/title → 200 (5181.51ms)
2025-08-16 10:13:34.240 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 10:13:34.240 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 10:13:35.938 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-16 10:13:35.938 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-16 10:13:38.795 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4554.73ms)
2025-08-16 10:13:38.795 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4554.73ms)
2025-08-16 10:13:38.799 | ERROR    | src.router.messages:stream_response:78 - Streaming error: 'coroutine' object has no attribute 'retrieve'
2025-08-16 10:13:38.799 | ERROR    | src.router.messages:stream_response:78 - Streaming error: 'coroutine' object has no attribute 'retrieve'
2025-08-16 10:16:23.065 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 10:16:23.065 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 10:16:45.530 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 10:16:59.952 | INFO     | src.main:<module>:20 - Server started
2025-08-16 10:16:59.952 | INFO     | src.main:<module>:20 - Server started
2025-08-16 10:16:59.974 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 10:16:59.974 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 10:17:06.196 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 10:17:06.196 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 10:17:06.209 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 10:17:06.209 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 10:17:08.663 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2453.89ms)
2025-08-16 10:17:08.663 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2453.89ms)
2025-08-16 10:17:58.759 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 10:17:58.759 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 10:18:24.589 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (25829.56ms)
2025-08-16 10:18:24.589 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (25829.56ms)
2025-08-16 10:18:24.985 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 10:18:24.985 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 10:18:26.194 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaFrontend.pdf']
2025-08-16 10:18:26.194 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaFrontend.pdf']
2025-08-16 10:18:27.890 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2905.41ms)
2025-08-16 10:18:27.890 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2905.41ms)
2025-08-16 10:18:34.307 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/308a81b7-17f3-4905-8d01-5f6895666770/title
2025-08-16 10:18:34.307 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/308a81b7-17f3-4905-8d01-5f6895666770/title
2025-08-16 10:18:34.308 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/308a81b7-17f3-4905-8d01-5f6895666770/title → 200 (1.0ms)
2025-08-16 10:18:34.308 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/308a81b7-17f3-4905-8d01-5f6895666770/title → 200 (1.0ms)
2025-08-16 10:18:34.314 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/308a81b7-17f3-4905-8d01-5f6895666770/title
2025-08-16 10:18:34.314 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/308a81b7-17f3-4905-8d01-5f6895666770/title
2025-08-16 10:18:41.896 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 308a81b7-17f3-4905-8d01-5f6895666770: Resume Review and Feedback Discussion
2025-08-16 10:18:41.896 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 308a81b7-17f3-4905-8d01-5f6895666770: Resume Review and Feedback Discussion
2025-08-16 10:18:42.167 | INFO     | src.main:log_requests:54 - PATCH /sessions/308a81b7-17f3-4905-8d01-5f6895666770/title → 200 (7852.07ms)
2025-08-16 10:18:42.167 | INFO     | src.main:log_requests:54 - PATCH /sessions/308a81b7-17f3-4905-8d01-5f6895666770/title → 200 (7852.07ms)
2025-08-16 10:18:47.811 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 10:18:47.811 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 10:18:48.906 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-16 10:18:48.906 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:[]
2025-08-16 10:18:48.907 | ERROR    | src.router.messages:message_stream:160 - Streaming setup error: a bytes-like object is required, not 'coroutine'
2025-08-16 10:18:48.907 | ERROR    | src.router.messages:message_stream:160 - Streaming setup error: a bytes-like object is required, not 'coroutine'
2025-08-16 10:18:49.118 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 500 (1307.17ms)
2025-08-16 10:18:49.118 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 500 (1307.17ms)
2025-08-16 10:22:19.990 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 10:22:19.990 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 10:22:41.496 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 10:23:03.326 | INFO     | src.main:<module>:20 - Server started
2025-08-16 10:23:03.326 | INFO     | src.main:<module>:20 - Server started
2025-08-16 10:23:03.350 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 10:23:03.350 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 10:23:10.395 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 10:23:10.395 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 10:23:10.404 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 10:23:10.404 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 10:23:10.404 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (0.66ms)
2025-08-16 10:23:10.404 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (0.66ms)
2025-08-16 10:23:10.720 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 10:23:10.720 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 10:23:13.243 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2522.39ms)
2025-08-16 10:23:13.243 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2522.39ms)
2025-08-16 10:23:56.009 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 10:23:56.009 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 10:23:56.011 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (2.06ms)
2025-08-16 10:23:56.011 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (2.06ms)
2025-08-16 10:23:56.017 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 10:23:56.017 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 10:25:23.495 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 10:25:23.495 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 10:25:41.839 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 10:26:13.851 | INFO     | src.main:<module>:20 - Server started
2025-08-16 10:26:13.851 | INFO     | src.main:<module>:20 - Server started
2025-08-16 10:26:13.877 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 10:26:13.877 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 10:26:24.450 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 10:26:24.450 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 10:28:25.909 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 10:28:25.909 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 10:28:42.661 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (16752.41ms)
2025-08-16 10:28:42.661 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (16752.41ms)
2025-08-16 10:28:43.003 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 10:28:43.003 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 10:28:43.004 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.0ms)
2025-08-16 10:28:43.004 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.0ms)
2025-08-16 10:28:43.011 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 10:28:43.011 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 10:28:44.329 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaResume.pdf']
2025-08-16 10:28:44.329 | INFO     | src.router.messages:message_stream:106 - Recived files in backend:['DineshThummaResume.pdf']
2025-08-16 10:28:44.631 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (1620.15ms)
2025-08-16 10:28:44.631 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (1620.15ms)
2025-08-16 10:47:20.919 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 10:47:20.919 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 10:47:41.422 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 10:48:12.767 | INFO     | src.main:<module>:20 - Server started
2025-08-16 10:48:12.767 | INFO     | src.main:<module>:20 - Server started
2025-08-16 10:48:12.795 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 10:48:12.795 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 10:48:24.291 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 10:48:24.291 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 10:49:39.086 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 10:49:39.086 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 10:50:00.166 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 10:50:25.885 | INFO     | src.main:<module>:20 - Server started
2025-08-16 10:50:25.885 | INFO     | src.main:<module>:20 - Server started
2025-08-16 10:50:25.921 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 10:50:25.921 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 10:50:32.851 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 10:50:32.851 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 10:50:32.865 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 10:50:32.865 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 10:50:32.867 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.8ms)
2025-08-16 10:50:32.867 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.8ms)
2025-08-16 10:50:33.176 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 10:50:33.176 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 10:50:35.704 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2527.96ms)
2025-08-16 10:50:35.704 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2527.96ms)
2025-08-16 10:51:11.749 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 10:51:11.749 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 10:51:32.069 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 10:51:52.658 | INFO     | src.main:<module>:20 - Server started
2025-08-16 10:51:52.658 | INFO     | src.main:<module>:20 - Server started
2025-08-16 10:51:52.694 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 10:51:52.694 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 10:51:58.077 | ERROR    | src.main:lifespan:83 - Database init error: (psycopg2.OperationalError) connection to server at "ep-shy-queen-a8t044kf-pooler.eastus2.azure.neon.tech" (52.167.188.143), port 5432 failed: timeout expired

(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-08-16 10:51:58.077 | ERROR    | src.main:lifespan:83 - Database init error: (psycopg2.OperationalError) connection to server at "ep-shy-queen-a8t044kf-pooler.eastus2.azure.neon.tech" (52.167.188.143), port 5432 failed: timeout expired

(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-08-16 10:52:14.518 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 10:52:14.518 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 10:52:34.644 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 10:53:00.732 | INFO     | src.main:<module>:20 - Server started
2025-08-16 10:53:00.732 | INFO     | src.main:<module>:20 - Server started
2025-08-16 10:53:00.756 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 10:53:00.756 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 10:53:09.006 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 10:53:09.006 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 10:53:49.081 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 10:53:49.081 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 10:53:49.082 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.87ms)
2025-08-16 10:53:49.082 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.87ms)
2025-08-16 10:53:49.392 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 10:53:49.392 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 11:49:16.345 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 11:49:16.345 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 11:49:40.291 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 11:50:01.266 | INFO     | src.main:<module>:20 - Server started
2025-08-16 11:50:01.266 | INFO     | src.main:<module>:20 - Server started
2025-08-16 11:50:01.301 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 11:50:01.301 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 11:50:08.701 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 11:50:08.701 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 15:40:38.404 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 15:41:14.563 | INFO     | src.main:<module>:20 - Server started
2025-08-16 15:41:14.563 | INFO     | src.main:<module>:20 - Server started
2025-08-16 15:41:14.583 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 15:41:14.583 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 15:41:27.824 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 15:41:27.824 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 15:44:24.930 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 15:44:24.930 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 15:44:47.953 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 15:45:21.361 | INFO     | src.main:<module>:20 - Server started
2025-08-16 15:45:21.361 | INFO     | src.main:<module>:20 - Server started
2025-08-16 15:45:21.377 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 15:45:21.377 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 15:45:31.056 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 15:45:31.056 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 15:45:31.072 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-16 15:45:31.072 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-16 15:45:33.559 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-16 15:45:33.559 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-16 15:45:33.560 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (2487.3ms)
2025-08-16 15:45:33.560 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (2487.3ms)
2025-08-16 15:45:33.922 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 15:45:33.922 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 15:45:33.924 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (2.05ms)
2025-08-16 15:45:33.924 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (2.05ms)
2025-08-16 15:45:33.927 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 15:45:33.927 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 15:45:37.644 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (3717.34ms)
2025-08-16 15:45:37.644 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (3717.34ms)
2025-08-16 15:45:39.671 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 15:45:39.671 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 15:45:39.671 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (0.52ms)
2025-08-16 15:45:39.671 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (0.52ms)
2025-08-16 15:45:39.675 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 15:45:39.675 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 15:45:39.676 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 15:45:39.676 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 15:45:39.678 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (1.55ms)
2025-08-16 15:45:39.678 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (1.55ms)
2025-08-16 15:45:42.009 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2334.01ms)
2025-08-16 15:45:42.009 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2334.01ms)
2025-08-16 15:45:42.014 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 15:45:42.014 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 15:45:44.537 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2522.78ms)
2025-08-16 15:45:44.537 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2522.78ms)
2025-08-16 15:46:17.590 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-16 15:46:17.590 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-16 15:46:17.591 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (1.0ms)
2025-08-16 15:46:17.591 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (1.0ms)
2025-08-16 15:46:17.900 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-16 15:46:17.900 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-16 15:46:20.730 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-16 15:46:20.730 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-16 15:46:20.731 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (1.0ms)
2025-08-16 15:46:20.731 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (1.0ms)
2025-08-16 15:46:20.733 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (2833.3ms)
2025-08-16 15:46:20.733 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (2833.3ms)
2025-08-16 15:46:20.734 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-16 15:46:20.734 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-16 15:46:23.556 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (2821.46ms)
2025-08-16 15:46:23.556 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (2821.46ms)
2025-08-16 15:46:29.154 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 15:46:29.154 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 15:46:29.156 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.56ms)
2025-08-16 15:46:29.156 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.56ms)
2025-08-16 15:46:29.468 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 15:46:29.468 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 16:42:04.691 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 16:42:04.691 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 16:42:30.089 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 16:42:50.479 | INFO     | src.main:<module>:20 - Server started
2025-08-16 16:42:50.479 | INFO     | src.main:<module>:20 - Server started
2025-08-16 16:42:50.511 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 16:42:50.511 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 16:43:00.753 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 16:43:00.753 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 16:43:50.240 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 16:43:50.240 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 16:44:11.200 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 16:44:32.507 | INFO     | src.main:<module>:20 - Server started
2025-08-16 16:44:32.507 | INFO     | src.main:<module>:20 - Server started
2025-08-16 16:44:32.535 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 16:44:32.535 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 16:44:37.865 | ERROR    | src.main:lifespan:83 - Database init error: (psycopg2.OperationalError) connection to server at "ep-shy-queen-a8t044kf-pooler.eastus2.azure.neon.tech" (52.167.188.143), port 5432 failed: timeout expired

(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-08-16 16:44:37.865 | ERROR    | src.main:lifespan:83 - Database init error: (psycopg2.OperationalError) connection to server at "ep-shy-queen-a8t044kf-pooler.eastus2.azure.neon.tech" (52.167.188.143), port 5432 failed: timeout expired

(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-08-16 16:46:26.631 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 16:46:26.631 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 16:46:50.051 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 16:47:18.268 | INFO     | src.main:<module>:20 - Server started
2025-08-16 16:47:18.268 | INFO     | src.main:<module>:20 - Server started
2025-08-16 16:47:18.302 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 16:47:18.302 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 16:47:25.572 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 16:47:25.572 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 16:47:46.388 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 16:48:06.685 | INFO     | src.main:<module>:20 - Server started
2025-08-16 16:48:06.685 | INFO     | src.main:<module>:20 - Server started
2025-08-16 16:48:06.697 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 16:48:06.697 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 16:48:14.529 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 16:48:14.529 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 16:50:15.300 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 16:50:15.300 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 16:50:38.168 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 16:50:58.164 | INFO     | src.main:<module>:20 - Server started
2025-08-16 16:50:58.164 | INFO     | src.main:<module>:20 - Server started
2025-08-16 16:50:58.188 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 16:50:58.188 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 16:51:07.611 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 16:51:07.611 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 16:58:12.201 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 16:58:12.201 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 16:58:30.925 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 16:59:21.940 | INFO     | src.main:<module>:20 - Server started
2025-08-16 16:59:21.940 | INFO     | src.main:<module>:20 - Server started
2025-08-16 16:59:21.963 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 16:59:21.963 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 16:59:32.595 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 16:59:32.595 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 16:59:32.603 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 16:59:32.603 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 16:59:32.603 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 16:59:32.603 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 16:59:32.603 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 16:59:32.603 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 16:59:32.605 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (2.22ms)
2025-08-16 16:59:32.605 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (2.22ms)
2025-08-16 16:59:32.605 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.22ms)
2025-08-16 16:59:32.605 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.22ms)
2025-08-16 16:59:32.606 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (3.32ms)
2025-08-16 16:59:32.606 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (3.32ms)
2025-08-16 16:59:32.920 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 16:59:32.920 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 16:59:32.923 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 16:59:32.923 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 16:59:42.838 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (9915.47ms)
2025-08-16 16:59:42.838 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (9915.47ms)
2025-08-16 16:59:42.839 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (9918.48ms)
2025-08-16 16:59:42.839 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (9918.48ms)
2025-08-16 16:59:42.843 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 16:59:42.843 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 16:59:45.641 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2798.05ms)
2025-08-16 16:59:45.641 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2798.05ms)
2025-08-16 17:00:08.400 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 17:00:08.400 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 17:00:08.401 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.0ms)
2025-08-16 17:00:08.401 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.0ms)
2025-08-16 17:00:08.405 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:00:08.405 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:00:09.980 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 17:00:09.980 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 17:00:14.707 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (6301.63ms)
2025-08-16 17:00:14.707 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (6301.63ms)
2025-08-16 17:00:25.473 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/19dd0394-c42c-4b0d-b603-9bacf6aa5673/title
2025-08-16 17:00:25.473 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/19dd0394-c42c-4b0d-b603-9bacf6aa5673/title
2025-08-16 17:00:25.475 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/19dd0394-c42c-4b0d-b603-9bacf6aa5673/title → 200 (2.06ms)
2025-08-16 17:00:25.475 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/19dd0394-c42c-4b0d-b603-9bacf6aa5673/title → 200 (2.06ms)
2025-08-16 17:00:25.790 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/19dd0394-c42c-4b0d-b603-9bacf6aa5673/title
2025-08-16 17:00:25.790 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/19dd0394-c42c-4b0d-b603-9bacf6aa5673/title
2025-08-16 17:00:28.855 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 19dd0394-c42c-4b0d-b603-9bacf6aa5673: Current Day of the Week
2025-08-16 17:00:28.855 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 19dd0394-c42c-4b0d-b603-9bacf6aa5673: Current Day of the Week
2025-08-16 17:00:29.175 | INFO     | src.main:log_requests:54 - PATCH /sessions/19dd0394-c42c-4b0d-b603-9bacf6aa5673/title → 200 (3385.76ms)
2025-08-16 17:00:29.175 | INFO     | src.main:log_requests:54 - PATCH /sessions/19dd0394-c42c-4b0d-b603-9bacf6aa5673/title → 200 (3385.76ms)
2025-08-16 17:00:45.855 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 17:00:45.855 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 17:00:45.855 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (0.51ms)
2025-08-16 17:00:45.855 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (0.51ms)
2025-08-16 17:00:45.863 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 17:00:45.863 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 17:01:07.546 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:01:07.546 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:01:26.353 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 17:01:47.722 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:01:47.722 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:01:47.745 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:01:47.745 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:01:56.511 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:01:56.511 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:01:56.519 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:01:56.519 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:01:59.240 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 17:01:59.240 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 17:02:00.472 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3952.96ms)
2025-08-16 17:02:00.472 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3952.96ms)
2025-08-16 17:02:14.517 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:02:14.517 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:02:19.330 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 17:02:19.330 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 17:02:19.587 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (5070.09ms)
2025-08-16 17:02:19.587 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (5070.09ms)
2025-08-16 17:02:34.971 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 17:02:34.971 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 17:03:50.277 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:03:50.277 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:04:05.138 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 17:04:26.916 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:04:26.916 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:04:26.929 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:04:26.929 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:04:37.041 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:04:37.041 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:04:44.654 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:04:44.654 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:05:04.981 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 17:05:30.385 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:05:30.385 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:05:30.416 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:05:30.416 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:05:38.261 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:05:38.261 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:05:38.272 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 17:05:38.272 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 17:05:49.663 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (11391.67ms)
2025-08-16 17:05:49.663 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (11391.67ms)
2025-08-16 17:05:50.142 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:05:50.142 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:05:51.448 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:['DineshThummaResume.pdf']
2025-08-16 17:05:51.448 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:['DineshThummaResume.pdf']
2025-08-16 17:05:51.698 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (1556.63ms)
2025-08-16 17:05:51.698 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (1556.63ms)
2025-08-16 17:06:31.645 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:06:31.645 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:06:35.164 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 17:06:35.164 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 17:06:37.369 | ERROR    | src.router.messages:message_stream:159 - Streaming setup error: 'QdrantVectorStore' object does not support item assignment
2025-08-16 17:06:37.369 | ERROR    | src.router.messages:message_stream:159 - Streaming setup error: 'QdrantVectorStore' object does not support item assignment
2025-08-16 17:06:37.841 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 500 (6195.78ms)
2025-08-16 17:06:37.841 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 500 (6195.78ms)
2025-08-16 17:06:39.380 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:06:39.380 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:06:41.318 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 17:06:41.318 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 17:06:41.798 | ERROR    | src.router.messages:message_stream:159 - Streaming setup error: 'QdrantVectorStore' object does not support item assignment
2025-08-16 17:06:41.798 | ERROR    | src.router.messages:message_stream:159 - Streaming setup error: 'QdrantVectorStore' object does not support item assignment
2025-08-16 17:06:42.148 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 500 (2767.41ms)
2025-08-16 17:06:42.148 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 500 (2767.41ms)
2025-08-16 17:08:33.663 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:08:33.663 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:08:47.791 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 17:09:12.673 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:09:12.673 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:09:12.691 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:09:12.691 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:09:20.496 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:09:20.496 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:09:37.059 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 17:10:13.558 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:10:13.558 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:10:13.581 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:10:13.581 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:10:24.924 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:10:24.924 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:10:24.934 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 17:10:24.934 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 17:10:24.935 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (0.9ms)
2025-08-16 17:10:24.935 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (0.9ms)
2025-08-16 17:10:25.249 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 17:10:25.249 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 17:10:28.885 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (3636.16ms)
2025-08-16 17:10:28.885 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (3636.16ms)
2025-08-16 17:10:51.998 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 17:10:51.998 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 17:10:51.999 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.51ms)
2025-08-16 17:10:51.999 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.51ms)
2025-08-16 17:10:52.002 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 17:10:52.002 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 17:11:06.418 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (14414.85ms)
2025-08-16 17:11:06.418 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (14414.85ms)
2025-08-16 17:11:06.776 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 17:11:06.776 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 17:11:06.798 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (21.95ms)
2025-08-16 17:11:06.798 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (21.95ms)
2025-08-16 17:11:06.803 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:11:06.803 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:11:08.409 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:['Fake Rag Story.pdf']
2025-08-16 17:11:08.409 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:['Fake Rag Story.pdf']
2025-08-16 17:11:10.311 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3508.78ms)
2025-08-16 17:11:10.311 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3508.78ms)
2025-08-16 17:11:29.202 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/bd455743-ebcc-44c7-9ba4-3aaf0eb02b4b/title
2025-08-16 17:11:29.202 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/bd455743-ebcc-44c7-9ba4-3aaf0eb02b4b/title
2025-08-16 17:11:29.203 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/bd455743-ebcc-44c7-9ba4-3aaf0eb02b4b/title → 200 (2.44ms)
2025-08-16 17:11:29.203 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/bd455743-ebcc-44c7-9ba4-3aaf0eb02b4b/title → 200 (2.44ms)
2025-08-16 17:11:29.518 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/bd455743-ebcc-44c7-9ba4-3aaf0eb02b4b/title
2025-08-16 17:11:29.518 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/bd455743-ebcc-44c7-9ba4-3aaf0eb02b4b/title
2025-08-16 17:11:33.128 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session bd455743-ebcc-44c7-9ba4-3aaf0eb02b4b: Story Meaning and Interpretation Discussion
2025-08-16 17:11:33.128 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session bd455743-ebcc-44c7-9ba4-3aaf0eb02b4b: Story Meaning and Interpretation Discussion
2025-08-16 17:11:33.378 | INFO     | src.main:log_requests:54 - PATCH /sessions/bd455743-ebcc-44c7-9ba4-3aaf0eb02b4b/title → 200 (3860.04ms)
2025-08-16 17:11:33.378 | INFO     | src.main:log_requests:54 - PATCH /sessions/bd455743-ebcc-44c7-9ba4-3aaf0eb02b4b/title → 200 (3860.04ms)
2025-08-16 17:11:39.538 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:11:39.538 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:11:40.780 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 17:11:40.780 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 17:11:42.361 | ERROR    | src.router.messages:message_stream:159 - Streaming setup error: One of nodes, objects, or index_struct must be provided.
2025-08-16 17:11:42.361 | ERROR    | src.router.messages:message_stream:159 - Streaming setup error: One of nodes, objects, or index_struct must be provided.
2025-08-16 17:11:42.697 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 500 (3158.95ms)
2025-08-16 17:11:42.697 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 500 (3158.95ms)
2025-08-16 17:12:11.918 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:12:11.918 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:12:17.866 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 17:12:17.866 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 17:12:26.511 | ERROR    | src.router.messages:message_stream:159 - Streaming setup error: One of nodes, objects, or index_struct must be provided.
2025-08-16 17:12:26.511 | ERROR    | src.router.messages:message_stream:159 - Streaming setup error: One of nodes, objects, or index_struct must be provided.
2025-08-16 17:12:26.753 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 500 (14834.9ms)
2025-08-16 17:12:26.753 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 500 (14834.9ms)
2025-08-16 17:16:16.653 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:16:16.653 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:16:33.264 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 17:17:12.638 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:17:12.638 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:17:12.673 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:17:12.673 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:17:20.497 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:17:20.497 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:17:42.275 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 17:18:12.130 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:18:12.130 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:18:12.166 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:18:12.166 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:18:19.402 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:18:19.402 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:20:11.583 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:20:11.583 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:20:31.305 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 17:21:07.453 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:21:07.453 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:21:07.483 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:21:07.483 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:21:18.642 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:21:18.642 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:21:46.471 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 17:22:14.151 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:22:14.151 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:22:14.182 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:22:14.182 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:22:26.207 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:22:26.207 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:22:26.226 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/bdeb1729-d07f-46b1-8a64-9125e12050fa
2025-08-16 17:22:26.226 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/bdeb1729-d07f-46b1-8a64-9125e12050fa
2025-08-16 17:22:26.228 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 17:22:26.228 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 17:22:26.231 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/bdeb1729-d07f-46b1-8a64-9125e12050fa → 200 (4.0ms)
2025-08-16 17:22:26.231 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/bdeb1729-d07f-46b1-8a64-9125e12050fa → 200 (4.0ms)
2025-08-16 17:22:26.232 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (4.05ms)
2025-08-16 17:22:26.232 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (4.05ms)
2025-08-16 17:22:26.542 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/bdeb1729-d07f-46b1-8a64-9125e12050fa
2025-08-16 17:22:26.542 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/bdeb1729-d07f-46b1-8a64-9125e12050fa
2025-08-16 17:22:26.545 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 17:22:26.545 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 17:22:28.353 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 17:22:28.353 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 17:22:38.388 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (11843.68ms)
2025-08-16 17:22:38.388 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (11843.68ms)
2025-08-16 17:22:59.531 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 17:22:59.531 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 17:22:59.533 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.5ms)
2025-08-16 17:22:59.533 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.5ms)
2025-08-16 17:22:59.537 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 17:22:59.537 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 17:23:22.423 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (22885.76ms)
2025-08-16 17:23:22.423 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (22885.76ms)
2025-08-16 17:23:22.504 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 17:23:22.504 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 17:23:22.506 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.54ms)
2025-08-16 17:23:22.506 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.54ms)
2025-08-16 17:23:22.510 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:23:22.510 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:23:26.266 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:['Luffy Naruto Crossover2.pdf', 'Luffy Naruto Rag.pdf']
2025-08-16 17:23:26.266 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:['Luffy Naruto Crossover2.pdf', 'Luffy Naruto Rag.pdf']
2025-08-16 17:23:30.103 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (7592.98ms)
2025-08-16 17:23:30.103 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (7592.98ms)
2025-08-16 17:23:41.421 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/a8d7b710-7826-4af9-8758-1f5cd6c8949e/title
2025-08-16 17:23:41.421 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/a8d7b710-7826-4af9-8758-1f5cd6c8949e/title
2025-08-16 17:23:41.423 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/a8d7b710-7826-4af9-8758-1f5cd6c8949e/title → 200 (1.95ms)
2025-08-16 17:23:41.423 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/a8d7b710-7826-4af9-8758-1f5cd6c8949e/title → 200 (1.95ms)
2025-08-16 17:23:41.732 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/a8d7b710-7826-4af9-8758-1f5cd6c8949e/title
2025-08-16 17:23:41.732 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/a8d7b710-7826-4af9-8758-1f5cd6c8949e/title
2025-08-16 17:23:44.439 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session a8d7b710-7826-4af9-8758-1f5cd6c8949e: Based on the initial message "Explain these stores" and considering the rules provided, the most suitable title would be concise and directly related to the content of the message. 

Given the options and the need to be within the 6-word limit, the title should directly reflect the main topic of explaining stores. 

Title: Explaining Various Types Of Stores
2025-08-16 17:23:44.439 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session a8d7b710-7826-4af9-8758-1f5cd6c8949e: Based on the initial message "Explain these stores" and considering the rules provided, the most suitable title would be concise and directly related to the content of the message. 

Given the options and the need to be within the 6-word limit, the title should directly reflect the main topic of explaining stores. 

Title: Explaining Various Types Of Stores
2025-08-16 17:23:44.690 | INFO     | src.main:log_requests:54 - PATCH /sessions/a8d7b710-7826-4af9-8758-1f5cd6c8949e/title → 200 (2958.69ms)
2025-08-16 17:23:44.690 | INFO     | src.main:log_requests:54 - PATCH /sessions/a8d7b710-7826-4af9-8758-1f5cd6c8949e/title → 200 (2958.69ms)
2025-08-16 17:23:47.681 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:23:47.681 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:23:50.415 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 17:23:50.415 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 17:23:50.417 | INFO     | src.router.messages:message_stream:126 - Loading index from vector store...
2025-08-16 17:23:50.417 | INFO     | src.router.messages:message_stream:126 - Loading index from vector store...
2025-08-16 17:24:04.201 | INFO     | src.router.messages:message_stream:145 - Engine rebuilt successfully from persisted index.
2025-08-16 17:24:04.201 | INFO     | src.router.messages:message_stream:145 - Engine rebuilt successfully from persisted index.
2025-08-16 17:24:04.568 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (16887.56ms)
2025-08-16 17:24:04.568 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (16887.56ms)
2025-08-16 17:24:15.730 | INFO     | src.router.messages:stream_response:57 - Sending Source nodes : Node ID: e7846c95-14e0-42b6-9f69-529b260f4725
Text: Epilogue: Two Suns, One Sky With the rift sealed, the two worlds
began to separate. Time compression meant only weeks passed in each,
despite years within the Rift. Naruto returned to Konoha, bearing a
straw hat in a memory case.
Score:  0.381

2025-08-16 17:24:15.730 | INFO     | src.router.messages:stream_response:57 - Sending Source nodes : Node ID: e7846c95-14e0-42b6-9f69-529b260f4725
Text: Epilogue: Two Suns, One Sky With the rift sealed, the two worlds
began to separate. Time compression meant only weeks passed in each,
despite years within the Rift. Naruto returned to Konoha, bearing a
straw hat in a memory case.
Score:  0.381

2025-08-16 17:24:15.731 | INFO     | src.router.messages:stream_response:58 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-16 17:24:15.731 | INFO     | src.router.messages:stream_response:58 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-16 17:26:36.719 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:26:36.719 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:27:05.871 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 17:27:32.642 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:27:32.642 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:27:32.664 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:27:32.664 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:27:37.104 | ERROR    | src.main:lifespan:83 - Database init error: (psycopg2.OperationalError) connection to server at "ep-shy-queen-a8t044kf-pooler.eastus2.azure.neon.tech" (52.167.188.143), port 5432 failed: timeout expired

(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-08-16 17:27:37.104 | ERROR    | src.main:lifespan:83 - Database init error: (psycopg2.OperationalError) connection to server at "ep-shy-queen-a8t044kf-pooler.eastus2.azure.neon.tech" (52.167.188.143), port 5432 failed: timeout expired

(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-08-16 17:27:37.118 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 17:27:37.118 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 17:27:37.120 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (2.0ms)
2025-08-16 17:27:37.120 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (2.0ms)
2025-08-16 17:27:37.430 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 17:27:37.430 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 17:28:44.499 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:28:44.499 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:29:15.559 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 17:29:46.698 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:29:46.698 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:29:46.735 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:29:46.735 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:29:53.326 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:29:53.326 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:30:26.294 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 17:30:26.294 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 17:30:26.295 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (0.91ms)
2025-08-16 17:30:26.295 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (0.91ms)
2025-08-16 17:30:26.604 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 17:30:26.604 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 17:31:43.284 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 17:31:43.284 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 17:31:46.228 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2943.93ms)
2025-08-16 17:31:46.228 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2943.93ms)
2025-08-16 17:32:31.992 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/tree
2025-08-16 17:32:31.992 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/tree
2025-08-16 17:32:31.993 | INFO     | src.main:log_requests:54 - OPTIONS /rag/tree → 200 (1.06ms)
2025-08-16 17:32:31.993 | INFO     | src.main:log_requests:54 - OPTIONS /rag/tree → 200 (1.06ms)
2025-08-16 17:32:31.996 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/tree
2025-08-16 17:32:31.996 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/tree
2025-08-16 17:32:33.571 | INFO     | src.main:log_requests:54 - POST /rag/tree → 200 (1574.89ms)
2025-08-16 17:32:33.571 | INFO     | src.main:log_requests:54 - POST /rag/tree → 200 (1574.89ms)
2025-08-16 17:32:44.015 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 17:32:44.015 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 17:32:44.016 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.0ms)
2025-08-16 17:32:44.016 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.0ms)
2025-08-16 17:32:44.335 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 17:32:44.335 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 17:33:02.315 | INFO     | src.main:log_requests:54 - POST /rag/git → 200 (17980.15ms)
2025-08-16 17:33:02.315 | INFO     | src.main:log_requests:54 - POST /rag/git → 200 (17980.15ms)
2025-08-16 17:33:51.568 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 17:33:51.568 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 17:33:51.570 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (2.0ms)
2025-08-16 17:33:51.570 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (2.0ms)
2025-08-16 17:33:51.573 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:33:51.573 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 17:33:53.192 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 17:33:53.192 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 17:33:53.193 | INFO     | src.router.messages:message_stream:126 - Loading index from vector store...
2025-08-16 17:33:53.193 | INFO     | src.router.messages:message_stream:126 - Loading index from vector store...
2025-08-16 17:33:58.981 | INFO     | src.router.messages:message_stream:145 - Engine rebuilt successfully from persisted index.
2025-08-16 17:33:58.981 | INFO     | src.router.messages:message_stream:145 - Engine rebuilt successfully from persisted index.
2025-08-16 17:34:01.227 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (9653.49ms)
2025-08-16 17:34:01.227 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (9653.49ms)
2025-08-16 17:34:13.726 | INFO     | src.router.messages:stream_response:57 - Sending Source nodes : Node ID: 5d0d6fc5-ac44-4515-b04b-2d14de5e02ba
Text: from src.models.schema import User, RefreshToken, Session,
Message, ChatMessage, ModelInfo, ToolCall, ChatbotSchema  __all__ = [
"User",     "RefreshToken",     "Session",     "Message",
"ChatMessage",     "ModelInfo",     "ToolCall",     "ChatbotSchema" ]
Score:  0.209

2025-08-16 17:34:13.726 | INFO     | src.router.messages:stream_response:57 - Sending Source nodes : Node ID: 5d0d6fc5-ac44-4515-b04b-2d14de5e02ba
Text: from src.models.schema import User, RefreshToken, Session,
Message, ChatMessage, ModelInfo, ToolCall, ChatbotSchema  __all__ = [
"User",     "RefreshToken",     "Session",     "Message",
"ChatMessage",     "ModelInfo",     "ToolCall",     "ChatbotSchema" ]
Score:  0.209

2025-08-16 17:34:13.728 | INFO     | src.router.messages:stream_response:58 - Sending Source nodes : dict_keys(['path', 'size'])
2025-08-16 17:34:13.728 | INFO     | src.router.messages:stream_response:58 - Sending Source nodes : dict_keys(['path', 'size'])
2025-08-16 17:34:17.091 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/b4c884e1-35fb-41b4-bc07-72db68655d2a/title
2025-08-16 17:34:17.091 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/b4c884e1-35fb-41b4-bc07-72db68655d2a/title
2025-08-16 17:34:17.092 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/b4c884e1-35fb-41b4-bc07-72db68655d2a/title → 200 (1.66ms)
2025-08-16 17:34:17.092 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/b4c884e1-35fb-41b4-bc07-72db68655d2a/title → 200 (1.66ms)
2025-08-16 17:34:17.397 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/b4c884e1-35fb-41b4-bc07-72db68655d2a/title
2025-08-16 17:34:17.397 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/b4c884e1-35fb-41b4-bc07-72db68655d2a/title
2025-08-16 17:34:21.366 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session b4c884e1-35fb-41b4-bc07-72db68655d2a: Learning From Given Files
2025-08-16 17:34:21.366 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session b4c884e1-35fb-41b4-bc07-72db68655d2a: Learning From Given Files
2025-08-16 17:34:21.586 | INFO     | src.main:log_requests:54 - PATCH /sessions/b4c884e1-35fb-41b4-bc07-72db68655d2a/title → 200 (4188.68ms)
2025-08-16 17:34:21.586 | INFO     | src.main:log_requests:54 - PATCH /sessions/b4c884e1-35fb-41b4-bc07-72db68655d2a/title → 200 (4188.68ms)
2025-08-16 17:36:25.621 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 17:36:25.621 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 17:36:25.623 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (2.05ms)
2025-08-16 17:36:25.623 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (2.05ms)
2025-08-16 17:36:25.930 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 17:36:25.930 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 17:44:17.115 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:44:17.115 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:44:43.174 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 17:45:13.424 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:45:13.424 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:45:13.460 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:45:13.460 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:45:21.005 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:45:21.005 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:45:40.979 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 17:46:05.556 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:46:05.556 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:46:05.592 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:46:05.592 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:46:14.267 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:46:14.267 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:46:48.733 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 17:46:48.733 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 17:46:48.736 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (3.17ms)
2025-08-16 17:46:48.736 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (3.17ms)
2025-08-16 17:46:49.044 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 17:46:49.044 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 17:46:53.403 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (4359.61ms)
2025-08-16 17:46:53.403 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (4359.61ms)
2025-08-16 17:47:18.570 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 17:47:18.570 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 17:47:18.571 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.0ms)
2025-08-16 17:47:18.571 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.0ms)
2025-08-16 17:47:18.574 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 17:47:18.574 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 17:48:50.977 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:48:50.977 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:49:10.752 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 17:49:40.784 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:49:40.784 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:49:40.805 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:49:40.805 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:49:54.360 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:49:54.360 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:50:02.953 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 17:50:02.953 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 17:50:02.954 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.0ms)
2025-08-16 17:50:02.954 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.0ms)
2025-08-16 17:50:03.272 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 17:50:03.272 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 17:51:52.798 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:51:52.798 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 17:52:11.639 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 17:52:37.257 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:52:37.257 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:52:37.282 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:52:37.282 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:52:53.453 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:52:53.453 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:53:16.275 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 17:53:46.536 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:53:46.536 | INFO     | src.main:<module>:20 - Server started
2025-08-16 17:53:46.561 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:53:46.561 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 17:53:59.856 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:53:59.856 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 17:54:03.179 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 17:54:03.179 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 17:54:03.180 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (0.95ms)
2025-08-16 17:54:03.180 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (0.95ms)
2025-08-16 17:54:03.500 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 17:54:03.500 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 18:10:25.795 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 18:10:25.795 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 18:10:39.652 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 18:11:06.254 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:11:06.254 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:11:06.287 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:11:06.287 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:11:14.241 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:11:14.241 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:13:55.879 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 18:13:55.879 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 18:13:55.880 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.32ms)
2025-08-16 18:13:55.880 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.32ms)
2025-08-16 18:13:56.199 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 18:13:56.199 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 18:14:55.958 | INFO     | src.main:log_requests:54 - POST /rag/git → 200 (59759.77ms)
2025-08-16 18:14:55.958 | INFO     | src.main:log_requests:54 - POST /rag/git → 200 (59759.77ms)
2025-08-16 18:15:08.829 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 18:15:08.829 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 18:15:08.830 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.4ms)
2025-08-16 18:15:08.830 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.4ms)
2025-08-16 18:15:08.835 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:15:08.835 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:15:58.098 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 18:15:58.098 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 18:16:25.201 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 18:16:49.990 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:16:49.990 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:16:50.012 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:16:50.012 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:16:55.697 | ERROR    | src.main:lifespan:83 - Database init error: (psycopg2.OperationalError) connection to server at "ep-shy-queen-a8t044kf-pooler.eastus2.azure.neon.tech" (52.167.188.143), port 5432 failed: timeout expired

(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-08-16 18:16:55.697 | ERROR    | src.main:lifespan:83 - Database init error: (psycopg2.OperationalError) connection to server at "ep-shy-queen-a8t044kf-pooler.eastus2.azure.neon.tech" (52.167.188.143), port 5432 failed: timeout expired

(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-08-16 18:17:19.453 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 18:17:19.453 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 18:17:49.707 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 18:18:14.790 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:18:14.790 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:18:14.833 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:18:14.833 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:18:27.041 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:18:27.041 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:18:42.815 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 18:18:42.815 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 18:18:42.816 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.05ms)
2025-08-16 18:18:42.816 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.05ms)
2025-08-16 18:18:43.121 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 18:18:43.121 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 18:18:47.068 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (3946.17ms)
2025-08-16 18:18:47.068 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (3946.17ms)
2025-08-16 18:18:50.416 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/19dd0394-c42c-4b0d-b603-9bacf6aa5673
2025-08-16 18:18:50.416 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/19dd0394-c42c-4b0d-b603-9bacf6aa5673
2025-08-16 18:18:50.417 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/19dd0394-c42c-4b0d-b603-9bacf6aa5673 → 200 (1.01ms)
2025-08-16 18:18:50.417 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/19dd0394-c42c-4b0d-b603-9bacf6aa5673 → 200 (1.01ms)
2025-08-16 18:18:50.420 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/19dd0394-c42c-4b0d-b603-9bacf6aa5673
2025-08-16 18:18:50.420 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/19dd0394-c42c-4b0d-b603-9bacf6aa5673
2025-08-16 18:18:52.079 | INFO     | src.router.sessions:get_chat_history:67 - [Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 0, 19, 577526), message_id=UUID('c188d121-f374-443f-a806-bbe59a336dd3'), sender=<SenderRole.USER: 'user'>, content='What is day today', files=[], model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 0, 23, 360192), message_id=UUID('f4ecbe42-f522-4bde-9084-5076a6336eca'), sender=<SenderRole.ASSISTANT: 'assistant'>, content='Today is **August\u202f16,\u202f2025**.', files=None, model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 2, 7, 463850), message_id=UUID('890f9b21-0228-4812-9333-02a3a921521a'), sender=<SenderRole.USER: 'user'>, content='What were we talking about', files=[], model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 2, 10, 332688), message_id=UUID('11f46d3d-ccbd-4bb9-ad74-9adbe0a596f6'), sender=<SenderRole.ASSISTANT: 'assistant'>, content='We were just talking about the current date—specifically, that today is **August\u202f16,\u202f2025**. If you’d like to dive into anything else (time zones, calendar trivia, or how to set reminders), just let me know!', files=None, model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 2, 28, 479180), message_id=UUID('b0433b30-4ad3-4d87-9e2c-7395fc8da1fb'), sender=<SenderRole.USER: 'user'>, content='what were question i asked you till now', files=[], model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 2, 30, 552190), message_id=UUID('0b219d4b-384a-449b-8c8b-a52950c6386f'), sender=<SenderRole.ASSISTANT: 'assistant'>, content='Sure, here’s a quick recap of the questions you’ve asked so far:\n\n- **“What is day today?”**  \n- **“What were we talking about?”**  \n- **“what were question i asked you till now”**  \n\nLet me know if you’d like to revisit any of those topics or explore something new!', files=None, model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 6, 8, 647400), message_id=UUID('88b1a392-e923-4962-87c6-add2e58c71cb'), sender=<SenderRole.USER: 'user'>, content='What does this resume contain', files=['DineshThummaResume.pdf'], model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 6, 11, 118979), message_id=UUID('b15d06df-9a80-4291-8506-a4db26564516'), sender=<SenderRole.ASSISTANT: 'assistant'>, content='', files=None, model_response_time_ms=None)]
2025-08-16 18:18:52.079 | INFO     | src.router.sessions:get_chat_history:67 - [Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 0, 19, 577526), message_id=UUID('c188d121-f374-443f-a806-bbe59a336dd3'), sender=<SenderRole.USER: 'user'>, content='What is day today', files=[], model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 0, 23, 360192), message_id=UUID('f4ecbe42-f522-4bde-9084-5076a6336eca'), sender=<SenderRole.ASSISTANT: 'assistant'>, content='Today is **August\u202f16,\u202f2025**.', files=None, model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 2, 7, 463850), message_id=UUID('890f9b21-0228-4812-9333-02a3a921521a'), sender=<SenderRole.USER: 'user'>, content='What were we talking about', files=[], model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 2, 10, 332688), message_id=UUID('11f46d3d-ccbd-4bb9-ad74-9adbe0a596f6'), sender=<SenderRole.ASSISTANT: 'assistant'>, content='We were just talking about the current date—specifically, that today is **August\u202f16,\u202f2025**. If you’d like to dive into anything else (time zones, calendar trivia, or how to set reminders), just let me know!', files=None, model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 2, 28, 479180), message_id=UUID('b0433b30-4ad3-4d87-9e2c-7395fc8da1fb'), sender=<SenderRole.USER: 'user'>, content='what were question i asked you till now', files=[], model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 2, 30, 552190), message_id=UUID('0b219d4b-384a-449b-8c8b-a52950c6386f'), sender=<SenderRole.ASSISTANT: 'assistant'>, content='Sure, here’s a quick recap of the questions you’ve asked so far:\n\n- **“What is day today?”**  \n- **“What were we talking about?”**  \n- **“what were question i asked you till now”**  \n\nLet me know if you’d like to revisit any of those topics or explore something new!', files=None, model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 6, 8, 647400), message_id=UUID('88b1a392-e923-4962-87c6-add2e58c71cb'), sender=<SenderRole.USER: 'user'>, content='What does this resume contain', files=['DineshThummaResume.pdf'], model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 6, 11, 118979), message_id=UUID('b15d06df-9a80-4291-8506-a4db26564516'), sender=<SenderRole.ASSISTANT: 'assistant'>, content='', files=None, model_response_time_ms=None)]
2025-08-16 18:18:52.083 | INFO     | src.router.sessions:get_chat_history:68 - {'session_id': UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), 'timestamp': datetime.datetime(2025, 8, 16, 17, 0, 19, 577526), 'message_id': UUID('c188d121-f374-443f-a806-bbe59a336dd3'), 'sender': <SenderRole.USER: 'user'>, 'content': 'What is day today', 'files': [], 'model_response_time_ms': None}
2025-08-16 18:18:52.083 | INFO     | src.router.sessions:get_chat_history:68 - {'session_id': UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), 'timestamp': datetime.datetime(2025, 8, 16, 17, 0, 19, 577526), 'message_id': UUID('c188d121-f374-443f-a806-bbe59a336dd3'), 'sender': <SenderRole.USER: 'user'>, 'content': 'What is day today', 'files': [], 'model_response_time_ms': None}
2025-08-16 18:18:53.369 | INFO     | src.main:log_requests:54 - GET /sessions/history/19dd0394-c42c-4b0d-b603-9bacf6aa5673 → 200 (2948.74ms)
2025-08-16 18:18:53.369 | INFO     | src.main:log_requests:54 - GET /sessions/history/19dd0394-c42c-4b0d-b603-9bacf6aa5673 → 200 (2948.74ms)
2025-08-16 18:18:53.403 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/a38be216-d447-4d6c-bf08-a21de526c9c9
2025-08-16 18:18:53.403 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/a38be216-d447-4d6c-bf08-a21de526c9c9
2025-08-16 18:18:53.404 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/a38be216-d447-4d6c-bf08-a21de526c9c9 → 200 (1.0ms)
2025-08-16 18:18:53.404 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/a38be216-d447-4d6c-bf08-a21de526c9c9 → 200 (1.0ms)
2025-08-16 18:18:53.407 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/a38be216-d447-4d6c-bf08-a21de526c9c9
2025-08-16 18:18:53.407 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/a38be216-d447-4d6c-bf08-a21de526c9c9
2025-08-16 18:18:55.636 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:18:55.636 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:18:55.729 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/b4c884e1-35fb-41b4-bc07-72db68655d2a
2025-08-16 18:18:55.729 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/b4c884e1-35fb-41b4-bc07-72db68655d2a
2025-08-16 18:18:55.730 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/b4c884e1-35fb-41b4-bc07-72db68655d2a → 200 (1.01ms)
2025-08-16 18:18:55.730 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/b4c884e1-35fb-41b4-bc07-72db68655d2a → 200 (1.01ms)
2025-08-16 18:18:55.733 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/b4c884e1-35fb-41b4-bc07-72db68655d2a
2025-08-16 18:18:55.733 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/b4c884e1-35fb-41b4-bc07-72db68655d2a
2025-08-16 18:19:00.579 | INFO     | src.router.sessions:get_chat_history:67 - [Message(session_id=UUID('b4c884e1-35fb-41b4-bc07-72db68655d2a'), timestamp=datetime.datetime(2025, 8, 16, 17, 34, 13, 729644), message_id=UUID('c41f0e9b-9396-4b7c-a65b-b76a91866222'), sender=<SenderRole.USER: 'user'>, content='What did you learn from files give to you', files=[], model_response_time_ms=None), Message(session_id=UUID('b4c884e1-35fb-41b4-bc07-72db68655d2a'), timestamp=datetime.datetime(2025, 8, 16, 17, 34, 15, 628597), message_id=UUID('c547b96d-f907-4dee-b512-a03d369ee8fe'), sender=<SenderRole.ASSISTANT: 'assistant'>, content='From the two files you shared, I’ve pieced together a clear picture of the data‑model layer that your project is using. Below is a quick walk‑through of what each file does and how the pieces fit together.\n\n---\n\n## 1. `src/models/__init__.py`\n\nThis file simply re‑exports the most important classes so that other parts of the application can import them from a single, convenient location.\n\n```python\nfrom src.models.schema import (\n    User,\n    RefreshToken,\n    Session,\n    Message,\n    ChatMessage,\n    ModelInfo,\n    ToolCall,\n    ChatbotSchema,\n)\n\n__all__ = [\n    "User",\n    "RefreshToken",\n    "Session",\n    "Message",\n    "ChatMessage",\n    "ModelInfo",\n    "ToolCall",\n    "ChatbotSchema",\n]\n```\n\n* **Why this matters**  \n  By listing the names in `__all__`, you control what gets exported when someone does `from src.models import *`. It also makes the import paths shorter (`src.models.ChatMessage` instead of `src.models.schema.ChatMessage`).\n\n---\n\n## 2. `src/models/schema.py`\n\nThis file is the heart of the data‑model definitions. It mixes **Pydantic** models (used for request/response validation) with a few SQLAlchemy/SQLModel imports that hint at database integration. Below is a breakdown of each component.\n\n### 2.1 Shared Types\n\n```python\nclass SenderRole(str, Enum):\n    SYSTEM = "system"\n    USER = "user"\n ASSISTANT = "assistant"\n```\n\n* A simple enumeration that standardises the role of a message sender.  \n* Useful for type‑checking and for ensuring that only the three allowed values are used.\n\n### 2.2 API (Pydantic) Models\n\n| Model | Purpose | Key Fields |\n|-------|---------|------------|\n| `ChatMessage` | Represents a single chat message in the conversation. | `role`, `content`, `timestamp` |\n| `MessageInfo` | A lightweight view of a stored message (likely returned by an API). | `message_id`, `session_id`, `content`, `sender`, `timestamp` |\n| `ToolCall` | Describes a function call that the assistant might make. | `name`, `arguments` |\n| `ChatbotSchema` | Payload for a chat request to the LLM. | `model`, `messages`, `temperature`, `max_tokens`, `stream`, `extra` |\n| `ModelInfo` | Metadata about a model provider. | `modelprovider`, `modelname`, `isFunctionCalling`, `token_left` |\n| `MsgRequest` | Incoming message from a user. | `session_id`, `isFirst`, `msg`, `context_id`, `context_type`, `files` |\n| `qdrant_convert` | Helper for converting data to a format suitable for Qdrant (vector DB). | `point_id`, `vector`, `payload`, `collection_name` |\n| `Notes` | Simple container for session‑context metadata. | `session_id`, `context_id`, `context_type` |\n\n#### Example: Using `ChatbotSchema`\n\n```python\npayload = ChatbotSchema(\n    model="gpt-4o-mini",\n    messages=[\n        ChatMessage(role=SenderRole.USER, content="Hello!"),\n        ChatMessage(role=SenderRole.ASSISTANT, content="Hi there! How can I help?"),\n    ],\n    temperature=0.5,\n    max_tokens=512,\n)\n```\n\nThis object could be sent to an LLM endpoint, guaranteeing that the request is well‑formed.\n\n### 2.3 Database‑Related Imports\n\n```python\nfrom sqlmodel import SQLModel, Field\n```\n\nWhile the current file only defines Pydantic models, the presence of `SQLModel` and `Field` imports suggests that elsewhere in the project there are SQLModel subclasses (e.g., `User`, `Session`, `Message`) that map to database tables. The `__init__` file imports those classes, so they’re part of the public API.\n\n---\n\n## What You Can Do With This Knowledge\n\n1. **Importing Models**  \n   ```python\n   from src.models import ChatMessage, ChatbotSchema\n   ```\n\n2. **Validating Incoming Data**  \n   Use Pydantic’s `.parse_obj()` or FastAPI’s automatic validation to ensure that request bodies match the expected schema.\n\n3. **Serialising Responses**  \n   Return `MessageInfo` or `ChatbotSchema` instances from your endpoints; FastAPI will automatically convert them to JSON.\n\n4. **Extending the Schema**  \n   If you need new fields (e.g., a `metadata` dict on `ChatMessage`), just add them to the Pydantic model and update any downstream code that consumes it.\n\n---\n\n### Quick Recap\n\n- **`__init__.py`**: Re‑exports key classes for easy import.\n- **`schema.py`**: Defines all the Pydantic models that shape your API’s data contracts.\n- **Enums & Types**: `SenderRole` keeps sender values consistent.\n- **Database hints**: Imports of `SQLModel` suggest that the same module also contains SQLAlchemy models elsewhere.\n\nFeel free to let me know if you’d like deeper dives into any specific model or how to integrate them with your database layer!', files=None, model_response_time_ms=None)]
2025-08-16 18:19:00.579 | INFO     | src.router.sessions:get_chat_history:67 - [Message(session_id=UUID('b4c884e1-35fb-41b4-bc07-72db68655d2a'), timestamp=datetime.datetime(2025, 8, 16, 17, 34, 13, 729644), message_id=UUID('c41f0e9b-9396-4b7c-a65b-b76a91866222'), sender=<SenderRole.USER: 'user'>, content='What did you learn from files give to you', files=[], model_response_time_ms=None), Message(session_id=UUID('b4c884e1-35fb-41b4-bc07-72db68655d2a'), timestamp=datetime.datetime(2025, 8, 16, 17, 34, 15, 628597), message_id=UUID('c547b96d-f907-4dee-b512-a03d369ee8fe'), sender=<SenderRole.ASSISTANT: 'assistant'>, content='From the two files you shared, I’ve pieced together a clear picture of the data‑model layer that your project is using. Below is a quick walk‑through of what each file does and how the pieces fit together.\n\n---\n\n## 1. `src/models/__init__.py`\n\nThis file simply re‑exports the most important classes so that other parts of the application can import them from a single, convenient location.\n\n```python\nfrom src.models.schema import (\n    User,\n    RefreshToken,\n    Session,\n    Message,\n    ChatMessage,\n    ModelInfo,\n    ToolCall,\n    ChatbotSchema,\n)\n\n__all__ = [\n    "User",\n    "RefreshToken",\n    "Session",\n    "Message",\n    "ChatMessage",\n    "ModelInfo",\n    "ToolCall",\n    "ChatbotSchema",\n]\n```\n\n* **Why this matters**  \n  By listing the names in `__all__`, you control what gets exported when someone does `from src.models import *`. It also makes the import paths shorter (`src.models.ChatMessage` instead of `src.models.schema.ChatMessage`).\n\n---\n\n## 2. `src/models/schema.py`\n\nThis file is the heart of the data‑model definitions. It mixes **Pydantic** models (used for request/response validation) with a few SQLAlchemy/SQLModel imports that hint at database integration. Below is a breakdown of each component.\n\n### 2.1 Shared Types\n\n```python\nclass SenderRole(str, Enum):\n    SYSTEM = "system"\n    USER = "user"\n ASSISTANT = "assistant"\n```\n\n* A simple enumeration that standardises the role of a message sender.  \n* Useful for type‑checking and for ensuring that only the three allowed values are used.\n\n### 2.2 API (Pydantic) Models\n\n| Model | Purpose | Key Fields |\n|-------|---------|------------|\n| `ChatMessage` | Represents a single chat message in the conversation. | `role`, `content`, `timestamp` |\n| `MessageInfo` | A lightweight view of a stored message (likely returned by an API). | `message_id`, `session_id`, `content`, `sender`, `timestamp` |\n| `ToolCall` | Describes a function call that the assistant might make. | `name`, `arguments` |\n| `ChatbotSchema` | Payload for a chat request to the LLM. | `model`, `messages`, `temperature`, `max_tokens`, `stream`, `extra` |\n| `ModelInfo` | Metadata about a model provider. | `modelprovider`, `modelname`, `isFunctionCalling`, `token_left` |\n| `MsgRequest` | Incoming message from a user. | `session_id`, `isFirst`, `msg`, `context_id`, `context_type`, `files` |\n| `qdrant_convert` | Helper for converting data to a format suitable for Qdrant (vector DB). | `point_id`, `vector`, `payload`, `collection_name` |\n| `Notes` | Simple container for session‑context metadata. | `session_id`, `context_id`, `context_type` |\n\n#### Example: Using `ChatbotSchema`\n\n```python\npayload = ChatbotSchema(\n    model="gpt-4o-mini",\n    messages=[\n        ChatMessage(role=SenderRole.USER, content="Hello!"),\n        ChatMessage(role=SenderRole.ASSISTANT, content="Hi there! How can I help?"),\n    ],\n    temperature=0.5,\n    max_tokens=512,\n)\n```\n\nThis object could be sent to an LLM endpoint, guaranteeing that the request is well‑formed.\n\n### 2.3 Database‑Related Imports\n\n```python\nfrom sqlmodel import SQLModel, Field\n```\n\nWhile the current file only defines Pydantic models, the presence of `SQLModel` and `Field` imports suggests that elsewhere in the project there are SQLModel subclasses (e.g., `User`, `Session`, `Message`) that map to database tables. The `__init__` file imports those classes, so they’re part of the public API.\n\n---\n\n## What You Can Do With This Knowledge\n\n1. **Importing Models**  \n   ```python\n   from src.models import ChatMessage, ChatbotSchema\n   ```\n\n2. **Validating Incoming Data**  \n   Use Pydantic’s `.parse_obj()` or FastAPI’s automatic validation to ensure that request bodies match the expected schema.\n\n3. **Serialising Responses**  \n   Return `MessageInfo` or `ChatbotSchema` instances from your endpoints; FastAPI will automatically convert them to JSON.\n\n4. **Extending the Schema**  \n   If you need new fields (e.g., a `metadata` dict on `ChatMessage`), just add them to the Pydantic model and update any downstream code that consumes it.\n\n---\n\n### Quick Recap\n\n- **`__init__.py`**: Re‑exports key classes for easy import.\n- **`schema.py`**: Defines all the Pydantic models that shape your API’s data contracts.\n- **Enums & Types**: `SenderRole` keeps sender values consistent.\n- **Database hints**: Imports of `SQLModel` suggest that the same module also contains SQLAlchemy models elsewhere.\n\nFeel free to let me know if you’d like deeper dives into any specific model or how to integrate them with your database layer!', files=None, model_response_time_ms=None)]
2025-08-16 18:19:00.582 | INFO     | src.router.sessions:get_chat_history:68 - {'session_id': UUID('b4c884e1-35fb-41b4-bc07-72db68655d2a'), 'timestamp': datetime.datetime(2025, 8, 16, 17, 34, 13, 729644), 'message_id': UUID('c41f0e9b-9396-4b7c-a65b-b76a91866222'), 'sender': <SenderRole.USER: 'user'>, 'content': 'What did you learn from files give to you', 'files': [], 'model_response_time_ms': None}
2025-08-16 18:19:00.582 | INFO     | src.router.sessions:get_chat_history:68 - {'session_id': UUID('b4c884e1-35fb-41b4-bc07-72db68655d2a'), 'timestamp': datetime.datetime(2025, 8, 16, 17, 34, 13, 729644), 'message_id': UUID('c41f0e9b-9396-4b7c-a65b-b76a91866222'), 'sender': <SenderRole.USER: 'user'>, 'content': 'What did you learn from files give to you', 'files': [], 'model_response_time_ms': None}
2025-08-16 18:19:01.491 | INFO     | src.main:log_requests:54 - GET /sessions/history/b4c884e1-35fb-41b4-bc07-72db68655d2a → 200 (5757.88ms)
2025-08-16 18:19:01.491 | INFO     | src.main:log_requests:54 - GET /sessions/history/b4c884e1-35fb-41b4-bc07-72db68655d2a → 200 (5757.88ms)
2025-08-16 18:19:01.495 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/a38be216-d447-4d6c-bf08-a21de526c9c9
2025-08-16 18:19:01.495 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/a38be216-d447-4d6c-bf08-a21de526c9c9
2025-08-16 18:19:02.737 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:02.737 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:03.315 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/a38be216-d447-4d6c-bf08-a21de526c9c9
2025-08-16 18:19:03.315 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/a38be216-d447-4d6c-bf08-a21de526c9c9
2025-08-16 18:19:04.534 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:04.534 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:04.536 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e
2025-08-16 18:19:04.536 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e
2025-08-16 18:19:04.537 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e → 200 (1.0ms)
2025-08-16 18:19:04.537 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e → 200 (1.0ms)
2025-08-16 18:19:04.628 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/19dd0394-c42c-4b0d-b603-9bacf6aa5673
2025-08-16 18:19:04.628 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/19dd0394-c42c-4b0d-b603-9bacf6aa5673
2025-08-16 18:19:05.713 | INFO     | src.router.sessions:get_chat_history:67 - [Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 0, 19, 577526), message_id=UUID('c188d121-f374-443f-a806-bbe59a336dd3'), sender=<SenderRole.USER: 'user'>, content='What is day today', files=[], model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 0, 23, 360192), message_id=UUID('f4ecbe42-f522-4bde-9084-5076a6336eca'), sender=<SenderRole.ASSISTANT: 'assistant'>, content='Today is **August\u202f16,\u202f2025**.', files=None, model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 2, 7, 463850), message_id=UUID('890f9b21-0228-4812-9333-02a3a921521a'), sender=<SenderRole.USER: 'user'>, content='What were we talking about', files=[], model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 2, 10, 332688), message_id=UUID('11f46d3d-ccbd-4bb9-ad74-9adbe0a596f6'), sender=<SenderRole.ASSISTANT: 'assistant'>, content='We were just talking about the current date—specifically, that today is **August\u202f16,\u202f2025**. If you’d like to dive into anything else (time zones, calendar trivia, or how to set reminders), just let me know!', files=None, model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 2, 28, 479180), message_id=UUID('b0433b30-4ad3-4d87-9e2c-7395fc8da1fb'), sender=<SenderRole.USER: 'user'>, content='what were question i asked you till now', files=[], model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 2, 30, 552190), message_id=UUID('0b219d4b-384a-449b-8c8b-a52950c6386f'), sender=<SenderRole.ASSISTANT: 'assistant'>, content='Sure, here’s a quick recap of the questions you’ve asked so far:\n\n- **“What is day today?”**  \n- **“What were we talking about?”**  \n- **“what were question i asked you till now”**  \n\nLet me know if you’d like to revisit any of those topics or explore something new!', files=None, model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 6, 8, 647400), message_id=UUID('88b1a392-e923-4962-87c6-add2e58c71cb'), sender=<SenderRole.USER: 'user'>, content='What does this resume contain', files=['DineshThummaResume.pdf'], model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 6, 11, 118979), message_id=UUID('b15d06df-9a80-4291-8506-a4db26564516'), sender=<SenderRole.ASSISTANT: 'assistant'>, content='', files=None, model_response_time_ms=None)]
2025-08-16 18:19:05.713 | INFO     | src.router.sessions:get_chat_history:67 - [Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 0, 19, 577526), message_id=UUID('c188d121-f374-443f-a806-bbe59a336dd3'), sender=<SenderRole.USER: 'user'>, content='What is day today', files=[], model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 0, 23, 360192), message_id=UUID('f4ecbe42-f522-4bde-9084-5076a6336eca'), sender=<SenderRole.ASSISTANT: 'assistant'>, content='Today is **August\u202f16,\u202f2025**.', files=None, model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 2, 7, 463850), message_id=UUID('890f9b21-0228-4812-9333-02a3a921521a'), sender=<SenderRole.USER: 'user'>, content='What were we talking about', files=[], model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 2, 10, 332688), message_id=UUID('11f46d3d-ccbd-4bb9-ad74-9adbe0a596f6'), sender=<SenderRole.ASSISTANT: 'assistant'>, content='We were just talking about the current date—specifically, that today is **August\u202f16,\u202f2025**. If you’d like to dive into anything else (time zones, calendar trivia, or how to set reminders), just let me know!', files=None, model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 2, 28, 479180), message_id=UUID('b0433b30-4ad3-4d87-9e2c-7395fc8da1fb'), sender=<SenderRole.USER: 'user'>, content='what were question i asked you till now', files=[], model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 2, 30, 552190), message_id=UUID('0b219d4b-384a-449b-8c8b-a52950c6386f'), sender=<SenderRole.ASSISTANT: 'assistant'>, content='Sure, here’s a quick recap of the questions you’ve asked so far:\n\n- **“What is day today?”**  \n- **“What were we talking about?”**  \n- **“what were question i asked you till now”**  \n\nLet me know if you’d like to revisit any of those topics or explore something new!', files=None, model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 6, 8, 647400), message_id=UUID('88b1a392-e923-4962-87c6-add2e58c71cb'), sender=<SenderRole.USER: 'user'>, content='What does this resume contain', files=['DineshThummaResume.pdf'], model_response_time_ms=None), Message(session_id=UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), timestamp=datetime.datetime(2025, 8, 16, 17, 6, 11, 118979), message_id=UUID('b15d06df-9a80-4291-8506-a4db26564516'), sender=<SenderRole.ASSISTANT: 'assistant'>, content='', files=None, model_response_time_ms=None)]
2025-08-16 18:19:05.714 | INFO     | src.router.sessions:get_chat_history:68 - {'session_id': UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), 'timestamp': datetime.datetime(2025, 8, 16, 17, 0, 19, 577526), 'message_id': UUID('c188d121-f374-443f-a806-bbe59a336dd3'), 'sender': <SenderRole.USER: 'user'>, 'content': 'What is day today', 'files': [], 'model_response_time_ms': None}
2025-08-16 18:19:05.714 | INFO     | src.router.sessions:get_chat_history:68 - {'session_id': UUID('19dd0394-c42c-4b0d-b603-9bacf6aa5673'), 'timestamp': datetime.datetime(2025, 8, 16, 17, 0, 19, 577526), 'message_id': UUID('c188d121-f374-443f-a806-bbe59a336dd3'), 'sender': <SenderRole.USER: 'user'>, 'content': 'What is day today', 'files': [], 'model_response_time_ms': None}
2025-08-16 18:19:06.465 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e
2025-08-16 18:19:06.465 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e
2025-08-16 18:19:06.467 | INFO     | src.main:log_requests:54 - GET /sessions/history/19dd0394-c42c-4b0d-b603-9bacf6aa5673 → 200 (1838.78ms)
2025-08-16 18:19:06.467 | INFO     | src.main:log_requests:54 - GET /sessions/history/19dd0394-c42c-4b0d-b603-9bacf6aa5673 → 200 (1838.78ms)
2025-08-16 18:19:08.463 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:08.463 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:08.465 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/a38be216-d447-4d6c-bf08-a21de526c9c9
2025-08-16 18:19:08.465 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/a38be216-d447-4d6c-bf08-a21de526c9c9
2025-08-16 18:19:09.790 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:09.790 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:12.064 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/a38be216-d447-4d6c-bf08-a21de526c9c9
2025-08-16 18:19:12.064 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/a38be216-d447-4d6c-bf08-a21de526c9c9
2025-08-16 18:19:13.207 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:13.207 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:18.215 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e
2025-08-16 18:19:18.215 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e
2025-08-16 18:19:19.456 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:19.456 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:19.973 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e
2025-08-16 18:19:19.973 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e
2025-08-16 18:19:21.442 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:21.442 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:22.183 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e
2025-08-16 18:19:22.183 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e
2025-08-16 18:19:23.524 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:23.524 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:23.526 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 18:19:23.526 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 18:19:27.174 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (3647.3ms)
2025-08-16 18:19:27.174 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (3647.3ms)
2025-08-16 18:19:27.176 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e
2025-08-16 18:19:27.176 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e
2025-08-16 18:19:29.053 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:29.053 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:29.720 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e
2025-08-16 18:19:29.720 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e
2025-08-16 18:19:31.454 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:31.454 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:33.377 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e
2025-08-16 18:19:33.377 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e
2025-08-16 18:19:35.287 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:35.287 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:36.485 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e
2025-08-16 18:19:36.485 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e
2025-08-16 18:19:37.811 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:37.811 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:38.819 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e
2025-08-16 18:19:38.819 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/6c5e4227-7bcb-4c03-8cb4-31d9d5d7df5e
2025-08-16 18:19:41.654 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:19:41.654 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 18:20:06.269 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 18:20:06.269 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 18:20:06.270 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.0ms)
2025-08-16 18:20:06.270 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.0ms)
2025-08-16 18:20:06.274 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 18:20:06.274 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 18:22:13.301 | INFO     | src.main:log_requests:54 - POST /rag/git → 200 (127027.3ms)
2025-08-16 18:22:13.301 | INFO     | src.main:log_requests:54 - POST /rag/git → 200 (127027.3ms)
2025-08-16 18:22:23.618 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:22:23.618 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:22:30.038 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 18:22:30.038 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 18:22:30.038 | INFO     | src.router.messages:message_stream:126 - Loading index from vector store...
2025-08-16 18:22:30.038 | INFO     | src.router.messages:message_stream:126 - Loading index from vector store...
2025-08-16 18:22:33.233 | INFO     | src.router.messages:message_stream:145 - Engine rebuilt successfully from persisted index.
2025-08-16 18:22:33.233 | INFO     | src.router.messages:message_stream:145 - Engine rebuilt successfully from persisted index.
2025-08-16 18:22:37.164 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (13546.03ms)
2025-08-16 18:22:37.164 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (13546.03ms)
2025-08-16 18:22:48.678 | INFO     | src.router.messages:stream_response:57 - Sending Source nodes : Node ID: 7ef24976-0e62-4f2f-b649-71be4dd2ffe6
Text: ```    ### 3. Configure Environment Variables    Create a `.env`
file in the root directory:    ```  DATABASE_URL=  REDIS_URL=
QDRANT_URL=  QDRANT_API_KEY=  GROQ_API_KEY=  COHERE_API_KEY=
HUGGINGFACE_HUB_TOKEN=  GITHUB_TOKEN=  ```    ### 4. Frontend Setup
(Required)    Clone and set up the frontend:    ```bash  git clone
https://github.com/Din...
Score:  0.299

2025-08-16 18:22:48.678 | INFO     | src.router.messages:stream_response:57 - Sending Source nodes : Node ID: 7ef24976-0e62-4f2f-b649-71be4dd2ffe6
Text: ```    ### 3. Configure Environment Variables    Create a `.env`
file in the root directory:    ```  DATABASE_URL=  REDIS_URL=
QDRANT_URL=  QDRANT_API_KEY=  GROQ_API_KEY=  COHERE_API_KEY=
HUGGINGFACE_HUB_TOKEN=  GITHUB_TOKEN=  ```    ### 4. Frontend Setup
(Required)    Clone and set up the frontend:    ```bash  git clone
https://github.com/Din...
Score:  0.299

2025-08-16 18:22:48.681 | INFO     | src.router.messages:stream_response:58 - Sending Source nodes : dict_keys(['path', 'size'])
2025-08-16 18:22:48.681 | INFO     | src.router.messages:stream_response:58 - Sending Source nodes : dict_keys(['path', 'size'])
2025-08-16 18:22:58.141 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/6df9d2c4-f2b7-4640-b65e-34b694101292/title
2025-08-16 18:22:58.141 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/6df9d2c4-f2b7-4640-b65e-34b694101292/title
2025-08-16 18:22:58.142 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/6df9d2c4-f2b7-4640-b65e-34b694101292/title → 200 (1.02ms)
2025-08-16 18:22:58.142 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/6df9d2c4-f2b7-4640-b65e-34b694101292/title → 200 (1.02ms)
2025-08-16 18:22:58.462 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/6df9d2c4-f2b7-4640-b65e-34b694101292/title
2025-08-16 18:22:58.462 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/6df9d2c4-f2b7-4640-b65e-34b694101292/title
2025-08-16 18:23:03.377 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 6df9d2c4-f2b7-4640-b65e-34b694101292: Based on the initial message "What did you learn from codebase", I analyzed the key elements of the message to generate a concise, descriptive title for a chat session. The main topic is about learning from a codebase. 

Possible titles could be:
- Learning from Codebase Experience
- Codebase Lessons Learned
- Insights from Codebase
- What I Learned from Codebase
- Codebase Key Takeaways
- Lessons from Codebase

Considering the rules that the title should have a maximum of 6 words, no quotes or special characters, and should describe the main topic or question in a specific but concise manner, the most suitable title would be "Lessons from Codebase" or alternatively "Learning from Codebase". However, "Lessons from Codebase" is more direct and to the point.

Title: Lessons from Codebase
2025-08-16 18:23:03.377 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 6df9d2c4-f2b7-4640-b65e-34b694101292: Based on the initial message "What did you learn from codebase", I analyzed the key elements of the message to generate a concise, descriptive title for a chat session. The main topic is about learning from a codebase. 

Possible titles could be:
- Learning from Codebase Experience
- Codebase Lessons Learned
- Insights from Codebase
- What I Learned from Codebase
- Codebase Key Takeaways
- Lessons from Codebase

Considering the rules that the title should have a maximum of 6 words, no quotes or special characters, and should describe the main topic or question in a specific but concise manner, the most suitable title would be "Lessons from Codebase" or alternatively "Learning from Codebase". However, "Lessons from Codebase" is more direct and to the point.

Title: Lessons from Codebase
2025-08-16 18:23:04.006 | INFO     | src.main:log_requests:54 - PATCH /sessions/6df9d2c4-f2b7-4640-b65e-34b694101292/title → 200 (5543.89ms)
2025-08-16 18:23:04.006 | INFO     | src.main:log_requests:54 - PATCH /sessions/6df9d2c4-f2b7-4640-b65e-34b694101292/title → 200 (5543.89ms)
2025-08-16 18:23:05.801 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:23:05.801 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:23:08.661 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 18:23:08.661 | INFO     | src.router.messages:message_stream:109 - Recived files in backend:[]
2025-08-16 18:23:08.662 | INFO     | src.router.messages:message_stream:126 - Loading index from vector store...
2025-08-16 18:23:08.662 | INFO     | src.router.messages:message_stream:126 - Loading index from vector store...
2025-08-16 18:23:11.661 | INFO     | src.router.messages:message_stream:145 - Engine rebuilt successfully from persisted index.
2025-08-16 18:23:11.661 | INFO     | src.router.messages:message_stream:145 - Engine rebuilt successfully from persisted index.
2025-08-16 18:23:13.337 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (7535.43ms)
2025-08-16 18:23:13.337 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (7535.43ms)
2025-08-16 18:23:29.139 | INFO     | src.router.messages:stream_response:57 - Sending Source nodes : Node ID: 2d4a748e-ddf6-4fda-8cba-19c42986084a
Text: from src.db.dbs import engine, SessionLocal, get_db  __all__ =
["engine", "SessionLocal", "get_db"]
Score:  0.339

2025-08-16 18:23:29.139 | INFO     | src.router.messages:stream_response:57 - Sending Source nodes : Node ID: 2d4a748e-ddf6-4fda-8cba-19c42986084a
Text: from src.db.dbs import engine, SessionLocal, get_db  __all__ =
["engine", "SessionLocal", "get_db"]
Score:  0.339

2025-08-16 18:23:29.142 | INFO     | src.router.messages:stream_response:58 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 18:23:29.142 | INFO     | src.router.messages:stream_response:58 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 18:26:13.490 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 18:26:13.490 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 18:26:40.275 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 18:27:01.650 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:27:01.650 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:27:01.670 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:27:01.670 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:27:14.885 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:27:14.885 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:27:34.943 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 18:27:55.800 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:27:55.800 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:27:55.822 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:27:55.822 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:28:02.908 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:28:02.908 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:28:20.020 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 18:28:36.530 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:28:36.530 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:28:36.545 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:28:36.545 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:28:42.393 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:28:42.393 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:29:00.165 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 18:29:17.069 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:29:17.069 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:29:17.087 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:29:17.087 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:29:23.110 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:29:23.110 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:29:35.516 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 18:29:35.516 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 18:29:52.660 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 18:30:10.942 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:30:10.942 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:30:10.981 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:30:10.981 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:30:16.864 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:30:16.864 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:30:42.241 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 18:31:00.801 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:31:00.801 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:31:00.830 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:31:00.830 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:31:06.654 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:31:06.654 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:34:14.445 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 18:34:14.445 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 18:34:35.543 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 18:34:51.893 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:34:51.893 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:34:51.916 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:34:51.916 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:34:58.162 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:34:58.162 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:35:54.627 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 18:35:54.627 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 18:36:41.912 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 18:37:34.842 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:37:34.842 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:37:35.010 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:37:35.010 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:37:41.534 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:37:41.534 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:40:44.266 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 18:40:44.266 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 18:40:44.267 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.0ms)
2025-08-16 18:40:44.267 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.0ms)
2025-08-16 18:40:44.585 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 18:40:44.585 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 18:40:46.955 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2370.22ms)
2025-08-16 18:40:46.955 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2370.22ms)
2025-08-16 18:41:03.908 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 18:41:03.908 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 18:41:03.910 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.27ms)
2025-08-16 18:41:03.910 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.27ms)
2025-08-16 18:41:03.912 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 18:41:03.912 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 18:44:11.776 | INFO     | src.main:log_requests:54 - POST /rag/git → 200 (187864.09ms)
2025-08-16 18:44:11.776 | INFO     | src.main:log_requests:54 - POST /rag/git → 200 (187864.09ms)
2025-08-16 18:44:36.033 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 18:44:36.033 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 18:44:36.035 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.93ms)
2025-08-16 18:44:36.035 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.93ms)
2025-08-16 18:44:36.039 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:44:36.039 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:44:37.298 | INFO     | src.router.messages:message_stream:111 - Recived files in backend:[]
2025-08-16 18:44:37.298 | INFO     | src.router.messages:message_stream:111 - Recived files in backend:[]
2025-08-16 18:44:37.298 | INFO     | src.router.messages:message_stream:128 - Loading index from vector store...
2025-08-16 18:44:37.298 | INFO     | src.router.messages:message_stream:128 - Loading index from vector store...
2025-08-16 18:44:39.570 | ERROR    | src.router.messages:message_stream:180 - Streaming setup error: 
******
Could not load OpenAI model. If you intended to use OpenAI, please check your OPENAI_API_KEY.
Original error:
No API key found for OpenAI.
Please set either the OPENAI_API_KEY environment variable or openai.api_key prior to initialization.
API keys can be found or created at https://platform.openai.com/account/api-keys

To disable the LLM entirely, set llm=None.
******
2025-08-16 18:44:39.570 | ERROR    | src.router.messages:message_stream:180 - Streaming setup error: 
******
Could not load OpenAI model. If you intended to use OpenAI, please check your OPENAI_API_KEY.
Original error:
No API key found for OpenAI.
Please set either the OPENAI_API_KEY environment variable or openai.api_key prior to initialization.
API keys can be found or created at https://platform.openai.com/account/api-keys

To disable the LLM entirely, set llm=None.
******
2025-08-16 18:44:39.817 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 500 (3778.02ms)
2025-08-16 18:44:39.817 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 500 (3778.02ms)
2025-08-16 18:45:58.379 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 18:45:58.379 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 18:46:17.893 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 18:46:34.224 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:46:34.224 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:46:34.236 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:46:34.236 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:46:40.665 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:46:40.665 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:49:40.467 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 18:49:40.467 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 18:49:55.085 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 18:50:13.380 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:50:13.380 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:50:13.409 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:50:13.409 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:50:19.529 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:50:19.529 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:50:37.323 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:50:37.323 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:50:38.602 | INFO     | src.router.messages:message_stream:111 - Recived files in backend:[]
2025-08-16 18:50:38.602 | INFO     | src.router.messages:message_stream:111 - Recived files in backend:[]
2025-08-16 18:50:38.745 | INFO     | src.router.messages:message_stream:127 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 18:50:38.745 | INFO     | src.router.messages:message_stream:127 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 18:50:40.762 | INFO     | src.router.messages:message_stream:158 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 18:50:40.762 | INFO     | src.router.messages:message_stream:158 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 18:50:41.121 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3798.27ms)
2025-08-16 18:50:41.121 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3798.27ms)
2025-08-16 18:50:53.453 | INFO     | src.router.messages:stream_response:59 - Sending Source nodes : Node ID: 7f7478b1-a380-415b-9cca-fcfd9cb3f94e
Text: : unknown; inline?: boolean; className?: string; children?:
React.ReactNode; style?: React.CSSProperties }) => (
<CodeComponent             {...props}             idx={idx}
copiedCodeBlocks={copiedCodeBlocks}
onCodeBlockCopy={onCodeBlockCopy}         />     ),     p: ({ children
}) => (         <Text mb={3} lineHe...
Score:  0.000

2025-08-16 18:50:53.453 | INFO     | src.router.messages:stream_response:59 - Sending Source nodes : Node ID: 7f7478b1-a380-415b-9cca-fcfd9cb3f94e
Text: : unknown; inline?: boolean; className?: string; children?:
React.ReactNode; style?: React.CSSProperties }) => (
<CodeComponent             {...props}             idx={idx}
copiedCodeBlocks={copiedCodeBlocks}
onCodeBlockCopy={onCodeBlockCopy}         />     ),     p: ({ children
}) => (         <Text mb={3} lineHe...
Score:  0.000

2025-08-16 18:50:53.454 | INFO     | src.router.messages:stream_response:60 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 18:50:53.454 | INFO     | src.router.messages:stream_response:60 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 18:51:24.147 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:51:24.147 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:51:26.683 | INFO     | src.router.messages:message_stream:111 - Recived files in backend:[]
2025-08-16 18:51:26.683 | INFO     | src.router.messages:message_stream:111 - Recived files in backend:[]
2025-08-16 18:51:26.683 | INFO     | src.router.messages:message_stream:127 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 18:51:26.683 | INFO     | src.router.messages:message_stream:127 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 18:51:28.634 | INFO     | src.router.messages:message_stream:158 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 18:51:28.634 | INFO     | src.router.messages:message_stream:158 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 18:51:28.877 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4730.01ms)
2025-08-16 18:51:28.877 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4730.01ms)
2025-08-16 18:51:38.175 | INFO     | src.router.messages:stream_response:59 - Sending Source nodes : Node ID: 06fe1079-5b0a-4e09-ac56-0d4893f4dc23
Text: "gpt-4.1",     "gpt-3.5-turbo",     "gpt-o1",   ];    const
qwenModels: string[] = [     "Qwen3-0.6B",     "Qwen3-1.7B",
"Qwen3-4B",     "Qwen3-8B",     "Qwen3-14B",     "Qwen3-32B",
"Qwen3-72B-Instruct",     "Qwen3-235B",     "QwQ-32B",   ];    const
deepseekModels: string[] = [     "deepseek-r1",     "deepseek-v3",
"deepseek-v3-032...
Score:  0.000

2025-08-16 18:51:38.175 | INFO     | src.router.messages:stream_response:59 - Sending Source nodes : Node ID: 06fe1079-5b0a-4e09-ac56-0d4893f4dc23
Text: "gpt-4.1",     "gpt-3.5-turbo",     "gpt-o1",   ];    const
qwenModels: string[] = [     "Qwen3-0.6B",     "Qwen3-1.7B",
"Qwen3-4B",     "Qwen3-8B",     "Qwen3-14B",     "Qwen3-32B",
"Qwen3-72B-Instruct",     "Qwen3-235B",     "QwQ-32B",   ];    const
deepseekModels: string[] = [     "deepseek-r1",     "deepseek-v3",
"deepseek-v3-032...
Score:  0.000

2025-08-16 18:51:38.175 | INFO     | src.router.messages:stream_response:60 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 18:51:38.175 | INFO     | src.router.messages:stream_response:60 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 18:52:43.763 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 18:52:43.763 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 18:53:04.065 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 18:53:23.032 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:53:23.032 | INFO     | src.main:<module>:20 - Server started
2025-08-16 18:53:23.059 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:53:23.059 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 18:53:29.703 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:53:29.703 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 18:53:42.266 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:53:42.266 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:53:43.512 | INFO     | src.router.messages:message_stream:111 - Recived files in backend:[]
2025-08-16 18:53:43.512 | INFO     | src.router.messages:message_stream:111 - Recived files in backend:[]
2025-08-16 18:53:43.660 | INFO     | src.router.messages:message_stream:127 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 18:53:43.660 | INFO     | src.router.messages:message_stream:127 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 18:53:45.526 | INFO     | src.router.messages:message_stream:158 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 18:53:45.526 | INFO     | src.router.messages:message_stream:158 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 18:53:45.760 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3494.05ms)
2025-08-16 18:53:45.760 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3494.05ms)
2025-08-16 18:53:54.250 | INFO     | src.router.messages:stream_response:59 - Sending Source nodes : Node ID: 15794b66-0ac0-408e-bdd4-5aaceea95ae2
Text: export const Constants = () => {   const togetherModels:
string[] = [     "meta-llama/Llama-3.3-70B-Instruct-Turbo",     "meta-
llama/Llama-3.1-405B-Turbo",
"mistralai/Mixtral-8x7B-Instruct-v0.1",     "deepseek-
ai/DeepSeek-V3-0324",     "gemma/Gemma-3-27B",
"togethercomputer/StripedHyena-Nous-7B",
"togethercomputer/RedPajama-INCITE-Ch...
Score:  0.001

2025-08-16 18:53:54.250 | INFO     | src.router.messages:stream_response:59 - Sending Source nodes : Node ID: 15794b66-0ac0-408e-bdd4-5aaceea95ae2
Text: export const Constants = () => {   const togetherModels:
string[] = [     "meta-llama/Llama-3.3-70B-Instruct-Turbo",     "meta-
llama/Llama-3.1-405B-Turbo",
"mistralai/Mixtral-8x7B-Instruct-v0.1",     "deepseek-
ai/DeepSeek-V3-0324",     "gemma/Gemma-3-27B",
"togethercomputer/StripedHyena-Nous-7B",
"togethercomputer/RedPajama-INCITE-Ch...
Score:  0.001

2025-08-16 18:53:54.250 | INFO     | src.router.messages:stream_response:60 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 18:53:54.250 | INFO     | src.router.messages:stream_response:60 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 18:54:38.540 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 18:54:38.540 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 18:54:38.542 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (2.01ms)
2025-08-16 18:54:38.542 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (2.01ms)
2025-08-16 18:54:38.546 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:54:38.546 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:54:41.212 | INFO     | src.router.messages:message_stream:111 - Recived files in backend:[]
2025-08-16 18:54:41.212 | INFO     | src.router.messages:message_stream:111 - Recived files in backend:[]
2025-08-16 18:54:41.214 | INFO     | src.router.messages:message_stream:127 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 18:54:41.214 | INFO     | src.router.messages:message_stream:127 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 18:54:43.188 | INFO     | src.router.messages:message_stream:158 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 18:54:43.188 | INFO     | src.router.messages:message_stream:158 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 18:54:43.427 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4880.63ms)
2025-08-16 18:54:43.427 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4880.63ms)
2025-08-16 18:55:01.350 | INFO     | src.router.messages:stream_response:59 - Sending Source nodes : Node ID: 1815b6c1-9dfe-4694-87da-8a182046bdcb
Text: case 'done':
console.log('Stream completed');
isStreamComplete = true;                                          //
Final update with complete content and sources
updateMessage(assistantMsgId, {                                  ...
Score:  0.999

2025-08-16 18:55:01.350 | INFO     | src.router.messages:stream_response:59 - Sending Source nodes : Node ID: 1815b6c1-9dfe-4694-87da-8a182046bdcb
Text: case 'done':
console.log('Stream completed');
isStreamComplete = true;                                          //
Final update with complete content and sources
updateMessage(assistantMsgId, {                                  ...
Score:  0.999

2025-08-16 18:55:01.350 | INFO     | src.router.messages:stream_response:60 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 18:55:01.350 | INFO     | src.router.messages:stream_response:60 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 18:55:24.644 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:55:24.644 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:55:27.185 | INFO     | src.router.messages:message_stream:111 - Recived files in backend:[]
2025-08-16 18:55:27.185 | INFO     | src.router.messages:message_stream:111 - Recived files in backend:[]
2025-08-16 18:55:27.186 | INFO     | src.router.messages:message_stream:127 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 18:55:27.186 | INFO     | src.router.messages:message_stream:127 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 18:55:28.999 | INFO     | src.router.messages:message_stream:158 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 18:55:28.999 | INFO     | src.router.messages:message_stream:158 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 18:55:29.239 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4594.79ms)
2025-08-16 18:55:29.239 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4594.79ms)
2025-08-16 18:55:47.537 | INFO     | src.router.messages:stream_response:59 - Sending Source nodes : Node ID: 9c5f4213-868b-4ce3-ab5e-412639e6a634
Text: );                 } else {
setCurrentSessionId(null);                     clear();
setTitle("");                 }             }
console.log("Session deleted:", session_id);         } catch (e) {
console.error("Error deleting session", e);             throw e;
} finally { ...
Score:  0.001

2025-08-16 18:55:47.537 | INFO     | src.router.messages:stream_response:59 - Sending Source nodes : Node ID: 9c5f4213-868b-4ce3-ab5e-412639e6a634
Text: );                 } else {
setCurrentSessionId(null);                     clear();
setTitle("");                 }             }
console.log("Session deleted:", session_id);         } catch (e) {
console.error("Error deleting session", e);             throw e;
} finally { ...
Score:  0.001

2025-08-16 18:55:47.538 | INFO     | src.router.messages:stream_response:60 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 18:55:47.538 | INFO     | src.router.messages:stream_response:60 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 18:56:14.207 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:56:14.207 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:56:16.782 | INFO     | src.router.messages:message_stream:111 - Recived files in backend:[]
2025-08-16 18:56:16.782 | INFO     | src.router.messages:message_stream:111 - Recived files in backend:[]
2025-08-16 18:56:16.783 | INFO     | src.router.messages:message_stream:127 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 18:56:16.783 | INFO     | src.router.messages:message_stream:127 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 18:56:18.742 | INFO     | src.router.messages:message_stream:158 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 18:56:18.742 | INFO     | src.router.messages:message_stream:158 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 18:56:18.980 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4773.64ms)
2025-08-16 18:56:18.980 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4773.64ms)
2025-08-16 18:56:26.720 | INFO     | src.router.messages:stream_response:59 - Sending Source nodes : Node ID: b4661a42-befc-4852-afae-508b7d34b5f1
Text: @import url('https://fonts.googleapis.com/css2?family=Red+Rose:w
ght@400;700&display=swap'); @import url('https://fonts.googleapis.com/
css2?family=Jaldi:wght@400;700&display=swap');  body {   margin: 0;
font-family: 'Jaldi', 'Red Rose', -apple-system, BlinkMacSystemFont,
'Segoe UI', 'Roboto', 'Oxygen',     'Ubuntu', 'Cantarell', 'Fira
Sans', 'D...
Score:  0.000

2025-08-16 18:56:26.720 | INFO     | src.router.messages:stream_response:59 - Sending Source nodes : Node ID: b4661a42-befc-4852-afae-508b7d34b5f1
Text: @import url('https://fonts.googleapis.com/css2?family=Red+Rose:w
ght@400;700&display=swap'); @import url('https://fonts.googleapis.com/
css2?family=Jaldi:wght@400;700&display=swap');  body {   margin: 0;
font-family: 'Jaldi', 'Red Rose', -apple-system, BlinkMacSystemFont,
'Segoe UI', 'Roboto', 'Oxygen',     'Ubuntu', 'Cantarell', 'Fira
Sans', 'D...
Score:  0.000

2025-08-16 18:56:26.722 | INFO     | src.router.messages:stream_response:60 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 18:56:26.722 | INFO     | src.router.messages:stream_response:60 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 18:56:49.620 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:56:49.620 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:56:52.208 | INFO     | src.router.messages:message_stream:111 - Recived files in backend:[]
2025-08-16 18:56:52.208 | INFO     | src.router.messages:message_stream:111 - Recived files in backend:[]
2025-08-16 18:56:52.210 | INFO     | src.router.messages:message_stream:127 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 18:56:52.210 | INFO     | src.router.messages:message_stream:127 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 18:56:54.334 | INFO     | src.router.messages:message_stream:158 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 18:56:54.334 | INFO     | src.router.messages:message_stream:158 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 18:56:54.580 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4960.09ms)
2025-08-16 18:56:54.580 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4960.09ms)
2025-08-16 18:57:10.715 | ERROR    | src.router.messages:stream_response:83 - Streaming error: Calculated available context size -1151 was not non-negative.
2025-08-16 18:57:10.715 | ERROR    | src.router.messages:stream_response:83 - Streaming error: Calculated available context size -1151 was not non-negative.
2025-08-16 18:57:20.674 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 18:57:20.674 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 18:57:20.675 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.0ms)
2025-08-16 18:57:20.675 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.0ms)
2025-08-16 18:57:20.982 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 18:57:20.982 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 18:57:23.320 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2338.69ms)
2025-08-16 18:57:23.320 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2338.69ms)
2025-08-16 18:57:24.348 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/b483374f-fdea-4479-befa-6b84bdde3071
2025-08-16 18:57:24.348 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/b483374f-fdea-4479-befa-6b84bdde3071
2025-08-16 18:57:24.349 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/b483374f-fdea-4479-befa-6b84bdde3071 → 200 (1.0ms)
2025-08-16 18:57:24.349 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/b483374f-fdea-4479-befa-6b84bdde3071 → 200 (1.0ms)
2025-08-16 18:57:24.350 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/b483374f-fdea-4479-befa-6b84bdde3071
2025-08-16 18:57:24.350 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/b483374f-fdea-4479-befa-6b84bdde3071
2025-08-16 18:57:25.407 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('bd583eab-4118-4f10-9dd0-9b20c4ecc3d4'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 50, 53, 455695), content='What did you learn from codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('3e19482c-0a1b-48a4-8115-5c50d6ed999d'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 50, 55, 309759), content='From the two snippets you shared, I was able to piece together a few key ideas about how this project is structured and what its main responsibilities are.\n\n---\n\n### 1. Rendering Markdown with Chakra UI\n\n**File:** `src/components/MarkdownComponents.tsx`\n\n* The component exports a mapping of standard Markdown tags (`p`, `h1`, `h2`, `h3`, `ul`, `ol`, `li`, `blockquote`, etc.) to custom React components that use Chakra UI primitives (`Text`, `Box`, etc.).  \n* **Styling choices**  \n  * Paragraphs (`p`) are rendered with a purple‑colored text (`purple.50`) and a line‑height of 1.7.  \n  * Headings (`h1`, `h2`, `h3`) use progressively smaller font sizes (`xl`, `lg`, `md`) but all share the same purple accent (`purple.200`).  \n  * Lists (`ul`, `ol`) are indented (`ml={4}`) and their items (`li`) get a small bottom margin.  \n  * Blockquotes are highlighted with a purple left border and a light purple background (`rgba(139, 92, 246, 0.1)`).\n* **Code blocks**  \n  * The `code` tag is wired to a `CodeComponent` that receives props such as `idx`, `copiedCodeBlocks`, and an `onCodeBlockCopy` callback.  \n  * This suggests that code snippets are interactive—users can copy them, and the component tracks which blocks have been copied.\n\n**Example usage**\n\n```tsx\n<MarkdownComponents>\n  <h1>Welcome</h1>\n  <p>This is a sample paragraph.</p>\n  <code>console.log(\'Hello world\');</code>\n</MarkdownComponents>\n```\n\nThe above would render a styled heading, paragraph, and a copy‑able code block.\n\n---\n\n### 2. Centralized Model & Provider Configuration\n\n**File:** `src/entities/Constants.ts`\n\n* The file defines a large number of **model identifiers** for various AI providers (OpenAI, Gemini, Groq, DeepSeek, etc.).  \n* **Provider lists**  \n  * `modelsProviders` contains the names of supported providers.  \n  * `ollamaModels`, `groqModels`, `togetherModels`, etc., list specific model names for each provider.  \n* **Mapping**  \n  * `providers_models` is a `Map<string, string[]>` that links a provider key (e.g., `"groq"`) to its array of model names.  \n  * This structure makes it easy to look up all models for a given provider at runtime.\n\n**Why this matters**\n\n* The application likely offers a UI where users can pick a provider and then choose a model from the corresponding list.  \n* By centralizing these constants, the codebase ensures consistency across the UI, API calls, and any logic that depends on the available models.\n\n**Example lookup**\n\n```ts\nconst groqModels = providers_models.get(\'groq\'); // returns the array of Groq model names\n```\n\n---\n\n### 3. Overall Observations\n\n1. **UI Layer** – The project uses Chakra UI for styling, which keeps the component code concise and theme‑aware.  \n2. **Interactivity** – Code blocks are not just static; they support copy‑to‑clipboard functionality, hinting at a user‑friendly design.  \n3. **Extensibility** – The constants file is designed to be easily extended: adding a new provider or model is as simple as appending to the relevant array and updating the map.  \n4. **Consistency** – By mapping Markdown tags to Chakra components, the app guarantees a uniform look for all rendered markdown content, regardless of source.\n\n---\n\nIn short, the codebase is focused on delivering a polished, theme‑consistent Markdown renderer and a flexible, centralized configuration for AI model selection. This setup makes it straightforward to add new providers or tweak the UI without touching many disparate parts of the code.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('9e05019f-85dc-48af-8731-1306f9e7e3ad'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 51, 38, 178029), content='Give entire dir structure of codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('ab3aaff8-c7b9-4bfd-b103-e2ae9793c222'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 51, 39, 853223), content='Below is a **complete directory tree** that reflects everything we can see (and reasonably infer) from the snippets you shared.  \nIf the repository contains additional files or folders that weren’t mentioned in the snippets, they’ll appear as “…” placeholders.\n\n```\n/\n├── package.json\n├── tsconfig.json\n├── public/\n│   ├── index.html\n│   └── ... (static assets)\n└── src/\n    ├── index.css\n    ├── main.tsx\n    ├── router.tsx\n    ├── theme.ts\n    ├── components/\n    │   ├── ui/\n    │   │   └── toaster.tsx\n    │   └── ... (other UI components)\n    ├── entities/\n    │   └── Constants.ts\n    └── ... (any additional source folders)\n```\n\n### What we know from the snippets\n\n| File | Purpose (as inferred) |\n|------|-----------------------|\n| **src/main.tsx** | Entry point that mounts the React app, wraps it in Chakra UI, and injects the router and toaster. |\n| **src/router.tsx** | Defines the app’s routing (not shown, but imported in `main.tsx`). |\n| **src/theme.ts** | Custom Chakra UI theme configuration. |\n| **src/components/ui/toaster.tsx** | Toast notification component. |\n| **src/entities/Constants.ts** | Centralised list of AI model identifiers for various providers. |\n| **src/index.css** | Global CSS (likely contains resets or base styles). |\n\nIf you need the exact contents of any of the “…” placeholders, let me know and I can dive deeper into that part of the codebase!', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('2b8c48ab-8b1b-4252-a83c-ec9871313bc9'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 53, 54, 251739), content='What do you think this codebase is about', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('a3027a46-1bbe-4160-ae85-299e6bf4ccd8'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 53, 55, 961520), content='## What the codebase is about\n\nFrom the snippets you shared, the project is a **web‑based AI‑assistant / chat platform** that lets users:\n\n1. **Choose a language‑model provider** (OpenAI, Gemini, Groq, DeepSeek, etc.)  \n2. **Select a specific model** from that provider’s catalog.  \n3. **Interact with the model** through a chat UI that renders responses as Markdown, including code blocks that can be copied to the clipboard.  \n\nBelow is a quick rundown of the key pieces that make this possible.\n\n| Layer | What it does | How it’s implemented |\n|-------|--------------|----------------------|\n| **Model configuration** | Centralised list of all supported providers and their models. | `src/entities/Constants.ts` defines arrays (`togetherModels`, `deepInfraModels`, …) and a `Map` (`providers_models`) that maps a provider key to its model list. |\n| **UI / styling** | Consistent, theme‑aware rendering of chat messages. | Chakra‑UI is used throughout (`theme.ts`, `components/MarkdownComponents.tsx`). Markdown tags are mapped to Chakra components, so every message looks the same regardless of source. |\n| **Markdown rendering** | Chat responses can contain rich text, lists, blockquotes, and code snippets. | `MarkdownComponents.tsx` provides custom components for each Markdown element, including a copy‑to‑clipboard button for `<code>` blocks. |\n| **Interaction** | Users can copy code snippets, switch providers/models, and see real‑time responses. | The copy‑to‑clipboard logic is wired into the `<code>` component; provider/model selection likely lives in a sidebar or dropdown (not shown in the snippets). |\n| **Routing / entry point** | The app is a single‑page React application. | `main.tsx` mounts the root component, wraps it in Chakra’s `<ChakraProvider>`, and sets up routing (`router.tsx`). |\n\n### Why this structure makes sense\n\n- **Extensibility** – Adding a new provider or model is as simple as appending to the relevant array and updating the `Map`.  \n- **Consistency** – All Markdown content is rendered through the same Chakra‑based component tree, so the look and feel stays uniform.  \n- **User experience** – Copyable code blocks and a clean theme make the chat interface friendly for developers and non‑developers alike.  \n\nIn short, the codebase is a **developer‑friendly, multi‑provider AI chat application** that emphasizes clean UI, easy configuration, and rich text rendering.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('ee761079-e205-44a9-8871-2f97ee01b613'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 1, 351580), content='Can you get useMessage hook from this codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('6e8d9f1f-4cff-41e8-9323-4a3286a0f4fb'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 3, 219930), content='', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('4cb28318-2cf5-41d6-b2aa-3bc409cc96bd'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 47, 540404), content='Fetch again', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('aa083c8f-1df3-47d6-bd98-fc4fe44e3953'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 49, 235504), content="I’m afraid the snippets you shared don’t include a `useMessage` hook, so I can’t pull the exact source code from the context you’ve provided.  \nIf the hook lives in the repository (most likely under `src/hooks/useMessage.ts`), you can fetch it directly from GitHub with a URL like:\n\n```\nhttps://raw.githubusercontent.com/DineshThumma9/centralGPT/main/src/hooks/useMessage.ts\n```\n\nIf you can confirm the file’s location or paste its contents here, I’ll be able to give you the precise implementation.\n\n---\n\n### A quick “what you might expect” sketch\n\nBelow is a **generic outline** of what a `useMessage` hook could look like in a project that already has:\n\n* `sessionStore` (for global session & message state)\n* `session-api` (for API calls to send/receive messages)\n* `useSessions` (for session‑management helpers)\n\n```ts\n// src/hooks/useMessage.ts\nimport { useState, useEffect, useCallback } from 'react';\nimport { useSessionStore } from '../store/sessionStore';\nimport { sendMessage, getMessageHistory } from '../api/message-api';\n\nexport const useMessage = () => {\n  // Grab session‑related state from the global store\n  const {\n    current_session,\n    messages,\n    setMessages,\n    setLoading,\n    setStreaming,\n  } = useSessionStore();\n\n  // Local state for the input field\n  const [input, setInput] = useState('');\n\n  // Helper to append a new message to the store\n  const addMessage = (msg: Message) =>\n    setMessages((prev) => [...prev, msg]);\n\n  // Send a user message and stream the assistant’s reply\n  const send = useCallback(async () => {\n    if (!input.trim() || !current_session) return;\n\n    // 1️⃣ Add the user’s message immediately\n    const userMsg: Message = {\n      role: 'user',\n      content: input,\n      timestamp: new Date().toISOString(),\n    };\n    addMessage(userMsg);\n\n    // 2️⃣ Prepare for streaming\n    setLoading(true);\n    setStreaming(true);\n\n    try {\n      // 3️⃣ Call the backend – this could be a simple POST or a SSE endpoint\n      const stream = await sendMessage(current_session, input);\n\n      // 4️⃣ Consume the stream (pseudo‑code)\n      for await (const chunk of stream) {\n        // Append partial assistant replies as they arrive\n        addMessage({\n          role: 'assistant',\n          content: chunk,\n          timestamp: new Date().toISOString(),\n        });\n      }\n    } catch (err) {\n      console.error('Message send failed', err);\n    } finally {\n      setLoading(false);\n      setStreaming(false);\n      setInput(''); // clear the input field\n    }\n  }, [input, current_session, setLoading, setStreaming, setMessages]);\n\n  // Load the message history when a session is selected\n  useEffect(() => {\n    if (!current_session) return;\n\n    const loadHistory = async () => {\n      setLoading(true);\n      try {\n        const history = await getMessageHistory(current_session);\n        setMessages(history);\n      } catch (err) {\n        console.error('Failed to load history', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadHistory();\n  }, [current_session, setLoading, setMessages]);\n\n  return {\n    input,\n    setInput,\n    send,\n    messages,\n  };\n};\n```\n\n> **Note:**  \n> *The actual implementation in your repo may differ in naming, API shape, or streaming logic. The above is just a template that shows how the hook could tie together the store, API, and UI.*\n\n---\n\n### Next steps\n\n1. **Verify the file path** – If `useMessage` is indeed in `src/hooks/useMessage.ts`, copy the raw URL above into your browser or a tool like `curl` to see the real code.  \n2. **Share the file** – If you paste the file’s contents here, I can walk through it line‑by‑line.  \n3", files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('1240f1cc-23fd-4798-a794-0c252029127b'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 56, 26, 723455), content='What is file you are most familier with', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('705c8242-94b7-44b6-8ea7-50a35273d40e'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 56, 28, 436968), content='I’m most familiar with **`src/components/LLMModelChooser.tsx`**.  \nIt’s the component that lets users pick an AI provider and a specific model, and it also shows the current API key. Here’s a quick rundown of what it does and why it’s central to the app:\n\n| Feature | What it does | Why it matters |\n|---------|--------------|----------------|\n| **Provider badge** | `<BadgeCompo label={currentLLMProvider}/>` | Gives instant visual feedback on which provider is active. |\n| **Model badge** | `<BadgeCompo label={currentModel}/>` | Shows the chosen model, so users know exactly what they’re chatting with. |\n| **API key input** | `<APIKey provider={currentAPIProvider} title="API KEY" />` | Lets users enter or update the key for the selected provider. |\n| **Conditional rendering** | `{(currentLLMProvider || currentModel || shouldStream) && …}` | Only shows the badges when there’s something to display, keeping the UI clean. |\n| **Layout** | Uses Chakra UI’s `<HStack>` for horizontal alignment and spacing. | Keeps the UI consistent with the rest of the app’s Chakra‑based design. |\n\nBecause this component sits at the intersection of user configuration (provider, model, key) and the rest of the chat logic, it’s a good entry point for understanding how the app manages state and interacts with the backend.', files=None, model_response_time_ms=None)]
2025-08-16 18:57:25.407 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('bd583eab-4118-4f10-9dd0-9b20c4ecc3d4'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 50, 53, 455695), content='What did you learn from codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('3e19482c-0a1b-48a4-8115-5c50d6ed999d'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 50, 55, 309759), content='From the two snippets you shared, I was able to piece together a few key ideas about how this project is structured and what its main responsibilities are.\n\n---\n\n### 1. Rendering Markdown with Chakra UI\n\n**File:** `src/components/MarkdownComponents.tsx`\n\n* The component exports a mapping of standard Markdown tags (`p`, `h1`, `h2`, `h3`, `ul`, `ol`, `li`, `blockquote`, etc.) to custom React components that use Chakra UI primitives (`Text`, `Box`, etc.).  \n* **Styling choices**  \n  * Paragraphs (`p`) are rendered with a purple‑colored text (`purple.50`) and a line‑height of 1.7.  \n  * Headings (`h1`, `h2`, `h3`) use progressively smaller font sizes (`xl`, `lg`, `md`) but all share the same purple accent (`purple.200`).  \n  * Lists (`ul`, `ol`) are indented (`ml={4}`) and their items (`li`) get a small bottom margin.  \n  * Blockquotes are highlighted with a purple left border and a light purple background (`rgba(139, 92, 246, 0.1)`).\n* **Code blocks**  \n  * The `code` tag is wired to a `CodeComponent` that receives props such as `idx`, `copiedCodeBlocks`, and an `onCodeBlockCopy` callback.  \n  * This suggests that code snippets are interactive—users can copy them, and the component tracks which blocks have been copied.\n\n**Example usage**\n\n```tsx\n<MarkdownComponents>\n  <h1>Welcome</h1>\n  <p>This is a sample paragraph.</p>\n  <code>console.log(\'Hello world\');</code>\n</MarkdownComponents>\n```\n\nThe above would render a styled heading, paragraph, and a copy‑able code block.\n\n---\n\n### 2. Centralized Model & Provider Configuration\n\n**File:** `src/entities/Constants.ts`\n\n* The file defines a large number of **model identifiers** for various AI providers (OpenAI, Gemini, Groq, DeepSeek, etc.).  \n* **Provider lists**  \n  * `modelsProviders` contains the names of supported providers.  \n  * `ollamaModels`, `groqModels`, `togetherModels`, etc., list specific model names for each provider.  \n* **Mapping**  \n  * `providers_models` is a `Map<string, string[]>` that links a provider key (e.g., `"groq"`) to its array of model names.  \n  * This structure makes it easy to look up all models for a given provider at runtime.\n\n**Why this matters**\n\n* The application likely offers a UI where users can pick a provider and then choose a model from the corresponding list.  \n* By centralizing these constants, the codebase ensures consistency across the UI, API calls, and any logic that depends on the available models.\n\n**Example lookup**\n\n```ts\nconst groqModels = providers_models.get(\'groq\'); // returns the array of Groq model names\n```\n\n---\n\n### 3. Overall Observations\n\n1. **UI Layer** – The project uses Chakra UI for styling, which keeps the component code concise and theme‑aware.  \n2. **Interactivity** – Code blocks are not just static; they support copy‑to‑clipboard functionality, hinting at a user‑friendly design.  \n3. **Extensibility** – The constants file is designed to be easily extended: adding a new provider or model is as simple as appending to the relevant array and updating the map.  \n4. **Consistency** – By mapping Markdown tags to Chakra components, the app guarantees a uniform look for all rendered markdown content, regardless of source.\n\n---\n\nIn short, the codebase is focused on delivering a polished, theme‑consistent Markdown renderer and a flexible, centralized configuration for AI model selection. This setup makes it straightforward to add new providers or tweak the UI without touching many disparate parts of the code.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('9e05019f-85dc-48af-8731-1306f9e7e3ad'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 51, 38, 178029), content='Give entire dir structure of codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('ab3aaff8-c7b9-4bfd-b103-e2ae9793c222'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 51, 39, 853223), content='Below is a **complete directory tree** that reflects everything we can see (and reasonably infer) from the snippets you shared.  \nIf the repository contains additional files or folders that weren’t mentioned in the snippets, they’ll appear as “…” placeholders.\n\n```\n/\n├── package.json\n├── tsconfig.json\n├── public/\n│   ├── index.html\n│   └── ... (static assets)\n└── src/\n    ├── index.css\n    ├── main.tsx\n    ├── router.tsx\n    ├── theme.ts\n    ├── components/\n    │   ├── ui/\n    │   │   └── toaster.tsx\n    │   └── ... (other UI components)\n    ├── entities/\n    │   └── Constants.ts\n    └── ... (any additional source folders)\n```\n\n### What we know from the snippets\n\n| File | Purpose (as inferred) |\n|------|-----------------------|\n| **src/main.tsx** | Entry point that mounts the React app, wraps it in Chakra UI, and injects the router and toaster. |\n| **src/router.tsx** | Defines the app’s routing (not shown, but imported in `main.tsx`). |\n| **src/theme.ts** | Custom Chakra UI theme configuration. |\n| **src/components/ui/toaster.tsx** | Toast notification component. |\n| **src/entities/Constants.ts** | Centralised list of AI model identifiers for various providers. |\n| **src/index.css** | Global CSS (likely contains resets or base styles). |\n\nIf you need the exact contents of any of the “…” placeholders, let me know and I can dive deeper into that part of the codebase!', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('2b8c48ab-8b1b-4252-a83c-ec9871313bc9'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 53, 54, 251739), content='What do you think this codebase is about', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('a3027a46-1bbe-4160-ae85-299e6bf4ccd8'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 53, 55, 961520), content='## What the codebase is about\n\nFrom the snippets you shared, the project is a **web‑based AI‑assistant / chat platform** that lets users:\n\n1. **Choose a language‑model provider** (OpenAI, Gemini, Groq, DeepSeek, etc.)  \n2. **Select a specific model** from that provider’s catalog.  \n3. **Interact with the model** through a chat UI that renders responses as Markdown, including code blocks that can be copied to the clipboard.  \n\nBelow is a quick rundown of the key pieces that make this possible.\n\n| Layer | What it does | How it’s implemented |\n|-------|--------------|----------------------|\n| **Model configuration** | Centralised list of all supported providers and their models. | `src/entities/Constants.ts` defines arrays (`togetherModels`, `deepInfraModels`, …) and a `Map` (`providers_models`) that maps a provider key to its model list. |\n| **UI / styling** | Consistent, theme‑aware rendering of chat messages. | Chakra‑UI is used throughout (`theme.ts`, `components/MarkdownComponents.tsx`). Markdown tags are mapped to Chakra components, so every message looks the same regardless of source. |\n| **Markdown rendering** | Chat responses can contain rich text, lists, blockquotes, and code snippets. | `MarkdownComponents.tsx` provides custom components for each Markdown element, including a copy‑to‑clipboard button for `<code>` blocks. |\n| **Interaction** | Users can copy code snippets, switch providers/models, and see real‑time responses. | The copy‑to‑clipboard logic is wired into the `<code>` component; provider/model selection likely lives in a sidebar or dropdown (not shown in the snippets). |\n| **Routing / entry point** | The app is a single‑page React application. | `main.tsx` mounts the root component, wraps it in Chakra’s `<ChakraProvider>`, and sets up routing (`router.tsx`). |\n\n### Why this structure makes sense\n\n- **Extensibility** – Adding a new provider or model is as simple as appending to the relevant array and updating the `Map`.  \n- **Consistency** – All Markdown content is rendered through the same Chakra‑based component tree, so the look and feel stays uniform.  \n- **User experience** – Copyable code blocks and a clean theme make the chat interface friendly for developers and non‑developers alike.  \n\nIn short, the codebase is a **developer‑friendly, multi‑provider AI chat application** that emphasizes clean UI, easy configuration, and rich text rendering.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('ee761079-e205-44a9-8871-2f97ee01b613'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 1, 351580), content='Can you get useMessage hook from this codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('6e8d9f1f-4cff-41e8-9323-4a3286a0f4fb'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 3, 219930), content='', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('4cb28318-2cf5-41d6-b2aa-3bc409cc96bd'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 47, 540404), content='Fetch again', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('aa083c8f-1df3-47d6-bd98-fc4fe44e3953'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 49, 235504), content="I’m afraid the snippets you shared don’t include a `useMessage` hook, so I can’t pull the exact source code from the context you’ve provided.  \nIf the hook lives in the repository (most likely under `src/hooks/useMessage.ts`), you can fetch it directly from GitHub with a URL like:\n\n```\nhttps://raw.githubusercontent.com/DineshThumma9/centralGPT/main/src/hooks/useMessage.ts\n```\n\nIf you can confirm the file’s location or paste its contents here, I’ll be able to give you the precise implementation.\n\n---\n\n### A quick “what you might expect” sketch\n\nBelow is a **generic outline** of what a `useMessage` hook could look like in a project that already has:\n\n* `sessionStore` (for global session & message state)\n* `session-api` (for API calls to send/receive messages)\n* `useSessions` (for session‑management helpers)\n\n```ts\n// src/hooks/useMessage.ts\nimport { useState, useEffect, useCallback } from 'react';\nimport { useSessionStore } from '../store/sessionStore';\nimport { sendMessage, getMessageHistory } from '../api/message-api';\n\nexport const useMessage = () => {\n  // Grab session‑related state from the global store\n  const {\n    current_session,\n    messages,\n    setMessages,\n    setLoading,\n    setStreaming,\n  } = useSessionStore();\n\n  // Local state for the input field\n  const [input, setInput] = useState('');\n\n  // Helper to append a new message to the store\n  const addMessage = (msg: Message) =>\n    setMessages((prev) => [...prev, msg]);\n\n  // Send a user message and stream the assistant’s reply\n  const send = useCallback(async () => {\n    if (!input.trim() || !current_session) return;\n\n    // 1️⃣ Add the user’s message immediately\n    const userMsg: Message = {\n      role: 'user',\n      content: input,\n      timestamp: new Date().toISOString(),\n    };\n    addMessage(userMsg);\n\n    // 2️⃣ Prepare for streaming\n    setLoading(true);\n    setStreaming(true);\n\n    try {\n      // 3️⃣ Call the backend – this could be a simple POST or a SSE endpoint\n      const stream = await sendMessage(current_session, input);\n\n      // 4️⃣ Consume the stream (pseudo‑code)\n      for await (const chunk of stream) {\n        // Append partial assistant replies as they arrive\n        addMessage({\n          role: 'assistant',\n          content: chunk,\n          timestamp: new Date().toISOString(),\n        });\n      }\n    } catch (err) {\n      console.error('Message send failed', err);\n    } finally {\n      setLoading(false);\n      setStreaming(false);\n      setInput(''); // clear the input field\n    }\n  }, [input, current_session, setLoading, setStreaming, setMessages]);\n\n  // Load the message history when a session is selected\n  useEffect(() => {\n    if (!current_session) return;\n\n    const loadHistory = async () => {\n      setLoading(true);\n      try {\n        const history = await getMessageHistory(current_session);\n        setMessages(history);\n      } catch (err) {\n        console.error('Failed to load history', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadHistory();\n  }, [current_session, setLoading, setMessages]);\n\n  return {\n    input,\n    setInput,\n    send,\n    messages,\n  };\n};\n```\n\n> **Note:**  \n> *The actual implementation in your repo may differ in naming, API shape, or streaming logic. The above is just a template that shows how the hook could tie together the store, API, and UI.*\n\n---\n\n### Next steps\n\n1. **Verify the file path** – If `useMessage` is indeed in `src/hooks/useMessage.ts`, copy the raw URL above into your browser or a tool like `curl` to see the real code.  \n2. **Share the file** – If you paste the file’s contents here, I can walk through it line‑by‑line.  \n3", files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('1240f1cc-23fd-4798-a794-0c252029127b'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 56, 26, 723455), content='What is file you are most familier with', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('705c8242-94b7-44b6-8ea7-50a35273d40e'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 56, 28, 436968), content='I’m most familiar with **`src/components/LLMModelChooser.tsx`**.  \nIt’s the component that lets users pick an AI provider and a specific model, and it also shows the current API key. Here’s a quick rundown of what it does and why it’s central to the app:\n\n| Feature | What it does | Why it matters |\n|---------|--------------|----------------|\n| **Provider badge** | `<BadgeCompo label={currentLLMProvider}/>` | Gives instant visual feedback on which provider is active. |\n| **Model badge** | `<BadgeCompo label={currentModel}/>` | Shows the chosen model, so users know exactly what they’re chatting with. |\n| **API key input** | `<APIKey provider={currentAPIProvider} title="API KEY" />` | Lets users enter or update the key for the selected provider. |\n| **Conditional rendering** | `{(currentLLMProvider || currentModel || shouldStream) && …}` | Only shows the badges when there’s something to display, keeping the UI clean. |\n| **Layout** | Uses Chakra UI’s `<HStack>` for horizontal alignment and spacing. | Keeps the UI consistent with the rest of the app’s Chakra‑based design. |\n\nBecause this component sits at the intersection of user configuration (provider, model, key) and the rest of the chat logic, it’s a good entry point for understanding how the app manages state and interacts with the backend.', files=None, model_response_time_ms=None)]
2025-08-16 18:57:25.681 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('bd583eab-4118-4f10-9dd0-9b20c4ecc3d4'), 'session_id': UUID('b483374f-fdea-4479-befa-6b84bdde3071'), 'timestamp': datetime.datetime(2025, 8, 16, 18, 50, 53, 455695), 'content': 'What did you learn from codebase', 'files': [], 'model_response_time_ms': None}
2025-08-16 18:57:25.681 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('bd583eab-4118-4f10-9dd0-9b20c4ecc3d4'), 'session_id': UUID('b483374f-fdea-4479-befa-6b84bdde3071'), 'timestamp': datetime.datetime(2025, 8, 16, 18, 50, 53, 455695), 'content': 'What did you learn from codebase', 'files': [], 'model_response_time_ms': None}
2025-08-16 18:57:25.928 | INFO     | src.main:log_requests:54 - GET /sessions/history/b483374f-fdea-4479-befa-6b84bdde3071 → 200 (1577.72ms)
2025-08-16 18:57:25.928 | INFO     | src.main:log_requests:54 - GET /sessions/history/b483374f-fdea-4479-befa-6b84bdde3071 → 200 (1577.72ms)
2025-08-16 18:57:25.932 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/b483374f-fdea-4479-befa-6b84bdde3071
2025-08-16 18:57:25.932 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/b483374f-fdea-4479-befa-6b84bdde3071
2025-08-16 18:57:26.917 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('bd583eab-4118-4f10-9dd0-9b20c4ecc3d4'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 50, 53, 455695), content='What did you learn from codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('3e19482c-0a1b-48a4-8115-5c50d6ed999d'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 50, 55, 309759), content='From the two snippets you shared, I was able to piece together a few key ideas about how this project is structured and what its main responsibilities are.\n\n---\n\n### 1. Rendering Markdown with Chakra UI\n\n**File:** `src/components/MarkdownComponents.tsx`\n\n* The component exports a mapping of standard Markdown tags (`p`, `h1`, `h2`, `h3`, `ul`, `ol`, `li`, `blockquote`, etc.) to custom React components that use Chakra UI primitives (`Text`, `Box`, etc.).  \n* **Styling choices**  \n  * Paragraphs (`p`) are rendered with a purple‑colored text (`purple.50`) and a line‑height of 1.7.  \n  * Headings (`h1`, `h2`, `h3`) use progressively smaller font sizes (`xl`, `lg`, `md`) but all share the same purple accent (`purple.200`).  \n  * Lists (`ul`, `ol`) are indented (`ml={4}`) and their items (`li`) get a small bottom margin.  \n  * Blockquotes are highlighted with a purple left border and a light purple background (`rgba(139, 92, 246, 0.1)`).\n* **Code blocks**  \n  * The `code` tag is wired to a `CodeComponent` that receives props such as `idx`, `copiedCodeBlocks`, and an `onCodeBlockCopy` callback.  \n  * This suggests that code snippets are interactive—users can copy them, and the component tracks which blocks have been copied.\n\n**Example usage**\n\n```tsx\n<MarkdownComponents>\n  <h1>Welcome</h1>\n  <p>This is a sample paragraph.</p>\n  <code>console.log(\'Hello world\');</code>\n</MarkdownComponents>\n```\n\nThe above would render a styled heading, paragraph, and a copy‑able code block.\n\n---\n\n### 2. Centralized Model & Provider Configuration\n\n**File:** `src/entities/Constants.ts`\n\n* The file defines a large number of **model identifiers** for various AI providers (OpenAI, Gemini, Groq, DeepSeek, etc.).  \n* **Provider lists**  \n  * `modelsProviders` contains the names of supported providers.  \n  * `ollamaModels`, `groqModels`, `togetherModels`, etc., list specific model names for each provider.  \n* **Mapping**  \n  * `providers_models` is a `Map<string, string[]>` that links a provider key (e.g., `"groq"`) to its array of model names.  \n  * This structure makes it easy to look up all models for a given provider at runtime.\n\n**Why this matters**\n\n* The application likely offers a UI where users can pick a provider and then choose a model from the corresponding list.  \n* By centralizing these constants, the codebase ensures consistency across the UI, API calls, and any logic that depends on the available models.\n\n**Example lookup**\n\n```ts\nconst groqModels = providers_models.get(\'groq\'); // returns the array of Groq model names\n```\n\n---\n\n### 3. Overall Observations\n\n1. **UI Layer** – The project uses Chakra UI for styling, which keeps the component code concise and theme‑aware.  \n2. **Interactivity** – Code blocks are not just static; they support copy‑to‑clipboard functionality, hinting at a user‑friendly design.  \n3. **Extensibility** – The constants file is designed to be easily extended: adding a new provider or model is as simple as appending to the relevant array and updating the map.  \n4. **Consistency** – By mapping Markdown tags to Chakra components, the app guarantees a uniform look for all rendered markdown content, regardless of source.\n\n---\n\nIn short, the codebase is focused on delivering a polished, theme‑consistent Markdown renderer and a flexible, centralized configuration for AI model selection. This setup makes it straightforward to add new providers or tweak the UI without touching many disparate parts of the code.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('9e05019f-85dc-48af-8731-1306f9e7e3ad'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 51, 38, 178029), content='Give entire dir structure of codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('ab3aaff8-c7b9-4bfd-b103-e2ae9793c222'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 51, 39, 853223), content='Below is a **complete directory tree** that reflects everything we can see (and reasonably infer) from the snippets you shared.  \nIf the repository contains additional files or folders that weren’t mentioned in the snippets, they’ll appear as “…” placeholders.\n\n```\n/\n├── package.json\n├── tsconfig.json\n├── public/\n│   ├── index.html\n│   └── ... (static assets)\n└── src/\n    ├── index.css\n    ├── main.tsx\n    ├── router.tsx\n    ├── theme.ts\n    ├── components/\n    │   ├── ui/\n    │   │   └── toaster.tsx\n    │   └── ... (other UI components)\n    ├── entities/\n    │   └── Constants.ts\n    └── ... (any additional source folders)\n```\n\n### What we know from the snippets\n\n| File | Purpose (as inferred) |\n|------|-----------------------|\n| **src/main.tsx** | Entry point that mounts the React app, wraps it in Chakra UI, and injects the router and toaster. |\n| **src/router.tsx** | Defines the app’s routing (not shown, but imported in `main.tsx`). |\n| **src/theme.ts** | Custom Chakra UI theme configuration. |\n| **src/components/ui/toaster.tsx** | Toast notification component. |\n| **src/entities/Constants.ts** | Centralised list of AI model identifiers for various providers. |\n| **src/index.css** | Global CSS (likely contains resets or base styles). |\n\nIf you need the exact contents of any of the “…” placeholders, let me know and I can dive deeper into that part of the codebase!', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('2b8c48ab-8b1b-4252-a83c-ec9871313bc9'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 53, 54, 251739), content='What do you think this codebase is about', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('a3027a46-1bbe-4160-ae85-299e6bf4ccd8'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 53, 55, 961520), content='## What the codebase is about\n\nFrom the snippets you shared, the project is a **web‑based AI‑assistant / chat platform** that lets users:\n\n1. **Choose a language‑model provider** (OpenAI, Gemini, Groq, DeepSeek, etc.)  \n2. **Select a specific model** from that provider’s catalog.  \n3. **Interact with the model** through a chat UI that renders responses as Markdown, including code blocks that can be copied to the clipboard.  \n\nBelow is a quick rundown of the key pieces that make this possible.\n\n| Layer | What it does | How it’s implemented |\n|-------|--------------|----------------------|\n| **Model configuration** | Centralised list of all supported providers and their models. | `src/entities/Constants.ts` defines arrays (`togetherModels`, `deepInfraModels`, …) and a `Map` (`providers_models`) that maps a provider key to its model list. |\n| **UI / styling** | Consistent, theme‑aware rendering of chat messages. | Chakra‑UI is used throughout (`theme.ts`, `components/MarkdownComponents.tsx`). Markdown tags are mapped to Chakra components, so every message looks the same regardless of source. |\n| **Markdown rendering** | Chat responses can contain rich text, lists, blockquotes, and code snippets. | `MarkdownComponents.tsx` provides custom components for each Markdown element, including a copy‑to‑clipboard button for `<code>` blocks. |\n| **Interaction** | Users can copy code snippets, switch providers/models, and see real‑time responses. | The copy‑to‑clipboard logic is wired into the `<code>` component; provider/model selection likely lives in a sidebar or dropdown (not shown in the snippets). |\n| **Routing / entry point** | The app is a single‑page React application. | `main.tsx` mounts the root component, wraps it in Chakra’s `<ChakraProvider>`, and sets up routing (`router.tsx`). |\n\n### Why this structure makes sense\n\n- **Extensibility** – Adding a new provider or model is as simple as appending to the relevant array and updating the `Map`.  \n- **Consistency** – All Markdown content is rendered through the same Chakra‑based component tree, so the look and feel stays uniform.  \n- **User experience** – Copyable code blocks and a clean theme make the chat interface friendly for developers and non‑developers alike.  \n\nIn short, the codebase is a **developer‑friendly, multi‑provider AI chat application** that emphasizes clean UI, easy configuration, and rich text rendering.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('ee761079-e205-44a9-8871-2f97ee01b613'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 1, 351580), content='Can you get useMessage hook from this codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('6e8d9f1f-4cff-41e8-9323-4a3286a0f4fb'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 3, 219930), content='', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('4cb28318-2cf5-41d6-b2aa-3bc409cc96bd'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 47, 540404), content='Fetch again', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('aa083c8f-1df3-47d6-bd98-fc4fe44e3953'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 49, 235504), content="I’m afraid the snippets you shared don’t include a `useMessage` hook, so I can’t pull the exact source code from the context you’ve provided.  \nIf the hook lives in the repository (most likely under `src/hooks/useMessage.ts`), you can fetch it directly from GitHub with a URL like:\n\n```\nhttps://raw.githubusercontent.com/DineshThumma9/centralGPT/main/src/hooks/useMessage.ts\n```\n\nIf you can confirm the file’s location or paste its contents here, I’ll be able to give you the precise implementation.\n\n---\n\n### A quick “what you might expect” sketch\n\nBelow is a **generic outline** of what a `useMessage` hook could look like in a project that already has:\n\n* `sessionStore` (for global session & message state)\n* `session-api` (for API calls to send/receive messages)\n* `useSessions` (for session‑management helpers)\n\n```ts\n// src/hooks/useMessage.ts\nimport { useState, useEffect, useCallback } from 'react';\nimport { useSessionStore } from '../store/sessionStore';\nimport { sendMessage, getMessageHistory } from '../api/message-api';\n\nexport const useMessage = () => {\n  // Grab session‑related state from the global store\n  const {\n    current_session,\n    messages,\n    setMessages,\n    setLoading,\n    setStreaming,\n  } = useSessionStore();\n\n  // Local state for the input field\n  const [input, setInput] = useState('');\n\n  // Helper to append a new message to the store\n  const addMessage = (msg: Message) =>\n    setMessages((prev) => [...prev, msg]);\n\n  // Send a user message and stream the assistant’s reply\n  const send = useCallback(async () => {\n    if (!input.trim() || !current_session) return;\n\n    // 1️⃣ Add the user’s message immediately\n    const userMsg: Message = {\n      role: 'user',\n      content: input,\n      timestamp: new Date().toISOString(),\n    };\n    addMessage(userMsg);\n\n    // 2️⃣ Prepare for streaming\n    setLoading(true);\n    setStreaming(true);\n\n    try {\n      // 3️⃣ Call the backend – this could be a simple POST or a SSE endpoint\n      const stream = await sendMessage(current_session, input);\n\n      // 4️⃣ Consume the stream (pseudo‑code)\n      for await (const chunk of stream) {\n        // Append partial assistant replies as they arrive\n        addMessage({\n          role: 'assistant',\n          content: chunk,\n          timestamp: new Date().toISOString(),\n        });\n      }\n    } catch (err) {\n      console.error('Message send failed', err);\n    } finally {\n      setLoading(false);\n      setStreaming(false);\n      setInput(''); // clear the input field\n    }\n  }, [input, current_session, setLoading, setStreaming, setMessages]);\n\n  // Load the message history when a session is selected\n  useEffect(() => {\n    if (!current_session) return;\n\n    const loadHistory = async () => {\n      setLoading(true);\n      try {\n        const history = await getMessageHistory(current_session);\n        setMessages(history);\n      } catch (err) {\n        console.error('Failed to load history', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadHistory();\n  }, [current_session, setLoading, setMessages]);\n\n  return {\n    input,\n    setInput,\n    send,\n    messages,\n  };\n};\n```\n\n> **Note:**  \n> *The actual implementation in your repo may differ in naming, API shape, or streaming logic. The above is just a template that shows how the hook could tie together the store, API, and UI.*\n\n---\n\n### Next steps\n\n1. **Verify the file path** – If `useMessage` is indeed in `src/hooks/useMessage.ts`, copy the raw URL above into your browser or a tool like `curl` to see the real code.  \n2. **Share the file** – If you paste the file’s contents here, I can walk through it line‑by‑line.  \n3", files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('1240f1cc-23fd-4798-a794-0c252029127b'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 56, 26, 723455), content='What is file you are most familier with', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('705c8242-94b7-44b6-8ea7-50a35273d40e'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 56, 28, 436968), content='I’m most familiar with **`src/components/LLMModelChooser.tsx`**.  \nIt’s the component that lets users pick an AI provider and a specific model, and it also shows the current API key. Here’s a quick rundown of what it does and why it’s central to the app:\n\n| Feature | What it does | Why it matters |\n|---------|--------------|----------------|\n| **Provider badge** | `<BadgeCompo label={currentLLMProvider}/>` | Gives instant visual feedback on which provider is active. |\n| **Model badge** | `<BadgeCompo label={currentModel}/>` | Shows the chosen model, so users know exactly what they’re chatting with. |\n| **API key input** | `<APIKey provider={currentAPIProvider} title="API KEY" />` | Lets users enter or update the key for the selected provider. |\n| **Conditional rendering** | `{(currentLLMProvider || currentModel || shouldStream) && …}` | Only shows the badges when there’s something to display, keeping the UI clean. |\n| **Layout** | Uses Chakra UI’s `<HStack>` for horizontal alignment and spacing. | Keeps the UI consistent with the rest of the app’s Chakra‑based design. |\n\nBecause this component sits at the intersection of user configuration (provider, model, key) and the rest of the chat logic, it’s a good entry point for understanding how the app manages state and interacts with the backend.', files=None, model_response_time_ms=None)]
2025-08-16 18:57:26.917 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('bd583eab-4118-4f10-9dd0-9b20c4ecc3d4'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 50, 53, 455695), content='What did you learn from codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('3e19482c-0a1b-48a4-8115-5c50d6ed999d'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 50, 55, 309759), content='From the two snippets you shared, I was able to piece together a few key ideas about how this project is structured and what its main responsibilities are.\n\n---\n\n### 1. Rendering Markdown with Chakra UI\n\n**File:** `src/components/MarkdownComponents.tsx`\n\n* The component exports a mapping of standard Markdown tags (`p`, `h1`, `h2`, `h3`, `ul`, `ol`, `li`, `blockquote`, etc.) to custom React components that use Chakra UI primitives (`Text`, `Box`, etc.).  \n* **Styling choices**  \n  * Paragraphs (`p`) are rendered with a purple‑colored text (`purple.50`) and a line‑height of 1.7.  \n  * Headings (`h1`, `h2`, `h3`) use progressively smaller font sizes (`xl`, `lg`, `md`) but all share the same purple accent (`purple.200`).  \n  * Lists (`ul`, `ol`) are indented (`ml={4}`) and their items (`li`) get a small bottom margin.  \n  * Blockquotes are highlighted with a purple left border and a light purple background (`rgba(139, 92, 246, 0.1)`).\n* **Code blocks**  \n  * The `code` tag is wired to a `CodeComponent` that receives props such as `idx`, `copiedCodeBlocks`, and an `onCodeBlockCopy` callback.  \n  * This suggests that code snippets are interactive—users can copy them, and the component tracks which blocks have been copied.\n\n**Example usage**\n\n```tsx\n<MarkdownComponents>\n  <h1>Welcome</h1>\n  <p>This is a sample paragraph.</p>\n  <code>console.log(\'Hello world\');</code>\n</MarkdownComponents>\n```\n\nThe above would render a styled heading, paragraph, and a copy‑able code block.\n\n---\n\n### 2. Centralized Model & Provider Configuration\n\n**File:** `src/entities/Constants.ts`\n\n* The file defines a large number of **model identifiers** for various AI providers (OpenAI, Gemini, Groq, DeepSeek, etc.).  \n* **Provider lists**  \n  * `modelsProviders` contains the names of supported providers.  \n  * `ollamaModels`, `groqModels`, `togetherModels`, etc., list specific model names for each provider.  \n* **Mapping**  \n  * `providers_models` is a `Map<string, string[]>` that links a provider key (e.g., `"groq"`) to its array of model names.  \n  * This structure makes it easy to look up all models for a given provider at runtime.\n\n**Why this matters**\n\n* The application likely offers a UI where users can pick a provider and then choose a model from the corresponding list.  \n* By centralizing these constants, the codebase ensures consistency across the UI, API calls, and any logic that depends on the available models.\n\n**Example lookup**\n\n```ts\nconst groqModels = providers_models.get(\'groq\'); // returns the array of Groq model names\n```\n\n---\n\n### 3. Overall Observations\n\n1. **UI Layer** – The project uses Chakra UI for styling, which keeps the component code concise and theme‑aware.  \n2. **Interactivity** – Code blocks are not just static; they support copy‑to‑clipboard functionality, hinting at a user‑friendly design.  \n3. **Extensibility** – The constants file is designed to be easily extended: adding a new provider or model is as simple as appending to the relevant array and updating the map.  \n4. **Consistency** – By mapping Markdown tags to Chakra components, the app guarantees a uniform look for all rendered markdown content, regardless of source.\n\n---\n\nIn short, the codebase is focused on delivering a polished, theme‑consistent Markdown renderer and a flexible, centralized configuration for AI model selection. This setup makes it straightforward to add new providers or tweak the UI without touching many disparate parts of the code.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('9e05019f-85dc-48af-8731-1306f9e7e3ad'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 51, 38, 178029), content='Give entire dir structure of codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('ab3aaff8-c7b9-4bfd-b103-e2ae9793c222'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 51, 39, 853223), content='Below is a **complete directory tree** that reflects everything we can see (and reasonably infer) from the snippets you shared.  \nIf the repository contains additional files or folders that weren’t mentioned in the snippets, they’ll appear as “…” placeholders.\n\n```\n/\n├── package.json\n├── tsconfig.json\n├── public/\n│   ├── index.html\n│   └── ... (static assets)\n└── src/\n    ├── index.css\n    ├── main.tsx\n    ├── router.tsx\n    ├── theme.ts\n    ├── components/\n    │   ├── ui/\n    │   │   └── toaster.tsx\n    │   └── ... (other UI components)\n    ├── entities/\n    │   └── Constants.ts\n    └── ... (any additional source folders)\n```\n\n### What we know from the snippets\n\n| File | Purpose (as inferred) |\n|------|-----------------------|\n| **src/main.tsx** | Entry point that mounts the React app, wraps it in Chakra UI, and injects the router and toaster. |\n| **src/router.tsx** | Defines the app’s routing (not shown, but imported in `main.tsx`). |\n| **src/theme.ts** | Custom Chakra UI theme configuration. |\n| **src/components/ui/toaster.tsx** | Toast notification component. |\n| **src/entities/Constants.ts** | Centralised list of AI model identifiers for various providers. |\n| **src/index.css** | Global CSS (likely contains resets or base styles). |\n\nIf you need the exact contents of any of the “…” placeholders, let me know and I can dive deeper into that part of the codebase!', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('2b8c48ab-8b1b-4252-a83c-ec9871313bc9'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 53, 54, 251739), content='What do you think this codebase is about', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('a3027a46-1bbe-4160-ae85-299e6bf4ccd8'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 53, 55, 961520), content='## What the codebase is about\n\nFrom the snippets you shared, the project is a **web‑based AI‑assistant / chat platform** that lets users:\n\n1. **Choose a language‑model provider** (OpenAI, Gemini, Groq, DeepSeek, etc.)  \n2. **Select a specific model** from that provider’s catalog.  \n3. **Interact with the model** through a chat UI that renders responses as Markdown, including code blocks that can be copied to the clipboard.  \n\nBelow is a quick rundown of the key pieces that make this possible.\n\n| Layer | What it does | How it’s implemented |\n|-------|--------------|----------------------|\n| **Model configuration** | Centralised list of all supported providers and their models. | `src/entities/Constants.ts` defines arrays (`togetherModels`, `deepInfraModels`, …) and a `Map` (`providers_models`) that maps a provider key to its model list. |\n| **UI / styling** | Consistent, theme‑aware rendering of chat messages. | Chakra‑UI is used throughout (`theme.ts`, `components/MarkdownComponents.tsx`). Markdown tags are mapped to Chakra components, so every message looks the same regardless of source. |\n| **Markdown rendering** | Chat responses can contain rich text, lists, blockquotes, and code snippets. | `MarkdownComponents.tsx` provides custom components for each Markdown element, including a copy‑to‑clipboard button for `<code>` blocks. |\n| **Interaction** | Users can copy code snippets, switch providers/models, and see real‑time responses. | The copy‑to‑clipboard logic is wired into the `<code>` component; provider/model selection likely lives in a sidebar or dropdown (not shown in the snippets). |\n| **Routing / entry point** | The app is a single‑page React application. | `main.tsx` mounts the root component, wraps it in Chakra’s `<ChakraProvider>`, and sets up routing (`router.tsx`). |\n\n### Why this structure makes sense\n\n- **Extensibility** – Adding a new provider or model is as simple as appending to the relevant array and updating the `Map`.  \n- **Consistency** – All Markdown content is rendered through the same Chakra‑based component tree, so the look and feel stays uniform.  \n- **User experience** – Copyable code blocks and a clean theme make the chat interface friendly for developers and non‑developers alike.  \n\nIn short, the codebase is a **developer‑friendly, multi‑provider AI chat application** that emphasizes clean UI, easy configuration, and rich text rendering.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('ee761079-e205-44a9-8871-2f97ee01b613'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 1, 351580), content='Can you get useMessage hook from this codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('6e8d9f1f-4cff-41e8-9323-4a3286a0f4fb'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 3, 219930), content='', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('4cb28318-2cf5-41d6-b2aa-3bc409cc96bd'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 47, 540404), content='Fetch again', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('aa083c8f-1df3-47d6-bd98-fc4fe44e3953'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 49, 235504), content="I’m afraid the snippets you shared don’t include a `useMessage` hook, so I can’t pull the exact source code from the context you’ve provided.  \nIf the hook lives in the repository (most likely under `src/hooks/useMessage.ts`), you can fetch it directly from GitHub with a URL like:\n\n```\nhttps://raw.githubusercontent.com/DineshThumma9/centralGPT/main/src/hooks/useMessage.ts\n```\n\nIf you can confirm the file’s location or paste its contents here, I’ll be able to give you the precise implementation.\n\n---\n\n### A quick “what you might expect” sketch\n\nBelow is a **generic outline** of what a `useMessage` hook could look like in a project that already has:\n\n* `sessionStore` (for global session & message state)\n* `session-api` (for API calls to send/receive messages)\n* `useSessions` (for session‑management helpers)\n\n```ts\n// src/hooks/useMessage.ts\nimport { useState, useEffect, useCallback } from 'react';\nimport { useSessionStore } from '../store/sessionStore';\nimport { sendMessage, getMessageHistory } from '../api/message-api';\n\nexport const useMessage = () => {\n  // Grab session‑related state from the global store\n  const {\n    current_session,\n    messages,\n    setMessages,\n    setLoading,\n    setStreaming,\n  } = useSessionStore();\n\n  // Local state for the input field\n  const [input, setInput] = useState('');\n\n  // Helper to append a new message to the store\n  const addMessage = (msg: Message) =>\n    setMessages((prev) => [...prev, msg]);\n\n  // Send a user message and stream the assistant’s reply\n  const send = useCallback(async () => {\n    if (!input.trim() || !current_session) return;\n\n    // 1️⃣ Add the user’s message immediately\n    const userMsg: Message = {\n      role: 'user',\n      content: input,\n      timestamp: new Date().toISOString(),\n    };\n    addMessage(userMsg);\n\n    // 2️⃣ Prepare for streaming\n    setLoading(true);\n    setStreaming(true);\n\n    try {\n      // 3️⃣ Call the backend – this could be a simple POST or a SSE endpoint\n      const stream = await sendMessage(current_session, input);\n\n      // 4️⃣ Consume the stream (pseudo‑code)\n      for await (const chunk of stream) {\n        // Append partial assistant replies as they arrive\n        addMessage({\n          role: 'assistant',\n          content: chunk,\n          timestamp: new Date().toISOString(),\n        });\n      }\n    } catch (err) {\n      console.error('Message send failed', err);\n    } finally {\n      setLoading(false);\n      setStreaming(false);\n      setInput(''); // clear the input field\n    }\n  }, [input, current_session, setLoading, setStreaming, setMessages]);\n\n  // Load the message history when a session is selected\n  useEffect(() => {\n    if (!current_session) return;\n\n    const loadHistory = async () => {\n      setLoading(true);\n      try {\n        const history = await getMessageHistory(current_session);\n        setMessages(history);\n      } catch (err) {\n        console.error('Failed to load history', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadHistory();\n  }, [current_session, setLoading, setMessages]);\n\n  return {\n    input,\n    setInput,\n    send,\n    messages,\n  };\n};\n```\n\n> **Note:**  \n> *The actual implementation in your repo may differ in naming, API shape, or streaming logic. The above is just a template that shows how the hook could tie together the store, API, and UI.*\n\n---\n\n### Next steps\n\n1. **Verify the file path** – If `useMessage` is indeed in `src/hooks/useMessage.ts`, copy the raw URL above into your browser or a tool like `curl` to see the real code.  \n2. **Share the file** – If you paste the file’s contents here, I can walk through it line‑by‑line.  \n3", files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('1240f1cc-23fd-4798-a794-0c252029127b'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 56, 26, 723455), content='What is file you are most familier with', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('705c8242-94b7-44b6-8ea7-50a35273d40e'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 56, 28, 436968), content='I’m most familiar with **`src/components/LLMModelChooser.tsx`**.  \nIt’s the component that lets users pick an AI provider and a specific model, and it also shows the current API key. Here’s a quick rundown of what it does and why it’s central to the app:\n\n| Feature | What it does | Why it matters |\n|---------|--------------|----------------|\n| **Provider badge** | `<BadgeCompo label={currentLLMProvider}/>` | Gives instant visual feedback on which provider is active. |\n| **Model badge** | `<BadgeCompo label={currentModel}/>` | Shows the chosen model, so users know exactly what they’re chatting with. |\n| **API key input** | `<APIKey provider={currentAPIProvider} title="API KEY" />` | Lets users enter or update the key for the selected provider. |\n| **Conditional rendering** | `{(currentLLMProvider || currentModel || shouldStream) && …}` | Only shows the badges when there’s something to display, keeping the UI clean. |\n| **Layout** | Uses Chakra UI’s `<HStack>` for horizontal alignment and spacing. | Keeps the UI consistent with the rest of the app’s Chakra‑based design. |\n\nBecause this component sits at the intersection of user configuration (provider, model, key) and the rest of the chat logic, it’s a good entry point for understanding how the app manages state and interacts with the backend.', files=None, model_response_time_ms=None)]
2025-08-16 18:57:26.928 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('bd583eab-4118-4f10-9dd0-9b20c4ecc3d4'), 'session_id': UUID('b483374f-fdea-4479-befa-6b84bdde3071'), 'timestamp': datetime.datetime(2025, 8, 16, 18, 50, 53, 455695), 'content': 'What did you learn from codebase', 'files': [], 'model_response_time_ms': None}
2025-08-16 18:57:26.928 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('bd583eab-4118-4f10-9dd0-9b20c4ecc3d4'), 'session_id': UUID('b483374f-fdea-4479-befa-6b84bdde3071'), 'timestamp': datetime.datetime(2025, 8, 16, 18, 50, 53, 455695), 'content': 'What did you learn from codebase', 'files': [], 'model_response_time_ms': None}
2025-08-16 18:57:27.165 | INFO     | src.main:log_requests:54 - GET /sessions/history/b483374f-fdea-4479-befa-6b84bdde3071 → 200 (1232.94ms)
2025-08-16 18:57:27.165 | INFO     | src.main:log_requests:54 - GET /sessions/history/b483374f-fdea-4479-befa-6b84bdde3071 → 200 (1232.94ms)
2025-08-16 18:57:27.168 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/b483374f-fdea-4479-befa-6b84bdde3071
2025-08-16 18:57:27.168 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/b483374f-fdea-4479-befa-6b84bdde3071
2025-08-16 18:57:27.918 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('bd583eab-4118-4f10-9dd0-9b20c4ecc3d4'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 50, 53, 455695), content='What did you learn from codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('3e19482c-0a1b-48a4-8115-5c50d6ed999d'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 50, 55, 309759), content='From the two snippets you shared, I was able to piece together a few key ideas about how this project is structured and what its main responsibilities are.\n\n---\n\n### 1. Rendering Markdown with Chakra UI\n\n**File:** `src/components/MarkdownComponents.tsx`\n\n* The component exports a mapping of standard Markdown tags (`p`, `h1`, `h2`, `h3`, `ul`, `ol`, `li`, `blockquote`, etc.) to custom React components that use Chakra UI primitives (`Text`, `Box`, etc.).  \n* **Styling choices**  \n  * Paragraphs (`p`) are rendered with a purple‑colored text (`purple.50`) and a line‑height of 1.7.  \n  * Headings (`h1`, `h2`, `h3`) use progressively smaller font sizes (`xl`, `lg`, `md`) but all share the same purple accent (`purple.200`).  \n  * Lists (`ul`, `ol`) are indented (`ml={4}`) and their items (`li`) get a small bottom margin.  \n  * Blockquotes are highlighted with a purple left border and a light purple background (`rgba(139, 92, 246, 0.1)`).\n* **Code blocks**  \n  * The `code` tag is wired to a `CodeComponent` that receives props such as `idx`, `copiedCodeBlocks`, and an `onCodeBlockCopy` callback.  \n  * This suggests that code snippets are interactive—users can copy them, and the component tracks which blocks have been copied.\n\n**Example usage**\n\n```tsx\n<MarkdownComponents>\n  <h1>Welcome</h1>\n  <p>This is a sample paragraph.</p>\n  <code>console.log(\'Hello world\');</code>\n</MarkdownComponents>\n```\n\nThe above would render a styled heading, paragraph, and a copy‑able code block.\n\n---\n\n### 2. Centralized Model & Provider Configuration\n\n**File:** `src/entities/Constants.ts`\n\n* The file defines a large number of **model identifiers** for various AI providers (OpenAI, Gemini, Groq, DeepSeek, etc.).  \n* **Provider lists**  \n  * `modelsProviders` contains the names of supported providers.  \n  * `ollamaModels`, `groqModels`, `togetherModels`, etc., list specific model names for each provider.  \n* **Mapping**  \n  * `providers_models` is a `Map<string, string[]>` that links a provider key (e.g., `"groq"`) to its array of model names.  \n  * This structure makes it easy to look up all models for a given provider at runtime.\n\n**Why this matters**\n\n* The application likely offers a UI where users can pick a provider and then choose a model from the corresponding list.  \n* By centralizing these constants, the codebase ensures consistency across the UI, API calls, and any logic that depends on the available models.\n\n**Example lookup**\n\n```ts\nconst groqModels = providers_models.get(\'groq\'); // returns the array of Groq model names\n```\n\n---\n\n### 3. Overall Observations\n\n1. **UI Layer** – The project uses Chakra UI for styling, which keeps the component code concise and theme‑aware.  \n2. **Interactivity** – Code blocks are not just static; they support copy‑to‑clipboard functionality, hinting at a user‑friendly design.  \n3. **Extensibility** – The constants file is designed to be easily extended: adding a new provider or model is as simple as appending to the relevant array and updating the map.  \n4. **Consistency** – By mapping Markdown tags to Chakra components, the app guarantees a uniform look for all rendered markdown content, regardless of source.\n\n---\n\nIn short, the codebase is focused on delivering a polished, theme‑consistent Markdown renderer and a flexible, centralized configuration for AI model selection. This setup makes it straightforward to add new providers or tweak the UI without touching many disparate parts of the code.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('9e05019f-85dc-48af-8731-1306f9e7e3ad'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 51, 38, 178029), content='Give entire dir structure of codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('ab3aaff8-c7b9-4bfd-b103-e2ae9793c222'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 51, 39, 853223), content='Below is a **complete directory tree** that reflects everything we can see (and reasonably infer) from the snippets you shared.  \nIf the repository contains additional files or folders that weren’t mentioned in the snippets, they’ll appear as “…” placeholders.\n\n```\n/\n├── package.json\n├── tsconfig.json\n├── public/\n│   ├── index.html\n│   └── ... (static assets)\n└── src/\n    ├── index.css\n    ├── main.tsx\n    ├── router.tsx\n    ├── theme.ts\n    ├── components/\n    │   ├── ui/\n    │   │   └── toaster.tsx\n    │   └── ... (other UI components)\n    ├── entities/\n    │   └── Constants.ts\n    └── ... (any additional source folders)\n```\n\n### What we know from the snippets\n\n| File | Purpose (as inferred) |\n|------|-----------------------|\n| **src/main.tsx** | Entry point that mounts the React app, wraps it in Chakra UI, and injects the router and toaster. |\n| **src/router.tsx** | Defines the app’s routing (not shown, but imported in `main.tsx`). |\n| **src/theme.ts** | Custom Chakra UI theme configuration. |\n| **src/components/ui/toaster.tsx** | Toast notification component. |\n| **src/entities/Constants.ts** | Centralised list of AI model identifiers for various providers. |\n| **src/index.css** | Global CSS (likely contains resets or base styles). |\n\nIf you need the exact contents of any of the “…” placeholders, let me know and I can dive deeper into that part of the codebase!', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('2b8c48ab-8b1b-4252-a83c-ec9871313bc9'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 53, 54, 251739), content='What do you think this codebase is about', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('a3027a46-1bbe-4160-ae85-299e6bf4ccd8'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 53, 55, 961520), content='## What the codebase is about\n\nFrom the snippets you shared, the project is a **web‑based AI‑assistant / chat platform** that lets users:\n\n1. **Choose a language‑model provider** (OpenAI, Gemini, Groq, DeepSeek, etc.)  \n2. **Select a specific model** from that provider’s catalog.  \n3. **Interact with the model** through a chat UI that renders responses as Markdown, including code blocks that can be copied to the clipboard.  \n\nBelow is a quick rundown of the key pieces that make this possible.\n\n| Layer | What it does | How it’s implemented |\n|-------|--------------|----------------------|\n| **Model configuration** | Centralised list of all supported providers and their models. | `src/entities/Constants.ts` defines arrays (`togetherModels`, `deepInfraModels`, …) and a `Map` (`providers_models`) that maps a provider key to its model list. |\n| **UI / styling** | Consistent, theme‑aware rendering of chat messages. | Chakra‑UI is used throughout (`theme.ts`, `components/MarkdownComponents.tsx`). Markdown tags are mapped to Chakra components, so every message looks the same regardless of source. |\n| **Markdown rendering** | Chat responses can contain rich text, lists, blockquotes, and code snippets. | `MarkdownComponents.tsx` provides custom components for each Markdown element, including a copy‑to‑clipboard button for `<code>` blocks. |\n| **Interaction** | Users can copy code snippets, switch providers/models, and see real‑time responses. | The copy‑to‑clipboard logic is wired into the `<code>` component; provider/model selection likely lives in a sidebar or dropdown (not shown in the snippets). |\n| **Routing / entry point** | The app is a single‑page React application. | `main.tsx` mounts the root component, wraps it in Chakra’s `<ChakraProvider>`, and sets up routing (`router.tsx`). |\n\n### Why this structure makes sense\n\n- **Extensibility** – Adding a new provider or model is as simple as appending to the relevant array and updating the `Map`.  \n- **Consistency** – All Markdown content is rendered through the same Chakra‑based component tree, so the look and feel stays uniform.  \n- **User experience** – Copyable code blocks and a clean theme make the chat interface friendly for developers and non‑developers alike.  \n\nIn short, the codebase is a **developer‑friendly, multi‑provider AI chat application** that emphasizes clean UI, easy configuration, and rich text rendering.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('ee761079-e205-44a9-8871-2f97ee01b613'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 1, 351580), content='Can you get useMessage hook from this codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('6e8d9f1f-4cff-41e8-9323-4a3286a0f4fb'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 3, 219930), content='', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('4cb28318-2cf5-41d6-b2aa-3bc409cc96bd'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 47, 540404), content='Fetch again', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('aa083c8f-1df3-47d6-bd98-fc4fe44e3953'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 49, 235504), content="I’m afraid the snippets you shared don’t include a `useMessage` hook, so I can’t pull the exact source code from the context you’ve provided.  \nIf the hook lives in the repository (most likely under `src/hooks/useMessage.ts`), you can fetch it directly from GitHub with a URL like:\n\n```\nhttps://raw.githubusercontent.com/DineshThumma9/centralGPT/main/src/hooks/useMessage.ts\n```\n\nIf you can confirm the file’s location or paste its contents here, I’ll be able to give you the precise implementation.\n\n---\n\n### A quick “what you might expect” sketch\n\nBelow is a **generic outline** of what a `useMessage` hook could look like in a project that already has:\n\n* `sessionStore` (for global session & message state)\n* `session-api` (for API calls to send/receive messages)\n* `useSessions` (for session‑management helpers)\n\n```ts\n// src/hooks/useMessage.ts\nimport { useState, useEffect, useCallback } from 'react';\nimport { useSessionStore } from '../store/sessionStore';\nimport { sendMessage, getMessageHistory } from '../api/message-api';\n\nexport const useMessage = () => {\n  // Grab session‑related state from the global store\n  const {\n    current_session,\n    messages,\n    setMessages,\n    setLoading,\n    setStreaming,\n  } = useSessionStore();\n\n  // Local state for the input field\n  const [input, setInput] = useState('');\n\n  // Helper to append a new message to the store\n  const addMessage = (msg: Message) =>\n    setMessages((prev) => [...prev, msg]);\n\n  // Send a user message and stream the assistant’s reply\n  const send = useCallback(async () => {\n    if (!input.trim() || !current_session) return;\n\n    // 1️⃣ Add the user’s message immediately\n    const userMsg: Message = {\n      role: 'user',\n      content: input,\n      timestamp: new Date().toISOString(),\n    };\n    addMessage(userMsg);\n\n    // 2️⃣ Prepare for streaming\n    setLoading(true);\n    setStreaming(true);\n\n    try {\n      // 3️⃣ Call the backend – this could be a simple POST or a SSE endpoint\n      const stream = await sendMessage(current_session, input);\n\n      // 4️⃣ Consume the stream (pseudo‑code)\n      for await (const chunk of stream) {\n        // Append partial assistant replies as they arrive\n        addMessage({\n          role: 'assistant',\n          content: chunk,\n          timestamp: new Date().toISOString(),\n        });\n      }\n    } catch (err) {\n      console.error('Message send failed', err);\n    } finally {\n      setLoading(false);\n      setStreaming(false);\n      setInput(''); // clear the input field\n    }\n  }, [input, current_session, setLoading, setStreaming, setMessages]);\n\n  // Load the message history when a session is selected\n  useEffect(() => {\n    if (!current_session) return;\n\n    const loadHistory = async () => {\n      setLoading(true);\n      try {\n        const history = await getMessageHistory(current_session);\n        setMessages(history);\n      } catch (err) {\n        console.error('Failed to load history', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadHistory();\n  }, [current_session, setLoading, setMessages]);\n\n  return {\n    input,\n    setInput,\n    send,\n    messages,\n  };\n};\n```\n\n> **Note:**  \n> *The actual implementation in your repo may differ in naming, API shape, or streaming logic. The above is just a template that shows how the hook could tie together the store, API, and UI.*\n\n---\n\n### Next steps\n\n1. **Verify the file path** – If `useMessage` is indeed in `src/hooks/useMessage.ts`, copy the raw URL above into your browser or a tool like `curl` to see the real code.  \n2. **Share the file** – If you paste the file’s contents here, I can walk through it line‑by‑line.  \n3", files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('1240f1cc-23fd-4798-a794-0c252029127b'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 56, 26, 723455), content='What is file you are most familier with', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('705c8242-94b7-44b6-8ea7-50a35273d40e'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 56, 28, 436968), content='I’m most familiar with **`src/components/LLMModelChooser.tsx`**.  \nIt’s the component that lets users pick an AI provider and a specific model, and it also shows the current API key. Here’s a quick rundown of what it does and why it’s central to the app:\n\n| Feature | What it does | Why it matters |\n|---------|--------------|----------------|\n| **Provider badge** | `<BadgeCompo label={currentLLMProvider}/>` | Gives instant visual feedback on which provider is active. |\n| **Model badge** | `<BadgeCompo label={currentModel}/>` | Shows the chosen model, so users know exactly what they’re chatting with. |\n| **API key input** | `<APIKey provider={currentAPIProvider} title="API KEY" />` | Lets users enter or update the key for the selected provider. |\n| **Conditional rendering** | `{(currentLLMProvider || currentModel || shouldStream) && …}` | Only shows the badges when there’s something to display, keeping the UI clean. |\n| **Layout** | Uses Chakra UI’s `<HStack>` for horizontal alignment and spacing. | Keeps the UI consistent with the rest of the app’s Chakra‑based design. |\n\nBecause this component sits at the intersection of user configuration (provider, model, key) and the rest of the chat logic, it’s a good entry point for understanding how the app manages state and interacts with the backend.', files=None, model_response_time_ms=None)]
2025-08-16 18:57:27.918 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('bd583eab-4118-4f10-9dd0-9b20c4ecc3d4'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 50, 53, 455695), content='What did you learn from codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('3e19482c-0a1b-48a4-8115-5c50d6ed999d'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 50, 55, 309759), content='From the two snippets you shared, I was able to piece together a few key ideas about how this project is structured and what its main responsibilities are.\n\n---\n\n### 1. Rendering Markdown with Chakra UI\n\n**File:** `src/components/MarkdownComponents.tsx`\n\n* The component exports a mapping of standard Markdown tags (`p`, `h1`, `h2`, `h3`, `ul`, `ol`, `li`, `blockquote`, etc.) to custom React components that use Chakra UI primitives (`Text`, `Box`, etc.).  \n* **Styling choices**  \n  * Paragraphs (`p`) are rendered with a purple‑colored text (`purple.50`) and a line‑height of 1.7.  \n  * Headings (`h1`, `h2`, `h3`) use progressively smaller font sizes (`xl`, `lg`, `md`) but all share the same purple accent (`purple.200`).  \n  * Lists (`ul`, `ol`) are indented (`ml={4}`) and their items (`li`) get a small bottom margin.  \n  * Blockquotes are highlighted with a purple left border and a light purple background (`rgba(139, 92, 246, 0.1)`).\n* **Code blocks**  \n  * The `code` tag is wired to a `CodeComponent` that receives props such as `idx`, `copiedCodeBlocks`, and an `onCodeBlockCopy` callback.  \n  * This suggests that code snippets are interactive—users can copy them, and the component tracks which blocks have been copied.\n\n**Example usage**\n\n```tsx\n<MarkdownComponents>\n  <h1>Welcome</h1>\n  <p>This is a sample paragraph.</p>\n  <code>console.log(\'Hello world\');</code>\n</MarkdownComponents>\n```\n\nThe above would render a styled heading, paragraph, and a copy‑able code block.\n\n---\n\n### 2. Centralized Model & Provider Configuration\n\n**File:** `src/entities/Constants.ts`\n\n* The file defines a large number of **model identifiers** for various AI providers (OpenAI, Gemini, Groq, DeepSeek, etc.).  \n* **Provider lists**  \n  * `modelsProviders` contains the names of supported providers.  \n  * `ollamaModels`, `groqModels`, `togetherModels`, etc., list specific model names for each provider.  \n* **Mapping**  \n  * `providers_models` is a `Map<string, string[]>` that links a provider key (e.g., `"groq"`) to its array of model names.  \n  * This structure makes it easy to look up all models for a given provider at runtime.\n\n**Why this matters**\n\n* The application likely offers a UI where users can pick a provider and then choose a model from the corresponding list.  \n* By centralizing these constants, the codebase ensures consistency across the UI, API calls, and any logic that depends on the available models.\n\n**Example lookup**\n\n```ts\nconst groqModels = providers_models.get(\'groq\'); // returns the array of Groq model names\n```\n\n---\n\n### 3. Overall Observations\n\n1. **UI Layer** – The project uses Chakra UI for styling, which keeps the component code concise and theme‑aware.  \n2. **Interactivity** – Code blocks are not just static; they support copy‑to‑clipboard functionality, hinting at a user‑friendly design.  \n3. **Extensibility** – The constants file is designed to be easily extended: adding a new provider or model is as simple as appending to the relevant array and updating the map.  \n4. **Consistency** – By mapping Markdown tags to Chakra components, the app guarantees a uniform look for all rendered markdown content, regardless of source.\n\n---\n\nIn short, the codebase is focused on delivering a polished, theme‑consistent Markdown renderer and a flexible, centralized configuration for AI model selection. This setup makes it straightforward to add new providers or tweak the UI without touching many disparate parts of the code.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('9e05019f-85dc-48af-8731-1306f9e7e3ad'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 51, 38, 178029), content='Give entire dir structure of codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('ab3aaff8-c7b9-4bfd-b103-e2ae9793c222'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 51, 39, 853223), content='Below is a **complete directory tree** that reflects everything we can see (and reasonably infer) from the snippets you shared.  \nIf the repository contains additional files or folders that weren’t mentioned in the snippets, they’ll appear as “…” placeholders.\n\n```\n/\n├── package.json\n├── tsconfig.json\n├── public/\n│   ├── index.html\n│   └── ... (static assets)\n└── src/\n    ├── index.css\n    ├── main.tsx\n    ├── router.tsx\n    ├── theme.ts\n    ├── components/\n    │   ├── ui/\n    │   │   └── toaster.tsx\n    │   └── ... (other UI components)\n    ├── entities/\n    │   └── Constants.ts\n    └── ... (any additional source folders)\n```\n\n### What we know from the snippets\n\n| File | Purpose (as inferred) |\n|------|-----------------------|\n| **src/main.tsx** | Entry point that mounts the React app, wraps it in Chakra UI, and injects the router and toaster. |\n| **src/router.tsx** | Defines the app’s routing (not shown, but imported in `main.tsx`). |\n| **src/theme.ts** | Custom Chakra UI theme configuration. |\n| **src/components/ui/toaster.tsx** | Toast notification component. |\n| **src/entities/Constants.ts** | Centralised list of AI model identifiers for various providers. |\n| **src/index.css** | Global CSS (likely contains resets or base styles). |\n\nIf you need the exact contents of any of the “…” placeholders, let me know and I can dive deeper into that part of the codebase!', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('2b8c48ab-8b1b-4252-a83c-ec9871313bc9'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 53, 54, 251739), content='What do you think this codebase is about', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('a3027a46-1bbe-4160-ae85-299e6bf4ccd8'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 53, 55, 961520), content='## What the codebase is about\n\nFrom the snippets you shared, the project is a **web‑based AI‑assistant / chat platform** that lets users:\n\n1. **Choose a language‑model provider** (OpenAI, Gemini, Groq, DeepSeek, etc.)  \n2. **Select a specific model** from that provider’s catalog.  \n3. **Interact with the model** through a chat UI that renders responses as Markdown, including code blocks that can be copied to the clipboard.  \n\nBelow is a quick rundown of the key pieces that make this possible.\n\n| Layer | What it does | How it’s implemented |\n|-------|--------------|----------------------|\n| **Model configuration** | Centralised list of all supported providers and their models. | `src/entities/Constants.ts` defines arrays (`togetherModels`, `deepInfraModels`, …) and a `Map` (`providers_models`) that maps a provider key to its model list. |\n| **UI / styling** | Consistent, theme‑aware rendering of chat messages. | Chakra‑UI is used throughout (`theme.ts`, `components/MarkdownComponents.tsx`). Markdown tags are mapped to Chakra components, so every message looks the same regardless of source. |\n| **Markdown rendering** | Chat responses can contain rich text, lists, blockquotes, and code snippets. | `MarkdownComponents.tsx` provides custom components for each Markdown element, including a copy‑to‑clipboard button for `<code>` blocks. |\n| **Interaction** | Users can copy code snippets, switch providers/models, and see real‑time responses. | The copy‑to‑clipboard logic is wired into the `<code>` component; provider/model selection likely lives in a sidebar or dropdown (not shown in the snippets). |\n| **Routing / entry point** | The app is a single‑page React application. | `main.tsx` mounts the root component, wraps it in Chakra’s `<ChakraProvider>`, and sets up routing (`router.tsx`). |\n\n### Why this structure makes sense\n\n- **Extensibility** – Adding a new provider or model is as simple as appending to the relevant array and updating the `Map`.  \n- **Consistency** – All Markdown content is rendered through the same Chakra‑based component tree, so the look and feel stays uniform.  \n- **User experience** – Copyable code blocks and a clean theme make the chat interface friendly for developers and non‑developers alike.  \n\nIn short, the codebase is a **developer‑friendly, multi‑provider AI chat application** that emphasizes clean UI, easy configuration, and rich text rendering.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('ee761079-e205-44a9-8871-2f97ee01b613'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 1, 351580), content='Can you get useMessage hook from this codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('6e8d9f1f-4cff-41e8-9323-4a3286a0f4fb'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 3, 219930), content='', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('4cb28318-2cf5-41d6-b2aa-3bc409cc96bd'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 47, 540404), content='Fetch again', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('aa083c8f-1df3-47d6-bd98-fc4fe44e3953'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 49, 235504), content="I’m afraid the snippets you shared don’t include a `useMessage` hook, so I can’t pull the exact source code from the context you’ve provided.  \nIf the hook lives in the repository (most likely under `src/hooks/useMessage.ts`), you can fetch it directly from GitHub with a URL like:\n\n```\nhttps://raw.githubusercontent.com/DineshThumma9/centralGPT/main/src/hooks/useMessage.ts\n```\n\nIf you can confirm the file’s location or paste its contents here, I’ll be able to give you the precise implementation.\n\n---\n\n### A quick “what you might expect” sketch\n\nBelow is a **generic outline** of what a `useMessage` hook could look like in a project that already has:\n\n* `sessionStore` (for global session & message state)\n* `session-api` (for API calls to send/receive messages)\n* `useSessions` (for session‑management helpers)\n\n```ts\n// src/hooks/useMessage.ts\nimport { useState, useEffect, useCallback } from 'react';\nimport { useSessionStore } from '../store/sessionStore';\nimport { sendMessage, getMessageHistory } from '../api/message-api';\n\nexport const useMessage = () => {\n  // Grab session‑related state from the global store\n  const {\n    current_session,\n    messages,\n    setMessages,\n    setLoading,\n    setStreaming,\n  } = useSessionStore();\n\n  // Local state for the input field\n  const [input, setInput] = useState('');\n\n  // Helper to append a new message to the store\n  const addMessage = (msg: Message) =>\n    setMessages((prev) => [...prev, msg]);\n\n  // Send a user message and stream the assistant’s reply\n  const send = useCallback(async () => {\n    if (!input.trim() || !current_session) return;\n\n    // 1️⃣ Add the user’s message immediately\n    const userMsg: Message = {\n      role: 'user',\n      content: input,\n      timestamp: new Date().toISOString(),\n    };\n    addMessage(userMsg);\n\n    // 2️⃣ Prepare for streaming\n    setLoading(true);\n    setStreaming(true);\n\n    try {\n      // 3️⃣ Call the backend – this could be a simple POST or a SSE endpoint\n      const stream = await sendMessage(current_session, input);\n\n      // 4️⃣ Consume the stream (pseudo‑code)\n      for await (const chunk of stream) {\n        // Append partial assistant replies as they arrive\n        addMessage({\n          role: 'assistant',\n          content: chunk,\n          timestamp: new Date().toISOString(),\n        });\n      }\n    } catch (err) {\n      console.error('Message send failed', err);\n    } finally {\n      setLoading(false);\n      setStreaming(false);\n      setInput(''); // clear the input field\n    }\n  }, [input, current_session, setLoading, setStreaming, setMessages]);\n\n  // Load the message history when a session is selected\n  useEffect(() => {\n    if (!current_session) return;\n\n    const loadHistory = async () => {\n      setLoading(true);\n      try {\n        const history = await getMessageHistory(current_session);\n        setMessages(history);\n      } catch (err) {\n        console.error('Failed to load history', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadHistory();\n  }, [current_session, setLoading, setMessages]);\n\n  return {\n    input,\n    setInput,\n    send,\n    messages,\n  };\n};\n```\n\n> **Note:**  \n> *The actual implementation in your repo may differ in naming, API shape, or streaming logic. The above is just a template that shows how the hook could tie together the store, API, and UI.*\n\n---\n\n### Next steps\n\n1. **Verify the file path** – If `useMessage` is indeed in `src/hooks/useMessage.ts`, copy the raw URL above into your browser or a tool like `curl` to see the real code.  \n2. **Share the file** – If you paste the file’s contents here, I can walk through it line‑by‑line.  \n3", files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('1240f1cc-23fd-4798-a794-0c252029127b'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 56, 26, 723455), content='What is file you are most familier with', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('705c8242-94b7-44b6-8ea7-50a35273d40e'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 56, 28, 436968), content='I’m most familiar with **`src/components/LLMModelChooser.tsx`**.  \nIt’s the component that lets users pick an AI provider and a specific model, and it also shows the current API key. Here’s a quick rundown of what it does and why it’s central to the app:\n\n| Feature | What it does | Why it matters |\n|---------|--------------|----------------|\n| **Provider badge** | `<BadgeCompo label={currentLLMProvider}/>` | Gives instant visual feedback on which provider is active. |\n| **Model badge** | `<BadgeCompo label={currentModel}/>` | Shows the chosen model, so users know exactly what they’re chatting with. |\n| **API key input** | `<APIKey provider={currentAPIProvider} title="API KEY" />` | Lets users enter or update the key for the selected provider. |\n| **Conditional rendering** | `{(currentLLMProvider || currentModel || shouldStream) && …}` | Only shows the badges when there’s something to display, keeping the UI clean. |\n| **Layout** | Uses Chakra UI’s `<HStack>` for horizontal alignment and spacing. | Keeps the UI consistent with the rest of the app’s Chakra‑based design. |\n\nBecause this component sits at the intersection of user configuration (provider, model, key) and the rest of the chat logic, it’s a good entry point for understanding how the app manages state and interacts with the backend.', files=None, model_response_time_ms=None)]
2025-08-16 18:57:27.930 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('bd583eab-4118-4f10-9dd0-9b20c4ecc3d4'), 'session_id': UUID('b483374f-fdea-4479-befa-6b84bdde3071'), 'timestamp': datetime.datetime(2025, 8, 16, 18, 50, 53, 455695), 'content': 'What did you learn from codebase', 'files': [], 'model_response_time_ms': None}
2025-08-16 18:57:27.930 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('bd583eab-4118-4f10-9dd0-9b20c4ecc3d4'), 'session_id': UUID('b483374f-fdea-4479-befa-6b84bdde3071'), 'timestamp': datetime.datetime(2025, 8, 16, 18, 50, 53, 455695), 'content': 'What did you learn from codebase', 'files': [], 'model_response_time_ms': None}
2025-08-16 18:57:28.175 | INFO     | src.main:log_requests:54 - GET /sessions/history/b483374f-fdea-4479-befa-6b84bdde3071 → 200 (1005.64ms)
2025-08-16 18:57:28.175 | INFO     | src.main:log_requests:54 - GET /sessions/history/b483374f-fdea-4479-befa-6b84bdde3071 → 200 (1005.64ms)
2025-08-16 18:57:28.177 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/b483374f-fdea-4479-befa-6b84bdde3071
2025-08-16 18:57:28.177 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/b483374f-fdea-4479-befa-6b84bdde3071
2025-08-16 18:57:28.930 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('bd583eab-4118-4f10-9dd0-9b20c4ecc3d4'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 50, 53, 455695), content='What did you learn from codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('3e19482c-0a1b-48a4-8115-5c50d6ed999d'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 50, 55, 309759), content='From the two snippets you shared, I was able to piece together a few key ideas about how this project is structured and what its main responsibilities are.\n\n---\n\n### 1. Rendering Markdown with Chakra UI\n\n**File:** `src/components/MarkdownComponents.tsx`\n\n* The component exports a mapping of standard Markdown tags (`p`, `h1`, `h2`, `h3`, `ul`, `ol`, `li`, `blockquote`, etc.) to custom React components that use Chakra UI primitives (`Text`, `Box`, etc.).  \n* **Styling choices**  \n  * Paragraphs (`p`) are rendered with a purple‑colored text (`purple.50`) and a line‑height of 1.7.  \n  * Headings (`h1`, `h2`, `h3`) use progressively smaller font sizes (`xl`, `lg`, `md`) but all share the same purple accent (`purple.200`).  \n  * Lists (`ul`, `ol`) are indented (`ml={4}`) and their items (`li`) get a small bottom margin.  \n  * Blockquotes are highlighted with a purple left border and a light purple background (`rgba(139, 92, 246, 0.1)`).\n* **Code blocks**  \n  * The `code` tag is wired to a `CodeComponent` that receives props such as `idx`, `copiedCodeBlocks`, and an `onCodeBlockCopy` callback.  \n  * This suggests that code snippets are interactive—users can copy them, and the component tracks which blocks have been copied.\n\n**Example usage**\n\n```tsx\n<MarkdownComponents>\n  <h1>Welcome</h1>\n  <p>This is a sample paragraph.</p>\n  <code>console.log(\'Hello world\');</code>\n</MarkdownComponents>\n```\n\nThe above would render a styled heading, paragraph, and a copy‑able code block.\n\n---\n\n### 2. Centralized Model & Provider Configuration\n\n**File:** `src/entities/Constants.ts`\n\n* The file defines a large number of **model identifiers** for various AI providers (OpenAI, Gemini, Groq, DeepSeek, etc.).  \n* **Provider lists**  \n  * `modelsProviders` contains the names of supported providers.  \n  * `ollamaModels`, `groqModels`, `togetherModels`, etc., list specific model names for each provider.  \n* **Mapping**  \n  * `providers_models` is a `Map<string, string[]>` that links a provider key (e.g., `"groq"`) to its array of model names.  \n  * This structure makes it easy to look up all models for a given provider at runtime.\n\n**Why this matters**\n\n* The application likely offers a UI where users can pick a provider and then choose a model from the corresponding list.  \n* By centralizing these constants, the codebase ensures consistency across the UI, API calls, and any logic that depends on the available models.\n\n**Example lookup**\n\n```ts\nconst groqModels = providers_models.get(\'groq\'); // returns the array of Groq model names\n```\n\n---\n\n### 3. Overall Observations\n\n1. **UI Layer** – The project uses Chakra UI for styling, which keeps the component code concise and theme‑aware.  \n2. **Interactivity** – Code blocks are not just static; they support copy‑to‑clipboard functionality, hinting at a user‑friendly design.  \n3. **Extensibility** – The constants file is designed to be easily extended: adding a new provider or model is as simple as appending to the relevant array and updating the map.  \n4. **Consistency** – By mapping Markdown tags to Chakra components, the app guarantees a uniform look for all rendered markdown content, regardless of source.\n\n---\n\nIn short, the codebase is focused on delivering a polished, theme‑consistent Markdown renderer and a flexible, centralized configuration for AI model selection. This setup makes it straightforward to add new providers or tweak the UI without touching many disparate parts of the code.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('9e05019f-85dc-48af-8731-1306f9e7e3ad'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 51, 38, 178029), content='Give entire dir structure of codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('ab3aaff8-c7b9-4bfd-b103-e2ae9793c222'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 51, 39, 853223), content='Below is a **complete directory tree** that reflects everything we can see (and reasonably infer) from the snippets you shared.  \nIf the repository contains additional files or folders that weren’t mentioned in the snippets, they’ll appear as “…” placeholders.\n\n```\n/\n├── package.json\n├── tsconfig.json\n├── public/\n│   ├── index.html\n│   └── ... (static assets)\n└── src/\n    ├── index.css\n    ├── main.tsx\n    ├── router.tsx\n    ├── theme.ts\n    ├── components/\n    │   ├── ui/\n    │   │   └── toaster.tsx\n    │   └── ... (other UI components)\n    ├── entities/\n    │   └── Constants.ts\n    └── ... (any additional source folders)\n```\n\n### What we know from the snippets\n\n| File | Purpose (as inferred) |\n|------|-----------------------|\n| **src/main.tsx** | Entry point that mounts the React app, wraps it in Chakra UI, and injects the router and toaster. |\n| **src/router.tsx** | Defines the app’s routing (not shown, but imported in `main.tsx`). |\n| **src/theme.ts** | Custom Chakra UI theme configuration. |\n| **src/components/ui/toaster.tsx** | Toast notification component. |\n| **src/entities/Constants.ts** | Centralised list of AI model identifiers for various providers. |\n| **src/index.css** | Global CSS (likely contains resets or base styles). |\n\nIf you need the exact contents of any of the “…” placeholders, let me know and I can dive deeper into that part of the codebase!', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('2b8c48ab-8b1b-4252-a83c-ec9871313bc9'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 53, 54, 251739), content='What do you think this codebase is about', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('a3027a46-1bbe-4160-ae85-299e6bf4ccd8'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 53, 55, 961520), content='## What the codebase is about\n\nFrom the snippets you shared, the project is a **web‑based AI‑assistant / chat platform** that lets users:\n\n1. **Choose a language‑model provider** (OpenAI, Gemini, Groq, DeepSeek, etc.)  \n2. **Select a specific model** from that provider’s catalog.  \n3. **Interact with the model** through a chat UI that renders responses as Markdown, including code blocks that can be copied to the clipboard.  \n\nBelow is a quick rundown of the key pieces that make this possible.\n\n| Layer | What it does | How it’s implemented |\n|-------|--------------|----------------------|\n| **Model configuration** | Centralised list of all supported providers and their models. | `src/entities/Constants.ts` defines arrays (`togetherModels`, `deepInfraModels`, …) and a `Map` (`providers_models`) that maps a provider key to its model list. |\n| **UI / styling** | Consistent, theme‑aware rendering of chat messages. | Chakra‑UI is used throughout (`theme.ts`, `components/MarkdownComponents.tsx`). Markdown tags are mapped to Chakra components, so every message looks the same regardless of source. |\n| **Markdown rendering** | Chat responses can contain rich text, lists, blockquotes, and code snippets. | `MarkdownComponents.tsx` provides custom components for each Markdown element, including a copy‑to‑clipboard button for `<code>` blocks. |\n| **Interaction** | Users can copy code snippets, switch providers/models, and see real‑time responses. | The copy‑to‑clipboard logic is wired into the `<code>` component; provider/model selection likely lives in a sidebar or dropdown (not shown in the snippets). |\n| **Routing / entry point** | The app is a single‑page React application. | `main.tsx` mounts the root component, wraps it in Chakra’s `<ChakraProvider>`, and sets up routing (`router.tsx`). |\n\n### Why this structure makes sense\n\n- **Extensibility** – Adding a new provider or model is as simple as appending to the relevant array and updating the `Map`.  \n- **Consistency** – All Markdown content is rendered through the same Chakra‑based component tree, so the look and feel stays uniform.  \n- **User experience** – Copyable code blocks and a clean theme make the chat interface friendly for developers and non‑developers alike.  \n\nIn short, the codebase is a **developer‑friendly, multi‑provider AI chat application** that emphasizes clean UI, easy configuration, and rich text rendering.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('ee761079-e205-44a9-8871-2f97ee01b613'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 1, 351580), content='Can you get useMessage hook from this codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('6e8d9f1f-4cff-41e8-9323-4a3286a0f4fb'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 3, 219930), content='', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('4cb28318-2cf5-41d6-b2aa-3bc409cc96bd'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 47, 540404), content='Fetch again', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('aa083c8f-1df3-47d6-bd98-fc4fe44e3953'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 49, 235504), content="I’m afraid the snippets you shared don’t include a `useMessage` hook, so I can’t pull the exact source code from the context you’ve provided.  \nIf the hook lives in the repository (most likely under `src/hooks/useMessage.ts`), you can fetch it directly from GitHub with a URL like:\n\n```\nhttps://raw.githubusercontent.com/DineshThumma9/centralGPT/main/src/hooks/useMessage.ts\n```\n\nIf you can confirm the file’s location or paste its contents here, I’ll be able to give you the precise implementation.\n\n---\n\n### A quick “what you might expect” sketch\n\nBelow is a **generic outline** of what a `useMessage` hook could look like in a project that already has:\n\n* `sessionStore` (for global session & message state)\n* `session-api` (for API calls to send/receive messages)\n* `useSessions` (for session‑management helpers)\n\n```ts\n// src/hooks/useMessage.ts\nimport { useState, useEffect, useCallback } from 'react';\nimport { useSessionStore } from '../store/sessionStore';\nimport { sendMessage, getMessageHistory } from '../api/message-api';\n\nexport const useMessage = () => {\n  // Grab session‑related state from the global store\n  const {\n    current_session,\n    messages,\n    setMessages,\n    setLoading,\n    setStreaming,\n  } = useSessionStore();\n\n  // Local state for the input field\n  const [input, setInput] = useState('');\n\n  // Helper to append a new message to the store\n  const addMessage = (msg: Message) =>\n    setMessages((prev) => [...prev, msg]);\n\n  // Send a user message and stream the assistant’s reply\n  const send = useCallback(async () => {\n    if (!input.trim() || !current_session) return;\n\n    // 1️⃣ Add the user’s message immediately\n    const userMsg: Message = {\n      role: 'user',\n      content: input,\n      timestamp: new Date().toISOString(),\n    };\n    addMessage(userMsg);\n\n    // 2️⃣ Prepare for streaming\n    setLoading(true);\n    setStreaming(true);\n\n    try {\n      // 3️⃣ Call the backend – this could be a simple POST or a SSE endpoint\n      const stream = await sendMessage(current_session, input);\n\n      // 4️⃣ Consume the stream (pseudo‑code)\n      for await (const chunk of stream) {\n        // Append partial assistant replies as they arrive\n        addMessage({\n          role: 'assistant',\n          content: chunk,\n          timestamp: new Date().toISOString(),\n        });\n      }\n    } catch (err) {\n      console.error('Message send failed', err);\n    } finally {\n      setLoading(false);\n      setStreaming(false);\n      setInput(''); // clear the input field\n    }\n  }, [input, current_session, setLoading, setStreaming, setMessages]);\n\n  // Load the message history when a session is selected\n  useEffect(() => {\n    if (!current_session) return;\n\n    const loadHistory = async () => {\n      setLoading(true);\n      try {\n        const history = await getMessageHistory(current_session);\n        setMessages(history);\n      } catch (err) {\n        console.error('Failed to load history', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadHistory();\n  }, [current_session, setLoading, setMessages]);\n\n  return {\n    input,\n    setInput,\n    send,\n    messages,\n  };\n};\n```\n\n> **Note:**  \n> *The actual implementation in your repo may differ in naming, API shape, or streaming logic. The above is just a template that shows how the hook could tie together the store, API, and UI.*\n\n---\n\n### Next steps\n\n1. **Verify the file path** – If `useMessage` is indeed in `src/hooks/useMessage.ts`, copy the raw URL above into your browser or a tool like `curl` to see the real code.  \n2. **Share the file** – If you paste the file’s contents here, I can walk through it line‑by‑line.  \n3", files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('1240f1cc-23fd-4798-a794-0c252029127b'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 56, 26, 723455), content='What is file you are most familier with', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('705c8242-94b7-44b6-8ea7-50a35273d40e'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 56, 28, 436968), content='I’m most familiar with **`src/components/LLMModelChooser.tsx`**.  \nIt’s the component that lets users pick an AI provider and a specific model, and it also shows the current API key. Here’s a quick rundown of what it does and why it’s central to the app:\n\n| Feature | What it does | Why it matters |\n|---------|--------------|----------------|\n| **Provider badge** | `<BadgeCompo label={currentLLMProvider}/>` | Gives instant visual feedback on which provider is active. |\n| **Model badge** | `<BadgeCompo label={currentModel}/>` | Shows the chosen model, so users know exactly what they’re chatting with. |\n| **API key input** | `<APIKey provider={currentAPIProvider} title="API KEY" />` | Lets users enter or update the key for the selected provider. |\n| **Conditional rendering** | `{(currentLLMProvider || currentModel || shouldStream) && …}` | Only shows the badges when there’s something to display, keeping the UI clean. |\n| **Layout** | Uses Chakra UI’s `<HStack>` for horizontal alignment and spacing. | Keeps the UI consistent with the rest of the app’s Chakra‑based design. |\n\nBecause this component sits at the intersection of user configuration (provider, model, key) and the rest of the chat logic, it’s a good entry point for understanding how the app manages state and interacts with the backend.', files=None, model_response_time_ms=None)]
2025-08-16 18:57:28.930 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('bd583eab-4118-4f10-9dd0-9b20c4ecc3d4'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 50, 53, 455695), content='What did you learn from codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('3e19482c-0a1b-48a4-8115-5c50d6ed999d'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 50, 55, 309759), content='From the two snippets you shared, I was able to piece together a few key ideas about how this project is structured and what its main responsibilities are.\n\n---\n\n### 1. Rendering Markdown with Chakra UI\n\n**File:** `src/components/MarkdownComponents.tsx`\n\n* The component exports a mapping of standard Markdown tags (`p`, `h1`, `h2`, `h3`, `ul`, `ol`, `li`, `blockquote`, etc.) to custom React components that use Chakra UI primitives (`Text`, `Box`, etc.).  \n* **Styling choices**  \n  * Paragraphs (`p`) are rendered with a purple‑colored text (`purple.50`) and a line‑height of 1.7.  \n  * Headings (`h1`, `h2`, `h3`) use progressively smaller font sizes (`xl`, `lg`, `md`) but all share the same purple accent (`purple.200`).  \n  * Lists (`ul`, `ol`) are indented (`ml={4}`) and their items (`li`) get a small bottom margin.  \n  * Blockquotes are highlighted with a purple left border and a light purple background (`rgba(139, 92, 246, 0.1)`).\n* **Code blocks**  \n  * The `code` tag is wired to a `CodeComponent` that receives props such as `idx`, `copiedCodeBlocks`, and an `onCodeBlockCopy` callback.  \n  * This suggests that code snippets are interactive—users can copy them, and the component tracks which blocks have been copied.\n\n**Example usage**\n\n```tsx\n<MarkdownComponents>\n  <h1>Welcome</h1>\n  <p>This is a sample paragraph.</p>\n  <code>console.log(\'Hello world\');</code>\n</MarkdownComponents>\n```\n\nThe above would render a styled heading, paragraph, and a copy‑able code block.\n\n---\n\n### 2. Centralized Model & Provider Configuration\n\n**File:** `src/entities/Constants.ts`\n\n* The file defines a large number of **model identifiers** for various AI providers (OpenAI, Gemini, Groq, DeepSeek, etc.).  \n* **Provider lists**  \n  * `modelsProviders` contains the names of supported providers.  \n  * `ollamaModels`, `groqModels`, `togetherModels`, etc., list specific model names for each provider.  \n* **Mapping**  \n  * `providers_models` is a `Map<string, string[]>` that links a provider key (e.g., `"groq"`) to its array of model names.  \n  * This structure makes it easy to look up all models for a given provider at runtime.\n\n**Why this matters**\n\n* The application likely offers a UI where users can pick a provider and then choose a model from the corresponding list.  \n* By centralizing these constants, the codebase ensures consistency across the UI, API calls, and any logic that depends on the available models.\n\n**Example lookup**\n\n```ts\nconst groqModels = providers_models.get(\'groq\'); // returns the array of Groq model names\n```\n\n---\n\n### 3. Overall Observations\n\n1. **UI Layer** – The project uses Chakra UI for styling, which keeps the component code concise and theme‑aware.  \n2. **Interactivity** – Code blocks are not just static; they support copy‑to‑clipboard functionality, hinting at a user‑friendly design.  \n3. **Extensibility** – The constants file is designed to be easily extended: adding a new provider or model is as simple as appending to the relevant array and updating the map.  \n4. **Consistency** – By mapping Markdown tags to Chakra components, the app guarantees a uniform look for all rendered markdown content, regardless of source.\n\n---\n\nIn short, the codebase is focused on delivering a polished, theme‑consistent Markdown renderer and a flexible, centralized configuration for AI model selection. This setup makes it straightforward to add new providers or tweak the UI without touching many disparate parts of the code.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('9e05019f-85dc-48af-8731-1306f9e7e3ad'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 51, 38, 178029), content='Give entire dir structure of codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('ab3aaff8-c7b9-4bfd-b103-e2ae9793c222'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 51, 39, 853223), content='Below is a **complete directory tree** that reflects everything we can see (and reasonably infer) from the snippets you shared.  \nIf the repository contains additional files or folders that weren’t mentioned in the snippets, they’ll appear as “…” placeholders.\n\n```\n/\n├── package.json\n├── tsconfig.json\n├── public/\n│   ├── index.html\n│   └── ... (static assets)\n└── src/\n    ├── index.css\n    ├── main.tsx\n    ├── router.tsx\n    ├── theme.ts\n    ├── components/\n    │   ├── ui/\n    │   │   └── toaster.tsx\n    │   └── ... (other UI components)\n    ├── entities/\n    │   └── Constants.ts\n    └── ... (any additional source folders)\n```\n\n### What we know from the snippets\n\n| File | Purpose (as inferred) |\n|------|-----------------------|\n| **src/main.tsx** | Entry point that mounts the React app, wraps it in Chakra UI, and injects the router and toaster. |\n| **src/router.tsx** | Defines the app’s routing (not shown, but imported in `main.tsx`). |\n| **src/theme.ts** | Custom Chakra UI theme configuration. |\n| **src/components/ui/toaster.tsx** | Toast notification component. |\n| **src/entities/Constants.ts** | Centralised list of AI model identifiers for various providers. |\n| **src/index.css** | Global CSS (likely contains resets or base styles). |\n\nIf you need the exact contents of any of the “…” placeholders, let me know and I can dive deeper into that part of the codebase!', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('2b8c48ab-8b1b-4252-a83c-ec9871313bc9'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 53, 54, 251739), content='What do you think this codebase is about', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('a3027a46-1bbe-4160-ae85-299e6bf4ccd8'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 53, 55, 961520), content='## What the codebase is about\n\nFrom the snippets you shared, the project is a **web‑based AI‑assistant / chat platform** that lets users:\n\n1. **Choose a language‑model provider** (OpenAI, Gemini, Groq, DeepSeek, etc.)  \n2. **Select a specific model** from that provider’s catalog.  \n3. **Interact with the model** through a chat UI that renders responses as Markdown, including code blocks that can be copied to the clipboard.  \n\nBelow is a quick rundown of the key pieces that make this possible.\n\n| Layer | What it does | How it’s implemented |\n|-------|--------------|----------------------|\n| **Model configuration** | Centralised list of all supported providers and their models. | `src/entities/Constants.ts` defines arrays (`togetherModels`, `deepInfraModels`, …) and a `Map` (`providers_models`) that maps a provider key to its model list. |\n| **UI / styling** | Consistent, theme‑aware rendering of chat messages. | Chakra‑UI is used throughout (`theme.ts`, `components/MarkdownComponents.tsx`). Markdown tags are mapped to Chakra components, so every message looks the same regardless of source. |\n| **Markdown rendering** | Chat responses can contain rich text, lists, blockquotes, and code snippets. | `MarkdownComponents.tsx` provides custom components for each Markdown element, including a copy‑to‑clipboard button for `<code>` blocks. |\n| **Interaction** | Users can copy code snippets, switch providers/models, and see real‑time responses. | The copy‑to‑clipboard logic is wired into the `<code>` component; provider/model selection likely lives in a sidebar or dropdown (not shown in the snippets). |\n| **Routing / entry point** | The app is a single‑page React application. | `main.tsx` mounts the root component, wraps it in Chakra’s `<ChakraProvider>`, and sets up routing (`router.tsx`). |\n\n### Why this structure makes sense\n\n- **Extensibility** – Adding a new provider or model is as simple as appending to the relevant array and updating the `Map`.  \n- **Consistency** – All Markdown content is rendered through the same Chakra‑based component tree, so the look and feel stays uniform.  \n- **User experience** – Copyable code blocks and a clean theme make the chat interface friendly for developers and non‑developers alike.  \n\nIn short, the codebase is a **developer‑friendly, multi‑provider AI chat application** that emphasizes clean UI, easy configuration, and rich text rendering.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('ee761079-e205-44a9-8871-2f97ee01b613'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 1, 351580), content='Can you get useMessage hook from this codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('6e8d9f1f-4cff-41e8-9323-4a3286a0f4fb'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 3, 219930), content='', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('4cb28318-2cf5-41d6-b2aa-3bc409cc96bd'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 47, 540404), content='Fetch again', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('aa083c8f-1df3-47d6-bd98-fc4fe44e3953'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 55, 49, 235504), content="I’m afraid the snippets you shared don’t include a `useMessage` hook, so I can’t pull the exact source code from the context you’ve provided.  \nIf the hook lives in the repository (most likely under `src/hooks/useMessage.ts`), you can fetch it directly from GitHub with a URL like:\n\n```\nhttps://raw.githubusercontent.com/DineshThumma9/centralGPT/main/src/hooks/useMessage.ts\n```\n\nIf you can confirm the file’s location or paste its contents here, I’ll be able to give you the precise implementation.\n\n---\n\n### A quick “what you might expect” sketch\n\nBelow is a **generic outline** of what a `useMessage` hook could look like in a project that already has:\n\n* `sessionStore` (for global session & message state)\n* `session-api` (for API calls to send/receive messages)\n* `useSessions` (for session‑management helpers)\n\n```ts\n// src/hooks/useMessage.ts\nimport { useState, useEffect, useCallback } from 'react';\nimport { useSessionStore } from '../store/sessionStore';\nimport { sendMessage, getMessageHistory } from '../api/message-api';\n\nexport const useMessage = () => {\n  // Grab session‑related state from the global store\n  const {\n    current_session,\n    messages,\n    setMessages,\n    setLoading,\n    setStreaming,\n  } = useSessionStore();\n\n  // Local state for the input field\n  const [input, setInput] = useState('');\n\n  // Helper to append a new message to the store\n  const addMessage = (msg: Message) =>\n    setMessages((prev) => [...prev, msg]);\n\n  // Send a user message and stream the assistant’s reply\n  const send = useCallback(async () => {\n    if (!input.trim() || !current_session) return;\n\n    // 1️⃣ Add the user’s message immediately\n    const userMsg: Message = {\n      role: 'user',\n      content: input,\n      timestamp: new Date().toISOString(),\n    };\n    addMessage(userMsg);\n\n    // 2️⃣ Prepare for streaming\n    setLoading(true);\n    setStreaming(true);\n\n    try {\n      // 3️⃣ Call the backend – this could be a simple POST or a SSE endpoint\n      const stream = await sendMessage(current_session, input);\n\n      // 4️⃣ Consume the stream (pseudo‑code)\n      for await (const chunk of stream) {\n        // Append partial assistant replies as they arrive\n        addMessage({\n          role: 'assistant',\n          content: chunk,\n          timestamp: new Date().toISOString(),\n        });\n      }\n    } catch (err) {\n      console.error('Message send failed', err);\n    } finally {\n      setLoading(false);\n      setStreaming(false);\n      setInput(''); // clear the input field\n    }\n  }, [input, current_session, setLoading, setStreaming, setMessages]);\n\n  // Load the message history when a session is selected\n  useEffect(() => {\n    if (!current_session) return;\n\n    const loadHistory = async () => {\n      setLoading(true);\n      try {\n        const history = await getMessageHistory(current_session);\n        setMessages(history);\n      } catch (err) {\n        console.error('Failed to load history', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadHistory();\n  }, [current_session, setLoading, setMessages]);\n\n  return {\n    input,\n    setInput,\n    send,\n    messages,\n  };\n};\n```\n\n> **Note:**  \n> *The actual implementation in your repo may differ in naming, API shape, or streaming logic. The above is just a template that shows how the hook could tie together the store, API, and UI.*\n\n---\n\n### Next steps\n\n1. **Verify the file path** – If `useMessage` is indeed in `src/hooks/useMessage.ts`, copy the raw URL above into your browser or a tool like `curl` to see the real code.  \n2. **Share the file** – If you paste the file’s contents here, I can walk through it line‑by‑line.  \n3", files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, message_id=UUID('1240f1cc-23fd-4798-a794-0c252029127b'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 56, 26, 723455), content='What is file you are most familier with', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, message_id=UUID('705c8242-94b7-44b6-8ea7-50a35273d40e'), session_id=UUID('b483374f-fdea-4479-befa-6b84bdde3071'), timestamp=datetime.datetime(2025, 8, 16, 18, 56, 28, 436968), content='I’m most familiar with **`src/components/LLMModelChooser.tsx`**.  \nIt’s the component that lets users pick an AI provider and a specific model, and it also shows the current API key. Here’s a quick rundown of what it does and why it’s central to the app:\n\n| Feature | What it does | Why it matters |\n|---------|--------------|----------------|\n| **Provider badge** | `<BadgeCompo label={currentLLMProvider}/>` | Gives instant visual feedback on which provider is active. |\n| **Model badge** | `<BadgeCompo label={currentModel}/>` | Shows the chosen model, so users know exactly what they’re chatting with. |\n| **API key input** | `<APIKey provider={currentAPIProvider} title="API KEY" />` | Lets users enter or update the key for the selected provider. |\n| **Conditional rendering** | `{(currentLLMProvider || currentModel || shouldStream) && …}` | Only shows the badges when there’s something to display, keeping the UI clean. |\n| **Layout** | Uses Chakra UI’s `<HStack>` for horizontal alignment and spacing. | Keeps the UI consistent with the rest of the app’s Chakra‑based design. |\n\nBecause this component sits at the intersection of user configuration (provider, model, key) and the rest of the chat logic, it’s a good entry point for understanding how the app manages state and interacts with the backend.', files=None, model_response_time_ms=None)]
2025-08-16 18:57:28.944 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('bd583eab-4118-4f10-9dd0-9b20c4ecc3d4'), 'session_id': UUID('b483374f-fdea-4479-befa-6b84bdde3071'), 'timestamp': datetime.datetime(2025, 8, 16, 18, 50, 53, 455695), 'content': 'What did you learn from codebase', 'files': [], 'model_response_time_ms': None}
2025-08-16 18:57:28.944 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'message_id': UUID('bd583eab-4118-4f10-9dd0-9b20c4ecc3d4'), 'session_id': UUID('b483374f-fdea-4479-befa-6b84bdde3071'), 'timestamp': datetime.datetime(2025, 8, 16, 18, 50, 53, 455695), 'content': 'What did you learn from codebase', 'files': [], 'model_response_time_ms': None}
2025-08-16 18:57:29.203 | INFO     | src.main:log_requests:54 - GET /sessions/history/b483374f-fdea-4479-befa-6b84bdde3071 → 200 (1025.87ms)
2025-08-16 18:57:29.203 | INFO     | src.main:log_requests:54 - GET /sessions/history/b483374f-fdea-4479-befa-6b84bdde3071 → 200 (1025.87ms)
2025-08-16 18:57:39.604 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 18:57:39.604 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 18:57:41.917 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2313.43ms)
2025-08-16 18:57:41.917 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2313.43ms)
2025-08-16 18:57:56.910 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 18:57:56.910 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 18:57:56.912 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (2.0ms)
2025-08-16 18:57:56.912 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (2.0ms)
2025-08-16 18:57:56.918 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 18:57:56.918 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 18:58:10.353 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (13435.29ms)
2025-08-16 18:58:10.353 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (13435.29ms)
2025-08-16 18:58:10.722 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:58:10.722 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:58:11.999 | INFO     | src.router.messages:message_stream:111 - Recived files in backend:['DineshThummaResume.pdf']
2025-08-16 18:58:11.999 | INFO     | src.router.messages:message_stream:111 - Recived files in backend:['DineshThummaResume.pdf']
2025-08-16 18:58:13.218 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2496.46ms)
2025-08-16 18:58:13.218 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2496.46ms)
2025-08-16 18:58:19.715 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/44cecb8c-a36c-43a9-8fba-db87bb342d55/title
2025-08-16 18:58:19.715 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/44cecb8c-a36c-43a9-8fba-db87bb342d55/title
2025-08-16 18:58:19.716 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/44cecb8c-a36c-43a9-8fba-db87bb342d55/title → 200 (1.52ms)
2025-08-16 18:58:19.716 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/44cecb8c-a36c-43a9-8fba-db87bb342d55/title → 200 (1.52ms)
2025-08-16 18:58:20.034 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/44cecb8c-a36c-43a9-8fba-db87bb342d55/title
2025-08-16 18:58:20.034 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/44cecb8c-a36c-43a9-8fba-db87bb342d55/title
2025-08-16 18:58:22.124 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 44cecb8c-a36c-43a9-8fba-db87bb342d55: Resume Explanation and Analysis Request 
Title: Resume Explanation Request
2025-08-16 18:58:22.124 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 44cecb8c-a36c-43a9-8fba-db87bb342d55: Resume Explanation and Analysis Request 
Title: Resume Explanation Request
2025-08-16 18:58:22.366 | INFO     | src.main:log_requests:54 - PATCH /sessions/44cecb8c-a36c-43a9-8fba-db87bb342d55/title → 200 (2332.05ms)
2025-08-16 18:58:22.366 | INFO     | src.main:log_requests:54 - PATCH /sessions/44cecb8c-a36c-43a9-8fba-db87bb342d55/title → 200 (2332.05ms)
2025-08-16 18:58:40.880 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:58:40.880 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 18:58:42.207 | INFO     | src.router.messages:message_stream:111 - Recived files in backend:[]
2025-08-16 18:58:42.207 | INFO     | src.router.messages:message_stream:111 - Recived files in backend:[]
2025-08-16 18:58:42.207 | INFO     | src.router.messages:message_stream:127 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 18:58:42.207 | INFO     | src.router.messages:message_stream:127 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 18:58:44.092 | INFO     | src.router.messages:message_stream:158 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 18:58:44.092 | INFO     | src.router.messages:message_stream:158 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 18:58:44.337 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3457.23ms)
2025-08-16 18:58:44.337 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3457.23ms)
2025-08-16 18:58:56.315 | INFO     | src.router.messages:stream_response:59 - Sending Source nodes : Node ID: 464a7d42-519a-4ebe-8969-a265453ca4fc
Text: ●  Enabled  PDF-based  RAG  for  contextual  responses  from
uploaded  documents.  ●  Developed  GitHub  integration  for  RAG
operations  using  specified  repository  files.  ●  Engineered  a
robust  session  management  system  with  Redis  caching  and
PostgreSQL  for  persistent  storage,   ensuring   efficient   context
management.  ...
Score:  0.000

2025-08-16 18:58:56.315 | INFO     | src.router.messages:stream_response:59 - Sending Source nodes : Node ID: 464a7d42-519a-4ebe-8969-a265453ca4fc
Text: ●  Enabled  PDF-based  RAG  for  contextual  responses  from
uploaded  documents.  ●  Developed  GitHub  integration  for  RAG
operations  using  specified  repository  files.  ●  Engineered  a
robust  session  management  system  with  Redis  caching  and
PostgreSQL  for  persistent  storage,   ensuring   efficient   context
management.  ...
Score:  0.000

2025-08-16 18:58:56.317 | INFO     | src.router.messages:stream_response:60 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-16 18:58:56.317 | INFO     | src.router.messages:stream_response:60 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-16 18:59:32.663 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 18:59:32.663 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 18:59:34.988 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2324.21ms)
2025-08-16 18:59:34.988 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2324.21ms)
2025-08-16 19:21:46.486 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 19:21:46.486 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 19:22:04.717 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 19:22:26.528 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 19:22:43.516 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:22:43.516 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:22:43.547 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:22:43.547 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:22:50.537 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:22:50.537 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:23:05.898 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 19:23:22.081 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:23:22.081 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:23:22.098 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:23:22.098 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:23:27.989 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:23:27.989 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:23:43.679 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 19:23:59.105 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:23:59.105 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:23:59.117 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:23:59.117 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:24:05.027 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:24:05.027 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:24:26.247 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 19:24:26.247 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 19:24:44.629 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 19:25:01.026 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:25:01.026 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:25:01.039 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:25:01.039 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:25:07.137 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:25:07.137 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:25:29.453 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 19:25:29.453 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 19:25:43.041 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 19:25:58.649 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:25:58.649 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:25:58.673 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:25:58.673 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:26:04.757 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:26:04.757 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:26:45.208 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 19:26:45.208 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 19:27:02.803 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 19:27:21.081 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:27:21.081 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:27:21.106 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:27:21.106 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:27:27.012 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:27:27.012 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:27:37.455 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 19:27:37.455 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 19:27:56.067 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 19:28:11.440 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:28:11.440 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:28:11.454 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:28:11.454 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:28:17.426 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:28:17.426 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:29:12.676 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 19:29:12.676 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 19:29:26.662 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 19:29:42.166 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:29:42.166 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:29:42.193 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:29:42.193 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:29:47.981 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:29:47.981 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:34:40.049 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 19:34:40.049 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 19:34:53.471 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 19:35:08.592 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:35:08.592 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:35:08.616 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:35:08.616 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:35:15.916 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:35:15.916 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:35:30.267 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 19:35:46.223 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:35:46.223 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:35:46.239 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:35:46.239 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:35:52.576 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:35:52.576 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:36:51.119 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 19:36:51.119 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 19:37:05.382 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 19:37:20.566 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:37:20.566 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:37:20.586 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:37:20.586 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:37:26.496 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:37:26.496 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:38:30.576 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 19:38:30.576 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 19:38:49.369 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 19:39:08.108 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:39:08.108 | INFO     | src.main:<module>:20 - Server started
2025-08-16 19:39:08.131 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:39:08.131 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 19:39:14.331 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 19:39:14.331 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 21:24:47.349 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-16 21:24:47.349 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-16 21:26:57.203 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 21:27:21.741 | INFO     | src.main:<module>:20 - Server started
2025-08-16 21:27:21.741 | INFO     | src.main:<module>:20 - Server started
2025-08-16 21:27:21.779 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 21:27:21.779 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 21:27:31.832 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 21:27:31.832 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 21:29:48.885 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-16 21:29:48.885 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-16 21:29:50.571 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-16 21:29:50.571 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-16 21:29:50.574 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (1689.2ms)
2025-08-16 21:29:50.574 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (1689.2ms)
2025-08-16 21:29:50.910 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 21:29:50.910 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 21:29:50.911 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.0ms)
2025-08-16 21:29:50.911 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.0ms)
2025-08-16 21:29:50.915 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 21:29:50.915 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 21:29:52.829 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (1913.92ms)
2025-08-16 21:29:52.829 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (1913.92ms)
2025-08-16 21:32:46.960 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:32:46.960 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:32:46.964 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (4.41ms)
2025-08-16 21:32:46.964 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (4.41ms)
2025-08-16 21:32:46.967 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 21:32:46.967 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 21:32:46.968 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (1.01ms)
2025-08-16 21:32:46.968 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (1.01ms)
2025-08-16 21:32:46.971 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 21:32:46.971 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 21:32:46.972 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (1.0ms)
2025-08-16 21:32:46.972 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (1.0ms)
2025-08-16 21:32:47.288 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 21:32:47.288 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 21:32:49.134 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 21:32:49.134 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 21:32:52.473 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:32:52.473 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:32:52.477 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (5189.05ms)
2025-08-16 21:32:52.477 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (5189.05ms)
2025-08-16 21:32:52.480 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (6.99ms)
2025-08-16 21:32:52.480 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (6.99ms)
2025-08-16 21:32:52.485 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 21:32:52.485 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 21:32:54.371 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (5237.68ms)
2025-08-16 21:32:54.371 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (5237.68ms)
2025-08-16 21:32:54.607 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2122.08ms)
2025-08-16 21:32:54.607 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2122.08ms)
2025-08-16 21:32:57.643 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:32:57.643 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:32:57.645 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:32:57.645 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:33:00.656 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:00.656 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:00.659 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.44ms)
2025-08-16 21:33:00.659 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.44ms)
2025-08-16 21:33:03.677 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:03.677 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:03.679 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.63ms)
2025-08-16 21:33:03.679 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.63ms)
2025-08-16 21:33:06.827 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:06.827 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:06.832 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (5.02ms)
2025-08-16 21:33:06.832 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (5.02ms)
2025-08-16 21:33:09.860 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:09.860 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:09.862 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:33:09.862 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:33:12.873 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:12.873 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:12.875 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:33:12.875 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:33:15.887 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:15.887 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:15.890 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.02ms)
2025-08-16 21:33:15.890 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.02ms)
2025-08-16 21:33:18.923 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:18.923 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:18.924 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.02ms)
2025-08-16 21:33:18.924 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.02ms)
2025-08-16 21:33:22.923 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:22.923 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:22.924 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.39ms)
2025-08-16 21:33:22.924 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.39ms)
2025-08-16 21:33:24.330 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:24.330 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:24.332 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.17ms)
2025-08-16 21:33:24.332 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.17ms)
2025-08-16 21:33:27.933 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:27.933 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:27.935 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.18ms)
2025-08-16 21:33:27.935 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.18ms)
2025-08-16 21:33:31.929 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:31.929 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:31.931 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.97ms)
2025-08-16 21:33:31.931 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.97ms)
2025-08-16 21:33:35.921 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:35.921 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:35.923 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.01ms)
2025-08-16 21:33:35.923 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.01ms)
2025-08-16 21:33:39.935 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:39.935 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:39.942 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (6.49ms)
2025-08-16 21:33:39.942 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (6.49ms)
2025-08-16 21:33:43.932 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:43.932 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:43.934 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.48ms)
2025-08-16 21:33:43.934 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.48ms)
2025-08-16 21:33:47.929 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:47.929 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:47.932 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.84ms)
2025-08-16 21:33:47.932 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.84ms)
2025-08-16 21:33:51.930 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:51.930 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:51.932 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.99ms)
2025-08-16 21:33:51.932 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.99ms)
2025-08-16 21:33:55.928 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:55.928 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:55.930 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.34ms)
2025-08-16 21:33:55.930 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.34ms)
2025-08-16 21:33:59.935 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:59.935 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:33:59.937 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.01ms)
2025-08-16 21:33:59.937 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.01ms)
2025-08-16 21:34:03.935 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:03.935 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:03.937 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.36ms)
2025-08-16 21:34:03.937 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.36ms)
2025-08-16 21:34:07.931 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:07.931 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:07.932 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.45ms)
2025-08-16 21:34:07.932 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.45ms)
2025-08-16 21:34:11.925 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:11.925 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:11.927 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.01ms)
2025-08-16 21:34:11.927 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.01ms)
2025-08-16 21:34:15.930 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:15.930 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:15.933 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.6ms)
2025-08-16 21:34:15.933 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.6ms)
2025-08-16 21:34:19.932 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:19.932 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:19.934 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.1ms)
2025-08-16 21:34:19.934 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.1ms)
2025-08-16 21:34:23.924 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:23.924 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:23.926 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.08ms)
2025-08-16 21:34:23.926 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.08ms)
2025-08-16 21:34:27.941 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:27.941 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:27.943 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.3ms)
2025-08-16 21:34:27.943 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.3ms)
2025-08-16 21:34:31.927 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:31.927 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:31.929 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:34:31.929 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:34:35.929 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:35.929 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:35.931 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.45ms)
2025-08-16 21:34:35.931 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.45ms)
2025-08-16 21:34:39.921 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:39.921 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:39.923 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:34:39.923 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:34:43.921 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:43.921 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:43.922 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.22ms)
2025-08-16 21:34:43.922 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.22ms)
2025-08-16 21:34:47.982 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:47.982 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:47.985 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.0ms)
2025-08-16 21:34:47.985 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.0ms)
2025-08-16 21:34:51.926 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:51.926 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:51.927 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.65ms)
2025-08-16 21:34:51.927 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.65ms)
2025-08-16 21:34:55.923 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:55.923 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:55.925 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.99ms)
2025-08-16 21:34:55.925 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.99ms)
2025-08-16 21:34:59.004 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:59.004 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:34:59.007 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.0ms)
2025-08-16 21:34:59.007 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.0ms)
2025-08-16 21:35:14.738 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 21:35:14.738 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 21:35:16.654 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (1915.89ms)
2025-08-16 21:35:16.654 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (1915.89ms)
2025-08-16 21:36:30.509 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:36:30.509 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:36:30.511 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.62ms)
2025-08-16 21:36:30.511 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.62ms)
2025-08-16 21:36:31.680 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 21:36:31.680 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 21:36:33.573 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1892.41ms)
2025-08-16 21:36:33.573 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1892.41ms)
2025-08-16 21:36:34.727 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:36:34.727 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:36:34.728 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.0ms)
2025-08-16 21:36:34.728 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.0ms)
2025-08-16 21:36:37.746 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:36:37.746 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:36:37.750 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.99ms)
2025-08-16 21:36:37.750 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.99ms)
2025-08-16 21:36:41.007 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:36:41.007 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:36:41.009 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.43ms)
2025-08-16 21:36:41.009 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.43ms)
2025-08-16 21:36:43.969 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:36:43.969 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:36:43.971 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.05ms)
2025-08-16 21:36:43.971 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.05ms)
2025-08-16 21:37:11.557 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 21:37:11.557 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 21:37:13.644 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2087.18ms)
2025-08-16 21:37:13.644 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2087.18ms)
2025-08-16 21:37:23.555 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-16 21:37:23.555 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-16 21:37:23.557 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (1.96ms)
2025-08-16 21:37:23.557 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (1.96ms)
2025-08-16 21:37:23.868 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-16 21:37:23.868 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-16 21:37:24.960 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1092.42ms)
2025-08-16 21:37:24.960 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1092.42ms)
2025-08-16 21:37:26.213 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-16 21:37:26.213 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-16 21:37:26.214 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (0.99ms)
2025-08-16 21:37:26.214 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (0.99ms)
2025-08-16 21:37:26.218 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-16 21:37:26.218 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-16 21:37:27.275 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1056.54ms)
2025-08-16 21:37:27.275 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1056.54ms)
2025-08-16 21:37:43.268 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 21:37:43.268 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 21:37:43.269 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.0ms)
2025-08-16 21:37:43.269 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.0ms)
2025-08-16 21:37:43.306 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 21:37:43.306 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 21:37:43.351 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:37:43.351 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:37:43.353 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:37:43.353 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:44:58.785 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 21:44:58.785 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 21:45:24.097 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 21:45:45.722 | INFO     | src.main:<module>:20 - Server started
2025-08-16 21:45:45.722 | INFO     | src.main:<module>:20 - Server started
2025-08-16 21:45:45.744 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 21:45:45.744 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 21:45:52.518 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 21:45:52.518 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 21:46:28.173 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 21:46:28.173 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 21:46:28.488 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:46:28.488 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:46:28.491 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.78ms)
2025-08-16 21:46:28.491 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.78ms)
2025-08-16 21:47:28.975 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 21:47:28.975 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 21:47:55.757 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 21:48:14.438 | INFO     | src.main:<module>:20 - Server started
2025-08-16 21:48:14.438 | INFO     | src.main:<module>:20 - Server started
2025-08-16 21:48:14.460 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 21:48:14.460 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 21:48:20.597 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 21:48:20.597 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 21:48:36.975 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 21:48:36.975 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 21:48:36.976 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.11ms)
2025-08-16 21:48:36.976 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.11ms)
2025-08-16 21:48:37.292 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 21:48:37.292 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 21:48:37.301 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (8.8ms)
2025-08-16 21:48:37.301 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (8.8ms)
2025-08-16 21:48:37.370 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:48:37.370 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:48:37.371 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.01ms)
2025-08-16 21:48:37.371 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.01ms)
2025-08-16 21:48:37.374 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:48:37.374 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:48:37.375 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.05ms)
2025-08-16 21:48:37.375 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.05ms)
2025-08-16 21:48:43.370 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:48:43.370 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:48:43.373 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.53ms)
2025-08-16 21:48:43.373 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.53ms)
2025-08-16 21:48:46.389 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:48:46.389 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:48:46.393 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.41ms)
2025-08-16 21:48:46.393 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.41ms)
2025-08-16 21:48:49.929 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:48:49.929 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:48:49.931 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.28ms)
2025-08-16 21:48:49.931 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.28ms)
2025-08-16 21:48:53.928 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:48:53.928 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:48:53.930 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:48:53.930 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:48:57.931 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:48:57.931 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:48:57.934 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.89ms)
2025-08-16 21:48:57.934 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.89ms)
2025-08-16 21:49:01.922 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:01.922 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:01.925 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.52ms)
2025-08-16 21:49:01.925 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.52ms)
2025-08-16 21:49:05.926 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:05.926 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:05.929 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.0ms)
2025-08-16 21:49:05.929 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.0ms)
2025-08-16 21:49:09.926 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:09.926 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:09.927 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.02ms)
2025-08-16 21:49:09.927 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.02ms)
2025-08-16 21:49:13.924 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:13.924 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:13.925 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (0.59ms)
2025-08-16 21:49:13.925 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (0.59ms)
2025-08-16 21:49:17.934 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:17.934 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:17.936 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.02ms)
2025-08-16 21:49:17.936 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.02ms)
2025-08-16 21:49:21.924 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:21.924 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:21.925 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.4ms)
2025-08-16 21:49:21.925 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.4ms)
2025-08-16 21:49:25.934 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:25.934 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:25.937 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.65ms)
2025-08-16 21:49:25.937 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.65ms)
2025-08-16 21:49:29.924 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:29.924 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:29.925 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (0.79ms)
2025-08-16 21:49:29.925 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (0.79ms)
2025-08-16 21:49:33.974 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:33.974 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:33.976 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.02ms)
2025-08-16 21:49:33.976 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.02ms)
2025-08-16 21:49:37.927 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:37.927 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:37.929 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:49:37.929 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:49:41.932 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:41.932 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:41.934 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.01ms)
2025-08-16 21:49:41.934 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.01ms)
2025-08-16 21:49:45.930 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:45.930 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:45.932 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.09ms)
2025-08-16 21:49:45.932 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.09ms)
2025-08-16 21:49:49.928 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:49.928 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:49.930 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:49:49.930 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:49:53.922 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:53.922 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:53.924 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.72ms)
2025-08-16 21:49:53.924 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.72ms)
2025-08-16 21:49:57.923 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:57.923 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:49:57.924 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.01ms)
2025-08-16 21:49:57.924 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.01ms)
2025-08-16 21:50:01.934 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:01.934 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:01.936 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:50:01.936 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:50:05.930 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:05.930 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:05.931 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.02ms)
2025-08-16 21:50:05.931 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.02ms)
2025-08-16 21:50:09.930 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:09.930 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:09.932 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.63ms)
2025-08-16 21:50:09.932 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.63ms)
2025-08-16 21:50:13.931 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:13.931 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:13.933 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.03ms)
2025-08-16 21:50:13.933 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.03ms)
2025-08-16 21:50:17.930 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:17.930 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:17.932 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.02ms)
2025-08-16 21:50:17.932 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.02ms)
2025-08-16 21:50:21.926 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:21.926 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:21.927 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.5ms)
2025-08-16 21:50:21.927 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.5ms)
2025-08-16 21:50:24.975 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:24.975 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:24.976 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.0ms)
2025-08-16 21:50:24.976 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.0ms)
2025-08-16 21:50:29.227 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:29.227 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:29.229 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:50:29.229 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:50:32.242 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:32.242 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:32.249 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (6.31ms)
2025-08-16 21:50:32.249 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (6.31ms)
2025-08-16 21:50:35.274 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:35.274 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:35.276 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.01ms)
2025-08-16 21:50:35.276 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.01ms)
2025-08-16 21:50:38.924 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:38.924 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:38.926 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.61ms)
2025-08-16 21:50:38.926 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.61ms)
2025-08-16 21:50:42.926 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:42.926 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:42.928 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.02ms)
2025-08-16 21:50:42.928 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.02ms)
2025-08-16 21:50:46.922 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:46.922 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:46.923 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.02ms)
2025-08-16 21:50:46.923 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.02ms)
2025-08-16 21:50:50.933 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:50.933 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:50.934 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.56ms)
2025-08-16 21:50:50.934 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.56ms)
2025-08-16 21:50:54.927 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:54.927 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:54.929 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.52ms)
2025-08-16 21:50:54.929 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.52ms)
2025-08-16 21:50:58.724 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:58.724 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:50:58.726 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.01ms)
2025-08-16 21:50:58.726 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.01ms)
2025-08-16 21:51:01.744 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:01.744 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:01.746 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.02ms)
2025-08-16 21:51:01.746 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.02ms)
2025-08-16 21:51:04.763 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:04.763 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:04.767 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (4.16ms)
2025-08-16 21:51:04.767 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (4.16ms)
2025-08-16 21:51:07.779 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:07.779 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:07.783 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (4.06ms)
2025-08-16 21:51:07.783 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (4.06ms)
2025-08-16 21:51:10.793 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:10.793 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:10.794 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.01ms)
2025-08-16 21:51:10.794 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.01ms)
2025-08-16 21:51:14.239 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:14.239 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:14.241 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.01ms)
2025-08-16 21:51:14.241 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.01ms)
2025-08-16 21:51:17.926 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:17.926 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:17.930 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.34ms)
2025-08-16 21:51:17.930 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.34ms)
2025-08-16 21:51:21.923 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:21.923 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:21.925 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.01ms)
2025-08-16 21:51:21.925 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.01ms)
2025-08-16 21:51:25.931 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:25.931 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:25.933 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.01ms)
2025-08-16 21:51:25.933 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.01ms)
2025-08-16 21:51:30.456 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:30.456 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:30.459 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.0ms)
2025-08-16 21:51:30.459 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.0ms)
2025-08-16 21:51:33.926 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:33.926 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:33.927 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.01ms)
2025-08-16 21:51:33.927 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.01ms)
2025-08-16 21:51:37.925 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:37.925 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:37.926 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.0ms)
2025-08-16 21:51:37.926 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.0ms)
2025-08-16 21:51:41.926 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:41.926 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:41.927 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.0ms)
2025-08-16 21:51:41.927 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.0ms)
2025-08-16 21:51:45.930 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:45.930 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:45.933 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.07ms)
2025-08-16 21:51:45.933 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.07ms)
2025-08-16 21:51:50.239 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:50.239 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:50.240 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.0ms)
2025-08-16 21:51:50.240 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.0ms)
2025-08-16 21:51:53.930 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:53.930 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:53.932 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.51ms)
2025-08-16 21:51:53.932 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.51ms)
2025-08-16 21:51:58.350 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:58.350 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:51:58.353 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.01ms)
2025-08-16 21:51:58.353 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.01ms)
2025-08-16 21:52:01.959 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:01.959 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:01.987 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (27.7ms)
2025-08-16 21:52:01.987 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (27.7ms)
2025-08-16 21:52:05.926 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:05.926 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:05.928 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.61ms)
2025-08-16 21:52:05.928 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.61ms)
2025-08-16 21:52:10.243 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:10.243 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:10.244 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.52ms)
2025-08-16 21:52:10.244 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.52ms)
2025-08-16 21:52:13.934 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:13.934 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:13.936 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.63ms)
2025-08-16 21:52:13.936 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.63ms)
2025-08-16 21:52:18.230 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:18.230 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:18.231 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.0ms)
2025-08-16 21:52:18.231 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.0ms)
2025-08-16 21:52:21.926 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:21.926 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:21.928 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.84ms)
2025-08-16 21:52:21.928 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.84ms)
2025-08-16 21:52:25.928 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:25.928 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:25.929 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:52:25.929 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.0ms)
2025-08-16 21:52:30.239 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:30.239 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:30.240 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.0ms)
2025-08-16 21:52:30.240 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.0ms)
2025-08-16 21:52:34.152 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:34.152 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:34.154 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.53ms)
2025-08-16 21:52:34.154 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.53ms)
2025-08-16 21:52:38.233 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:38.233 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:38.235 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.08ms)
2025-08-16 21:52:38.235 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.08ms)
2025-08-16 21:52:41.930 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:41.930 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:41.933 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.05ms)
2025-08-16 21:52:41.933 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.05ms)
2025-08-16 21:52:45.927 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:45.927 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:45.928 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.06ms)
2025-08-16 21:52:45.928 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.06ms)
2025-08-16 21:52:49.644 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:49.644 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:49.645 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (0.75ms)
2025-08-16 21:52:49.645 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (0.75ms)
2025-08-16 21:52:52.658 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:52.658 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:52.659 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.73ms)
2025-08-16 21:52:52.659 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (1.73ms)
2025-08-16 21:52:55.676 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:55.676 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:55.679 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.03ms)
2025-08-16 21:52:55.679 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.03ms)
2025-08-16 21:52:59.002 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:59.002 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:52:59.004 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.03ms)
2025-08-16 21:52:59.004 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (2.03ms)
2025-08-16 21:53:02.015 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:53:02.015 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:53:02.018 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.0ms)
2025-08-16 21:53:02.018 | INFO     | src.main:log_requests:54 - GET /rag/status → 422 (3.0ms)
2025-08-16 21:53:06.147 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 21:53:06.147 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 21:54:48.692 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 21:55:06.658 | INFO     | src.main:<module>:20 - Server started
2025-08-16 21:55:06.658 | INFO     | src.main:<module>:20 - Server started
2025-08-16 21:55:06.683 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 21:55:06.683 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 21:55:13.353 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 21:55:13.353 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 21:55:13.541 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:55:13.541 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:55:46.217 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:55:46.217 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:55:49.537 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:55:49.537 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:58:00.184 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 21:58:00.184 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 21:58:18.670 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 21:58:35.481 | INFO     | src.main:<module>:20 - Server started
2025-08-16 21:58:35.481 | INFO     | src.main:<module>:20 - Server started
2025-08-16 21:58:35.510 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 21:58:35.510 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 21:58:41.526 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 21:58:41.526 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 21:58:51.482 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:58:51.482 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:58:53.257 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 21:58:53.257 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 21:58:53.258 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.09ms)
2025-08-16 21:58:53.258 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.09ms)
2025-08-16 21:58:53.495 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:58:53.495 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:58:53.570 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 21:58:53.570 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 21:58:55.936 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2366.5ms)
2025-08-16 21:58:55.936 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2366.5ms)
2025-08-16 21:58:57.066 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 21:58:57.066 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:10:51.532 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 22:10:51.532 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 22:11:14.486 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 22:11:32.334 | INFO     | src.main:<module>:20 - Server started
2025-08-16 22:11:32.334 | INFO     | src.main:<module>:20 - Server started
2025-08-16 22:11:32.367 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 22:11:32.367 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 22:11:38.766 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 22:11:38.766 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 22:17:56.064 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 22:17:56.064 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 22:18:11.219 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 22:18:26.569 | INFO     | src.main:<module>:20 - Server started
2025-08-16 22:18:26.569 | INFO     | src.main:<module>:20 - Server started
2025-08-16 22:18:26.601 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 22:18:26.601 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 22:18:33.081 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 22:18:33.081 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 22:18:47.101 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 22:19:01.421 | INFO     | src.main:<module>:20 - Server started
2025-08-16 22:19:01.421 | INFO     | src.main:<module>:20 - Server started
2025-08-16 22:19:01.437 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 22:19:01.437 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 22:19:07.540 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 22:19:07.540 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 22:19:30.771 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 22:19:30.771 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 22:19:44.036 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 22:20:00.584 | INFO     | src.main:<module>:20 - Server started
2025-08-16 22:20:00.584 | INFO     | src.main:<module>:20 - Server started
2025-08-16 22:20:00.616 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 22:20:00.616 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 22:20:06.835 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 22:20:06.835 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 22:20:21.171 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 22:20:35.563 | INFO     | src.main:<module>:20 - Server started
2025-08-16 22:20:35.563 | INFO     | src.main:<module>:20 - Server started
2025-08-16 22:20:35.576 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 22:20:35.576 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 22:20:41.458 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 22:20:41.458 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 22:20:52.547 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 22:20:52.547 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 22:20:52.548 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.01ms)
2025-08-16 22:20:52.548 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.01ms)
2025-08-16 22:20:52.866 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 22:20:52.866 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 22:20:55.226 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2360.62ms)
2025-08-16 22:20:55.226 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2360.62ms)
2025-08-16 22:21:08.703 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 22:21:08.703 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 22:21:08.729 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (26.05ms)
2025-08-16 22:21:08.729 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (26.05ms)
2025-08-16 22:21:08.745 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 22:21:08.745 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 22:21:08.759 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (14.0ms)
2025-08-16 22:21:08.759 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (14.0ms)
2025-08-16 22:22:44.913 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 22:22:44.913 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 22:22:44.914 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (1.01ms)
2025-08-16 22:22:44.914 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (1.01ms)
2025-08-16 22:22:45.235 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 22:22:45.235 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 22:22:46.822 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1586.23ms)
2025-08-16 22:22:46.822 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1586.23ms)
2025-08-16 22:23:45.283 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 22:23:45.283 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 22:23:59.924 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 22:24:14.330 | INFO     | src.main:<module>:20 - Server started
2025-08-16 22:24:14.330 | INFO     | src.main:<module>:20 - Server started
2025-08-16 22:24:14.350 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 22:24:14.350 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 22:24:20.469 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 22:24:20.469 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 22:24:46.016 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:24:46.016 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:24:46.036 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 22:24:46.036 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 22:24:47.029 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:24:47.029 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:24:47.342 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (1306.24ms)
2025-08-16 22:24:47.342 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (1306.24ms)
2025-08-16 22:24:49.348 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:24:49.348 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:25:17.329 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:25:17.329 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:26:02.962 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:26:02.962 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:29:18.735 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 22:29:18.735 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 22:29:34.719 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 22:29:50.103 | INFO     | src.main:<module>:20 - Server started
2025-08-16 22:29:50.103 | INFO     | src.main:<module>:20 - Server started
2025-08-16 22:29:50.127 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 22:29:50.127 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 22:29:56.643 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 22:29:56.643 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 22:30:11.476 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:30:11.476 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:30:12.742 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (1266.54ms)
2025-08-16 22:30:12.742 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (1266.54ms)
2025-08-16 22:30:13.355 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 22:30:13.355 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 22:30:15.472 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:30:15.472 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:30:15.723 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2367.16ms)
2025-08-16 22:30:15.723 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2367.16ms)
2025-08-16 22:30:15.736 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (263.66ms)
2025-08-16 22:30:15.736 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (263.66ms)
2025-08-16 22:30:16.531 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:30:16.531 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:30:16.793 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (261.79ms)
2025-08-16 22:30:16.793 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (261.79ms)
2025-08-16 22:30:45.444 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/a947e4c3-5578-48e0-b1a7-6eb6d3c95900
2025-08-16 22:30:45.444 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/a947e4c3-5578-48e0-b1a7-6eb6d3c95900
2025-08-16 22:30:45.460 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/a947e4c3-5578-48e0-b1a7-6eb6d3c95900 → 200 (15.81ms)
2025-08-16 22:30:45.460 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/a947e4c3-5578-48e0-b1a7-6eb6d3c95900 → 200 (15.81ms)
2025-08-16 22:30:45.472 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/a947e4c3-5578-48e0-b1a7-6eb6d3c95900
2025-08-16 22:30:45.472 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/a947e4c3-5578-48e0-b1a7-6eb6d3c95900
2025-08-16 22:30:45.474 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/a947e4c3-5578-48e0-b1a7-6eb6d3c95900 → 200 (2.21ms)
2025-08-16 22:30:45.474 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/a947e4c3-5578-48e0-b1a7-6eb6d3c95900 → 200 (2.21ms)
2025-08-16 22:30:45.779 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/a947e4c3-5578-48e0-b1a7-6eb6d3c95900
2025-08-16 22:30:45.779 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/a947e4c3-5578-48e0-b1a7-6eb6d3c95900
2025-08-16 22:30:46.514 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 22:30:46.514 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 22:30:46.877 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/a947e4c3-5578-48e0-b1a7-6eb6d3c95900
2025-08-16 22:30:46.877 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/a947e4c3-5578-48e0-b1a7-6eb6d3c95900
2025-08-16 22:30:47.586 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 22:30:47.586 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 22:30:48.261 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/a947e4c3-5578-48e0-b1a7-6eb6d3c95900
2025-08-16 22:30:48.261 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/a947e4c3-5578-48e0-b1a7-6eb6d3c95900
2025-08-16 22:30:48.982 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 22:30:48.982 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 22:30:49.282 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/a947e4c3-5578-48e0-b1a7-6eb6d3c95900
2025-08-16 22:30:49.282 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/a947e4c3-5578-48e0-b1a7-6eb6d3c95900
2025-08-16 22:30:49.990 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 22:30:49.990 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 22:31:08.009 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-16 22:31:08.009 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-16 22:31:09.583 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-16 22:31:09.583 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-16 22:31:09.586 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (1576.65ms)
2025-08-16 22:31:09.586 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (1576.65ms)
2025-08-16 22:31:09.957 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 22:31:09.957 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 22:31:09.958 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.0ms)
2025-08-16 22:31:09.958 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.0ms)
2025-08-16 22:31:09.960 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 22:31:09.960 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 22:31:12.114 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2153.78ms)
2025-08-16 22:31:12.114 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2153.78ms)
2025-08-16 22:31:12.681 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 22:31:12.681 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 22:31:14.129 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1448.75ms)
2025-08-16 22:31:14.129 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1448.75ms)
2025-08-16 22:31:14.137 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 22:31:14.137 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 22:31:15.338 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1201.29ms)
2025-08-16 22:31:15.338 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1201.29ms)
2025-08-16 22:31:24.348 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 22:31:24.348 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 22:31:24.349 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.0ms)
2025-08-16 22:31:24.349 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.0ms)
2025-08-16 22:31:24.656 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 22:31:24.656 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 22:31:25.182 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (526.14ms)
2025-08-16 22:31:25.182 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (526.14ms)
2025-08-16 22:31:25.582 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:31:25.582 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:31:25.844 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (262.66ms)
2025-08-16 22:31:25.844 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (262.66ms)
2025-08-16 22:31:27.855 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:31:27.855 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:31:28.115 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (260.22ms)
2025-08-16 22:31:28.115 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (260.22ms)
2025-08-16 22:31:30.132 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:31:30.132 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:31:30.397 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (265.15ms)
2025-08-16 22:31:30.397 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (265.15ms)
2025-08-16 22:31:32.412 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:31:32.412 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:31:32.674 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (262.36ms)
2025-08-16 22:31:32.674 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (262.36ms)
2025-08-16 22:31:34.688 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:31:34.688 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:31:34.955 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (267.8ms)
2025-08-16 22:31:34.955 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (267.8ms)
2025-08-16 22:31:36.963 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:31:36.963 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:31:37.222 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (258.87ms)
2025-08-16 22:31:37.222 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (258.87ms)
2025-08-16 22:31:39.238 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:31:39.238 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:31:39.497 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (258.93ms)
2025-08-16 22:31:39.497 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (258.93ms)
2025-08-16 22:31:41.506 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:31:41.506 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:31:41.769 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (262.98ms)
2025-08-16 22:31:41.769 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (262.98ms)
2025-08-16 22:31:50.213 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:31:50.213 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:31:50.474 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (261.7ms)
2025-08-16 22:31:50.474 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (261.7ms)
2025-08-16 22:31:52.488 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:31:52.488 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:31:52.769 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (281.36ms)
2025-08-16 22:31:52.769 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (281.36ms)
2025-08-16 22:32:10.908 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:10.908 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:11.178 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (269.82ms)
2025-08-16 22:32:11.178 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (269.82ms)
2025-08-16 22:32:13.192 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:13.192 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:13.452 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (258.32ms)
2025-08-16 22:32:13.452 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (258.32ms)
2025-08-16 22:32:15.466 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:15.466 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:15.770 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (304.03ms)
2025-08-16 22:32:15.770 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (304.03ms)
2025-08-16 22:32:17.785 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:17.785 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:18.048 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (263.52ms)
2025-08-16 22:32:18.048 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (263.52ms)
2025-08-16 22:32:20.066 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:20.066 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:20.327 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (260.32ms)
2025-08-16 22:32:20.327 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (260.32ms)
2025-08-16 22:32:22.345 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:22.345 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:22.609 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (264.14ms)
2025-08-16 22:32:22.609 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (264.14ms)
2025-08-16 22:32:25.023 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:25.023 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:25.288 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (265.63ms)
2025-08-16 22:32:25.288 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (265.63ms)
2025-08-16 22:32:27.615 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:27.615 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:27.877 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (261.79ms)
2025-08-16 22:32:27.877 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (261.79ms)
2025-08-16 22:32:42.844 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:42.844 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:43.101 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (257.06ms)
2025-08-16 22:32:43.101 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (257.06ms)
2025-08-16 22:32:45.111 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:45.111 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:45.381 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (270.04ms)
2025-08-16 22:32:45.381 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (270.04ms)
2025-08-16 22:32:47.393 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:47.393 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:47.655 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (262.54ms)
2025-08-16 22:32:47.655 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (262.54ms)
2025-08-16 22:32:49.670 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:49.670 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:49.934 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (263.85ms)
2025-08-16 22:32:49.934 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (263.85ms)
2025-08-16 22:32:51.945 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:51.945 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:52.206 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (260.72ms)
2025-08-16 22:32:52.206 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (260.72ms)
2025-08-16 22:32:54.221 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:54.221 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:54.478 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (257.3ms)
2025-08-16 22:32:54.478 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (257.3ms)
2025-08-16 22:32:56.821 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:56.821 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:57.080 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (259.03ms)
2025-08-16 22:32:57.080 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (259.03ms)
2025-08-16 22:32:59.236 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:59.236 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:32:59.514 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (277.91ms)
2025-08-16 22:32:59.514 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (277.91ms)
2025-08-16 22:32:59.537 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 22:32:59.537 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 22:33:01.649 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:33:01.649 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:33:01.911 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (261.99ms)
2025-08-16 22:33:01.911 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (261.99ms)
2025-08-16 22:33:01.922 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2385.01ms)
2025-08-16 22:33:01.922 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2385.01ms)
2025-08-16 22:33:02.828 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:33:02.828 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:33:03.086 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (258.01ms)
2025-08-16 22:33:03.086 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (258.01ms)
2025-08-16 22:33:08.903 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-16 22:33:08.903 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-16 22:33:08.904 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (1.0ms)
2025-08-16 22:33:08.904 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (1.0ms)
2025-08-16 22:33:09.211 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-16 22:33:09.211 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-16 22:33:10.431 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1219.43ms)
2025-08-16 22:33:10.431 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1219.43ms)
2025-08-16 22:33:11.175 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-16 22:33:11.175 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-16 22:33:11.176 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (1.0ms)
2025-08-16 22:33:11.176 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (1.0ms)
2025-08-16 22:33:11.179 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-16 22:33:11.179 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-16 22:33:12.394 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1214.22ms)
2025-08-16 22:33:12.394 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1214.22ms)
2025-08-16 22:34:48.853 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 22:34:48.853 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 22:34:48.854 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 22:34:48.854 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 22:34:48.856 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (3.01ms)
2025-08-16 22:34:48.856 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (3.01ms)
2025-08-16 22:34:48.858 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (4.01ms)
2025-08-16 22:34:48.858 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (4.01ms)
2025-08-16 22:34:49.165 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 22:34:49.165 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 22:34:50.581 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1415.91ms)
2025-08-16 22:34:50.581 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1415.91ms)
2025-08-16 22:34:50.587 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 22:34:50.587 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 22:34:51.776 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1189.83ms)
2025-08-16 22:34:51.776 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1189.83ms)
2025-08-16 22:35:19.969 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 22:35:19.969 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 22:35:20.503 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (534.46ms)
2025-08-16 22:35:20.503 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (534.46ms)
2025-08-16 22:35:20.536 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:35:20.536 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:35:20.794 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (257.61ms)
2025-08-16 22:35:20.794 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (257.61ms)
2025-08-16 22:35:22.806 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:35:22.806 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:35:23.068 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (261.99ms)
2025-08-16 22:35:23.068 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (261.99ms)
2025-08-16 22:35:25.093 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:35:25.093 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:35:25.355 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (262.23ms)
2025-08-16 22:35:25.355 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (262.23ms)
2025-08-16 22:35:27.362 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:35:27.362 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:35:27.619 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (257.17ms)
2025-08-16 22:35:27.619 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (257.17ms)
2025-08-16 22:35:29.638 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:35:29.638 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:35:29.898 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (259.77ms)
2025-08-16 22:35:29.898 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (259.77ms)
2025-08-16 22:36:01.921 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:36:01.921 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:36:02.538 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (616.95ms)
2025-08-16 22:36:02.538 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (616.95ms)
2025-08-16 22:36:04.557 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:36:04.557 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:36:04.863 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (305.72ms)
2025-08-16 22:36:04.863 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (305.72ms)
2025-08-16 22:36:06.873 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:36:06.873 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:36:07.138 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (264.48ms)
2025-08-16 22:36:07.138 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (264.48ms)
2025-08-16 22:36:15.153 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:36:15.153 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:36:15.434 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (281.71ms)
2025-08-16 22:36:15.434 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (281.71ms)
2025-08-16 22:36:17.490 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:36:17.490 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-16 22:36:17.763 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (273.18ms)
2025-08-16 22:36:17.763 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (273.18ms)
2025-08-16 22:45:35.793 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 22:45:35.793 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-16 22:45:55.612 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 22:46:28.588 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 22:46:47.135 | INFO     | src.main:<module>:20 - Server started
2025-08-16 22:46:47.135 | INFO     | src.main:<module>:20 - Server started
2025-08-16 22:46:47.172 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 22:46:47.172 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 22:46:53.560 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 22:46:53.560 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 23:05:58.805 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 23:05:58.805 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 23:05:58.806 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 23:05:58.806 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 23:05:58.807 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (1.89ms)
2025-08-16 23:05:58.807 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (1.89ms)
2025-08-16 23:05:58.809 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.8ms)
2025-08-16 23:05:58.809 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.8ms)
2025-08-16 23:43:04.801 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 23:43:22.122 | INFO     | src.main:<module>:20 - Server started
2025-08-16 23:43:22.122 | INFO     | src.main:<module>:20 - Server started
2025-08-16 23:43:22.138 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 23:43:22.138 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 23:43:28.930 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 23:43:28.930 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 23:43:54.818 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 23:43:54.818 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 23:43:54.829 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (15.5ms)
2025-08-16 23:43:54.829 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (15.5ms)
2025-08-16 23:43:55.145 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 23:43:55.145 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 23:43:59.356 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (4210.84ms)
2025-08-16 23:43:59.356 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (4210.84ms)
2025-08-16 23:45:16.413 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 23:45:16.413 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 23:45:16.414 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.0ms)
2025-08-16 23:45:16.414 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.0ms)
2025-08-16 23:45:16.737 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 23:45:16.737 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 23:48:00.901 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 23:48:36.779 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-16 23:48:53.676 | INFO     | src.main:<module>:20 - Server started
2025-08-16 23:48:53.676 | INFO     | src.main:<module>:20 - Server started
2025-08-16 23:48:53.694 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 23:48:53.694 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-16 23:48:59.969 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 23:48:59.969 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-16 23:49:15.745 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 23:49:15.745 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 23:49:15.747 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 23:49:15.747 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-16 23:49:15.748 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (3.55ms)
2025-08-16 23:49:15.748 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (3.55ms)
2025-08-16 23:49:15.750 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.56ms)
2025-08-16 23:49:15.750 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.56ms)
2025-08-16 23:49:16.056 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 23:49:16.056 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 23:49:16.075 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 401 (18.65ms)
2025-08-16 23:49:16.075 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 401 (18.65ms)
2025-08-16 23:49:16.078 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 23:49:16.078 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 23:49:16.081 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 401 (2.68ms)
2025-08-16 23:49:16.081 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 401 (2.68ms)
2025-08-16 23:49:27.426 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-16 23:49:27.426 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-16 23:49:29.189 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-16 23:49:29.189 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-16 23:49:29.192 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (1765.59ms)
2025-08-16 23:49:29.192 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (1765.59ms)
2025-08-16 23:49:29.225 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 23:49:29.225 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-16 23:49:29.225 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (0.0ms)
2025-08-16 23:49:29.225 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (0.0ms)
2025-08-16 23:49:29.228 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 23:49:29.228 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 23:49:31.624 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2396.05ms)
2025-08-16 23:49:31.624 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2396.05ms)
2025-08-16 23:49:32.144 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 23:49:32.144 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 23:49:33.773 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1629.63ms)
2025-08-16 23:49:33.773 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1629.63ms)
2025-08-16 23:49:33.776 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 23:49:33.776 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 23:49:35.139 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1362.05ms)
2025-08-16 23:49:35.139 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1362.05ms)
2025-08-16 23:49:45.345 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-16 23:49:45.345 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-16 23:49:45.346 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (1.0ms)
2025-08-16 23:49:45.346 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (1.0ms)
2025-08-16 23:49:45.651 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-16 23:49:45.651 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-16 23:49:46.972 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1320.36ms)
2025-08-16 23:49:46.972 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1320.36ms)
2025-08-16 23:49:48.279 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-16 23:49:48.279 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-16 23:49:48.279 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (0.0ms)
2025-08-16 23:49:48.279 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (0.0ms)
2025-08-16 23:49:48.282 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-16 23:49:48.282 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-16 23:49:49.578 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1295.67ms)
2025-08-16 23:49:49.578 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1295.67ms)
2025-08-16 23:50:16.239 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 23:50:16.239 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-16 23:50:16.241 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.33ms)
2025-08-16 23:50:16.241 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.33ms)
2025-08-16 23:50:16.547 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 23:50:16.547 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-16 23:51:46.885 | INFO     | src.main:log_requests:54 - POST /rag/git → 200 (90338.08ms)
2025-08-16 23:51:46.885 | INFO     | src.main:log_requests:54 - POST /rag/git → 200 (90338.08ms)
2025-08-16 23:52:09.289 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 23:52:09.289 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-16 23:52:09.290 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (0.89ms)
2025-08-16 23:52:09.290 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (0.89ms)
2025-08-16 23:52:09.298 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 23:52:09.298 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 23:52:10.581 | INFO     | src.router.messages:message_stream:119 - Received files in backend:[]
2025-08-16 23:52:10.581 | INFO     | src.router.messages:message_stream:119 - Received files in backend:[]
2025-08-16 23:52:10.584 | INFO     | src.router.messages:message_stream:152 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 23:52:10.584 | INFO     | src.router.messages:message_stream:152 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 23:52:13.656 | INFO     | src.router.messages:message_stream:179 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 23:52:13.656 | INFO     | src.router.messages:message_stream:179 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 23:52:15.744 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (6445.33ms)
2025-08-16 23:52:15.744 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (6445.33ms)
2025-08-16 23:52:28.313 | INFO     | src.router.messages:streamresponse:59 - Sending Source nodes : Node ID: 50ea522c-6ed8-42e0-ae61-40cda6add599
Text: import type {AlgoProps} from "@/components/AlgoCard.tsx"; import
sortingLogo from "@/assets/sorting.png"; import dpLogo from
"@/assets/dp.png"; import queueLogo from "@/assets/queue.png"; import
graphLogo from "@/assets/graph.png"; import treeLogo from
"@/assets/tree.png"; import heapLogo from "@/assets/heap.png";
export const algos: AlgoProps...
Score:  0.001

2025-08-16 23:52:28.313 | INFO     | src.router.messages:streamresponse:59 - Sending Source nodes : Node ID: 50ea522c-6ed8-42e0-ae61-40cda6add599
Text: import type {AlgoProps} from "@/components/AlgoCard.tsx"; import
sortingLogo from "@/assets/sorting.png"; import dpLogo from
"@/assets/dp.png"; import queueLogo from "@/assets/queue.png"; import
graphLogo from "@/assets/graph.png"; import treeLogo from
"@/assets/tree.png"; import heapLogo from "@/assets/heap.png";
export const algos: AlgoProps...
Score:  0.001

2025-08-16 23:52:28.315 | INFO     | src.router.messages:streamresponse:60 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 23:52:28.315 | INFO     | src.router.messages:streamresponse:60 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 23:52:31.519 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/82b9f273-fe23-4043-b5de-590b2232dd1c/title
2025-08-16 23:52:31.519 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/82b9f273-fe23-4043-b5de-590b2232dd1c/title
2025-08-16 23:52:31.520 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/82b9f273-fe23-4043-b5de-590b2232dd1c/title → 200 (1.11ms)
2025-08-16 23:52:31.520 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/82b9f273-fe23-4043-b5de-590b2232dd1c/title → 200 (1.11ms)
2025-08-16 23:52:31.833 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/82b9f273-fe23-4043-b5de-590b2232dd1c/title
2025-08-16 23:52:31.833 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/82b9f273-fe23-4043-b5de-590b2232dd1c/title
2025-08-16 23:52:35.275 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 82b9f273-fe23-4043-b5de-590b2232dd1c: Learning from Codebase
2025-08-16 23:52:35.275 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 82b9f273-fe23-4043-b5de-590b2232dd1c: Learning from Codebase
2025-08-16 23:52:35.528 | INFO     | src.main:log_requests:54 - PATCH /sessions/82b9f273-fe23-4043-b5de-590b2232dd1c/title → 200 (3694.71ms)
2025-08-16 23:52:35.528 | INFO     | src.main:log_requests:54 - PATCH /sessions/82b9f273-fe23-4043-b5de-590b2232dd1c/title → 200 (3694.71ms)
2025-08-16 23:52:56.526 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 23:52:56.526 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 23:52:57.758 | INFO     | src.router.messages:message_stream:119 - Received files in backend:[]
2025-08-16 23:52:57.758 | INFO     | src.router.messages:message_stream:119 - Received files in backend:[]
2025-08-16 23:52:57.759 | INFO     | src.router.messages:message_stream:152 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 23:52:57.759 | INFO     | src.router.messages:message_stream:152 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 23:52:59.464 | INFO     | src.router.messages:message_stream:179 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 23:52:59.464 | INFO     | src.router.messages:message_stream:179 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 23:52:59.716 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3189.32ms)
2025-08-16 23:52:59.716 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3189.32ms)
2025-08-16 23:53:13.110 | INFO     | src.router.messages:streamresponse:59 - Sending Source nodes : Node ID: 4a0fbf2f-ace4-4dc1-9673-b51b2086f0d7
Text:
Score:  0.000

2025-08-16 23:53:13.110 | INFO     | src.router.messages:streamresponse:59 - Sending Source nodes : Node ID: 4a0fbf2f-ace4-4dc1-9673-b51b2086f0d7
Text:
Score:  0.000

2025-08-16 23:53:13.110 | INFO     | src.router.messages:streamresponse:60 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 23:53:13.110 | INFO     | src.router.messages:streamresponse:60 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-16 23:53:56.194 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 23:53:56.194 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 23:53:59.140 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2945.96ms)
2025-08-16 23:53:59.140 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2945.96ms)
2025-08-16 23:53:59.147 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 23:53:59.147 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-16 23:54:00.362 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1215.58ms)
2025-08-16 23:54:00.362 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1215.58ms)
2025-08-16 23:54:34.056 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 23:54:34.056 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-16 23:54:34.058 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (2.47ms)
2025-08-16 23:54:34.058 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (2.47ms)
2025-08-16 23:54:34.097 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 23:54:34.097 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 23:54:49.389 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (15292.44ms)
2025-08-16 23:54:49.389 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (15292.44ms)
2025-08-16 23:54:49.906 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 23:54:49.906 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 23:54:51.351 | INFO     | src.router.messages:message_stream:119 - Received files in backend:['DineshThummaResume.pdf']
2025-08-16 23:54:51.351 | INFO     | src.router.messages:message_stream:119 - Received files in backend:['DineshThummaResume.pdf']
2025-08-16 23:54:51.352 | INFO     | src.router.messages:message_stream:152 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 23:54:51.352 | INFO     | src.router.messages:message_stream:152 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 23:54:52.259 | INFO     | src.router.messages:message_stream:179 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 23:54:52.259 | INFO     | src.router.messages:message_stream:179 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 23:54:52.520 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2613.25ms)
2025-08-16 23:54:52.520 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2613.25ms)
2025-08-16 23:55:05.361 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 23:55:05.361 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 23:55:08.057 | INFO     | src.router.messages:message_stream:119 - Received files in backend:[]
2025-08-16 23:55:08.057 | INFO     | src.router.messages:message_stream:119 - Received files in backend:[]
2025-08-16 23:55:08.058 | INFO     | src.router.messages:message_stream:152 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 23:55:08.058 | INFO     | src.router.messages:message_stream:152 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-16 23:55:09.522 | INFO     | src.router.messages:message_stream:179 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 23:55:09.522 | INFO     | src.router.messages:message_stream:179 - Advanced RAG pipeline rebuilt successfully.
2025-08-16 23:55:09.766 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4404.82ms)
2025-08-16 23:55:09.766 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4404.82ms)
2025-08-16 23:55:20.378 | INFO     | src.router.messages:streamresponse:59 - Sending Source nodes : Node ID: ba40a0df-b07f-4887-b22e-4a715dfbd6a4
Text: ●  Enabled  PDF-based  RAG  for  contextual  responses  from
uploaded  documents.  ●  Developed  GitHub  integration  for  RAG
operations  using  specified  repository  files.  ●  Engineered  a
robust  session  management  system  with  Redis  caching  and
PostgreSQL  for  persistent  storage,   ensuring   efficient   context
management.  ...
Score:  0.000

2025-08-16 23:55:20.378 | INFO     | src.router.messages:streamresponse:59 - Sending Source nodes : Node ID: ba40a0df-b07f-4887-b22e-4a715dfbd6a4
Text: ●  Enabled  PDF-based  RAG  for  contextual  responses  from
uploaded  documents.  ●  Developed  GitHub  integration  for  RAG
operations  using  specified  repository  files.  ●  Engineered  a
robust  session  management  system  with  Redis  caching  and
PostgreSQL  for  persistent  storage,   ensuring   efficient   context
management.  ...
Score:  0.000

2025-08-16 23:55:20.380 | INFO     | src.router.messages:streamresponse:60 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-16 23:55:20.380 | INFO     | src.router.messages:streamresponse:60 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-16 23:55:25.648 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 23:55:25.648 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 23:55:27.804 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2155.67ms)
2025-08-16 23:55:27.804 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2155.67ms)
2025-08-16 23:55:31.506 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/82b9f273-fe23-4043-b5de-590b2232dd1c
2025-08-16 23:55:31.506 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/82b9f273-fe23-4043-b5de-590b2232dd1c
2025-08-16 23:55:31.507 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/82b9f273-fe23-4043-b5de-590b2232dd1c → 200 (0.52ms)
2025-08-16 23:55:31.507 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/82b9f273-fe23-4043-b5de-590b2232dd1c → 200 (0.52ms)
2025-08-16 23:55:31.512 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/82b9f273-fe23-4043-b5de-590b2232dd1c
2025-08-16 23:55:31.512 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/82b9f273-fe23-4043-b5de-590b2232dd1c
2025-08-16 23:55:32.494 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, timestamp=datetime.datetime(2025, 8, 16, 23, 52, 28, 317765), message_id=UUID('53c6f46d-e92f-4c27-9a30-058c2b442d90'), session_id=UUID('82b9f273-fe23-4043-b5de-590b2232dd1c'), content='What did you learn from codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, timestamp=datetime.datetime(2025, 8, 16, 23, 52, 30, 216479), message_id=UUID('af80d54e-5375-4055-abaf-05ec28d7954a'), session_id=UUID('82b9f273-fe23-4043-b5de-590b2232dd1c'), content='From the two snippets I was able to piece together a few key ideas about how this project is structured and what its goals are.\n\n**1. A data‑driven UI for algorithm visualisations**\n\n- The `algosInfo.ts` file exports an array called `algos` that contains objects with three properties:  \n  - `algoName` – a human‑readable title such as “Sorting Algorithms” or “Dynamic Programming”.  \n  - `algoDesc` – a short paragraph that explains what the user will see when they click the card.  \n  - `algoImg` – an imported image that represents the category (e.g., a sorting icon, a DP icon, etc.).  \n- The objects are typed with `AlgoProps`, which is imported from `AlgoCard.tsx`. This tells me that somewhere in the UI a component called `AlgoCard` receives these props and renders a card for each algorithm category.  \n- Because the array is exported, the component can simply map over it:  \n\n  ```ts\n  algos.map((algo) => <AlgoCard key={algo.algoName} {...algo} />)\n  ```\n\n  This keeps the UI declarative and makes adding a new algorithm as easy as pushing a new object into the array.\n\n**2. A modern, CSS‑variable‑centric theme**\n\n- The `index.css` file defines a large number of custom properties (`--primary`, `--secondary`, `--accent`, etc.) using the **OKLCH** colour space.  \n- These variables are then applied globally via Tailwind’s `@apply` directive inside a `@layer base` block. For example:  \n\n  ```css\n  * { @apply border-border outline-ring/50; }\n  body { @apply bg-background text-foreground; }\n  ```\n\n  This means the project relies on Tailwind for utility classes but also extends it with its own colour palette.  \n- The use of `oklch` values suggests a focus on perceptual colour accuracy, which is great for accessibility and for ensuring that the visualisations look consistent across devices.\n\n**3. A clear separation of concerns**\n\n- Images are imported at the top of `algosInfo.ts` and then referenced in the data objects. This keeps the asset pipeline tidy and allows the build system (likely Vite or Webpack) to handle image optimisation automatically.  \n- The CSS file contains only variable definitions and base styles; component‑specific styles are probably handled elsewhere (e.g., in component‑scoped CSS or Tailwind classes). This keeps the global stylesheet lightweight.\n\n**4. Practical take‑aways**\n\n- If you want to add a new algorithm category, just add a new object to the `algos` array and import the corresponding image.  \n- To tweak the overall look of the app, adjust the `--primary`, `--secondary`, or `--accent` variables in `index.css`.  \n- The project’s use of TypeScript and Tailwind utilities means you can rely on strong typing and rapid prototyping without writing a lot of custom CSS.\n\nIn short, the codebase is a clean, data‑driven front‑end that leverages modern CSS techniques and TypeScript to deliver a set of algorithm visualisations in a maintainable way.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, timestamp=datetime.datetime(2025, 8, 16, 23, 53, 13, 112311), message_id=UUID('f4ad8f5e-0e30-4365-afc9-3da244ac6b38'), session_id=UUID('82b9f273-fe23-4043-b5de-590b2232dd1c'), content='can you give dir structure of codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, timestamp=datetime.datetime(2025, 8, 16, 23, 53, 14, 887067), message_id=UUID('a42981d0-6833-4b87-95dd-303dd0f493eb'), session_id=UUID('82b9f273-fe23-4043-b5de-590b2232dd1c'), content='Below is a **high‑level directory map** that captures the most important parts of the\u202f`algo‑ameba`\u202frepository.  \n(Only the files that you actually asked about are shown in full detail; the rest are inferred from the snippets and the typical structure of a Vite‑React‑TS project.)\n\n```\nalgo-ameba/\n├─ .github/                     # GitHub Actions / workflow files\n├─ public/                      # Static assets served by Vite\n│   ├─ favicon.ico\n│   └─ index.html\n├─ src/\n│   ├─ App.tsx                  # Root component – sets up BrowserRouter & Routes\n│   ├─ index.tsx                # Entry point – renders <App />\n│   ├─ index.css                # Tailwind base + custom CSS variables\n│   ├─ pages/\n│   │   ├─ ViusalLayout.tsx     # (likely a typo for “VisualLayout”) – layout wrapper\n│   │   ├─ Homepage.tsx         # Landing page\n│   │   ├─ BubbleSortVisualizer.tsx\n│   │   ├─ SearchVisualizer.tsx\n│   │   └─ BinarySearch.tsx\n│   ├─ components/\n│   │   ├─ AlgoCard.tsx         # Re‑usable card component for algorithm categories\n│   │   ├─ Navbar.tsx\n│   │   ├─ Footer.tsx\n│   │   └─ Layout.tsx           # Generic layout wrapper (may be the same as ViusalLayout)\n│   ├─ data/\n│   │   └─ algosInfo.ts         # Array of algorithm metadata (name, description, image)\n│   ├─ assets/\n│   │   └─ images/\n│   │       ├─ sorting.png\n│   │       ├─ search.png\n│   │       └─ binary.png\n│   ├─ hooks/\n│   │   ├─ useSort.ts\n│   │   └─ useSearch.ts\n│   ├─ utils/\n│   │   └─ helpers.ts\n│   ├─ styles/\n│   │   └─ globals.css          # Optional – additional global styles\n│   └─ types/\n│       └─ index.d.ts           # Shared TypeScript types\n├─ .eslintrc.cjs                # ESLint + TypeScript + React configs\n├─ .prettierrc.cjs              # Prettier formatting rules\n├─ tailwind.config.ts           # Tailwind + custom theme\n├─ postcss.config.ts            # PostCSS + Tailwind\n├─ vite.config.ts               # Vite build config\n├─ tsconfig.json                # Base TS config\n├─ tsconfig.app.json            # App‑specific TS config\n├─ tsconfig.node.json           # Node‑specific TS config\n├─ package.json\n└─ README.md\n```\n\n### Why this layout makes sense\n\n| Folder | Purpose |\n|--------|---------|\n| **`src/pages`** | Each route has its own component (e.g. `/sort` → `BubbleSortVisualizer`). |\n| **`src/components`** | Re‑usable UI pieces (cards, nav, footer). |\n| **`src/data`** | Static data that drives the UI – the `algosInfo.ts` file you saw. |\n| **`src/assets/images`** | All images referenced by the data file. |\n| **`src/hooks` / `src/utils`** | Custom React hooks and helper functions used by the visualisers. |\n| **`src/styles`** | Optional global styles that complement Tailwind. |\n| **`src/types`** | Shared TypeScript interfaces (e.g. `AlgoProps`). |\n\n### Quick navigation guide\n\n- **Routing** – `src/App.tsx` wires up the routes (`/`, `/sort`, `/search`, `/binary`).  \n- **Layout** – `src/pages/ViusalLayout.tsx` (or `Layout.tsx`) wraps the page content and probably includes the navbar/footer.  \n- **Algorithm cards** – `src/components/AlgoCard.tsx` consumes the objects exported from `src/data/algosInfo.ts`.  \n- **Visualisers** – Each visualiser component (`BubbleSortVisualizer`, `SearchVisualizer`, `BinarySearch`) lives in `src/pages/` and uses hooks from `src/hooks/`.  \n\nFeel free to dive into any of these folders for more details, and let me know if you’d like a deeper look at a specific file or component!', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, timestamp=datetime.datetime(2025, 8, 16, 23, 54, 54, 500087), message_id=UUID('5d762aa3-1901-44c7-87e9-212a9a664498'), session_id=UUID('82b9f273-fe23-4043-b5de-590b2232dd1c'), content='Can you review this resume for me', files=['DineshThummaResume.pdf'], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, timestamp=datetime.datetime(2025, 8, 16, 23, 54, 56, 227434), message_id=UUID('832ab460-86f6-46c1-8459-033d1785a371'), session_id=UUID('82b9f273-fe23-4043-b5de-590b2232dd1c'), content='Empty Response', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, timestamp=datetime.datetime(2025, 8, 16, 23, 55, 20, 383450), message_id=UUID('66c73fd4-263d-494c-8c6e-59a0bee7d673'), session_id=UUID('82b9f273-fe23-4043-b5de-590b2232dd1c'), content='What happend', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, timestamp=datetime.datetime(2025, 8, 16, 23, 55, 22, 331317), message_id=UUID('e4130064-f556-4bfe-a2b7-f0aa87662018'), session_id=UUID('82b9f273-fe23-4043-b5de-590b2232dd1c'), content='**Resume Review – Dinesh\u202fThumma**\n\n---\n\n### 1️⃣ Overall Impression  \nYour résumé presents a solid blend of technical expertise, hands‑on projects, and academic background. The layout is clean, and the key sections (Professional Summary, Technical Skills, Projects, Education, Certifications) are all in place. Below are some targeted suggestions that can help you stand out even more to recruiters and hiring managers.\n\n---\n\n### 2️⃣ Strengths  \n| Area | What Works Well |\n|------|-----------------|\n| **Professional Summary** | Concise, focused on AI/DS and backend systems, and clearly states your career goal. |\n| **Technical Skills** | Well‑categorized (Languages, Frameworks, Tools, Databases, LLM/GenAI, Libraries). Shows breadth and depth. |\n| **Projects** | Each project lists tech stack, key achievements, and a short demo link. “CentralGPT” and “Flaskblog” demonstrate both backend and full‑stack experience. |\n| **Certifications & Coursework** | Highlights recent certifications (Tata Group, Adobe Hackathon) and relevant coursework. |\n| **Contact Information** | Phone, email, GitHub, LeetCode, CodeChef – all useful for recruiters. |\n\n---\n\n### 3️⃣ Areas for Improvement  \n\n| Section | Issue | Suggested Fix |\n|---------|-------|---------------|\n| **Contact Header** | The header is cluttered; consider a single line with icons or a clean layout. | `Dinesh\u202fThumma • 939‑351‑9918 • dineshthumma15@gmail.com • GitHub • LeetCode • CodeChef` |\n| **Professional Summary** | Slightly repetitive wording (“specializing”, “focus on”). | Rephrase: *“Undergraduate in Artificial Intelligence & Data Science with a strong focus on backend engineering and generative AI. Eager to contribute to real‑world projects that solve complex technical challenges.”* |\n| **Technical Skills** | Mixed formatting (vertical bars, commas). | Use a table or two‑column list for readability. Example: |\n| | | **Languages** – Python, Java, TypeScript, Kotlin |\n| | | **Frameworks** – Spring Boot, Flask, FastAPI |\n| | | **Databases** – Redis, PostgreSQL, Neo4j, MongoDB, Qdrant |\n| | | **LLM/GenAI** – LlamaIndex, LangChain, Ollama |\n| | | **Tools** – Git, Docker, GitHub, VS\u202fCode, Postman, IntelliJ |\n| | | **Libraries** – Pandas, NumPy, Bootstrap, Zod, Zustand, Chakra UI, Shadcn, Axios, React |\n| **Projects** | Project descriptions are a bit terse; add impact metrics where possible. | For “CentralGPT”, mention: *“Reduced response latency by 30\u202f% through optimized Qdrant indexing.”* |\n| | | For “Flaskblog”, add: *“Scalability tested with 5,000 concurrent users on Render.”* |\n| **Education** | Missing graduation year for B.Tech. | Add expected graduation: *“B.Tech, Artificial Intelligence & Data Science – 2027 (expected)”* |\n| **Certifications** | List dates consistently. | *“Tata Group Data Analytics Job Simulation – August\u202f2025”* |\n| **Formatting** | Some line breaks are inconsistent (e.g., “ensuring efficient context management.”). | Use consistent paragraph breaks and avoid stray line breaks. |\n| **Length** | The résumé is a single page, which is good, but ensure all bullet points are concise (≤\u202f2 lines). | Trim any redundant words. |\n\n---\n\n### 4️⃣ Quick Formatting Checklist  \n\n| Item | ✅ Done | ❌ Needs Work |\n|------|--------|---------------|\n| Header with name & contact | ✅ | |\n| Professional Summary | ✅ | |\n| Technical Skills (two‑column list) | ❌ | |\n| Projects (bullet points, tech stack, impact) | ✅ | |\n| Education (degree, institution, dates) | ✅ | |\n| Certifications (date, issuer) | ✅ | |\n| Consistent bullet style (•) | ✅ | |\n| No stray line breaks | ❌ | |\n| Font size 10–11pt, single‑column layout | ✅ | |\n\n---\n\n### 5️⃣ Final Tips  \n\n1. **Quantify Achievements** – Numbers (latency reduction, user load, performance gains) make your impact tangible.  \n2. **Tailor to the Job** – If applying for a backend role, emphasize Flask/FastAPI, PostgreSQL, Redis. For AI roles, highlight LLM/GenAI tools.  \n3. **Add a Portfolio Link** – If you have a personal website or a GitHub repo with demos, include it.  \n4. **Proofread** – A quick spell‑check and grammar review will catch minor typos (“ViusalLayout” → “VisualLayout”).  \n\n---\n\n**Bottom line:** Your résumé already showcases a strong technical foundation and relevant projects. With a few formatting tweaks and a bit more quantification, it will be even more compelling to hiring managers. Good luck!', files=None, model_response_time_ms=None)]
2025-08-16 23:55:32.494 | INFO     | src.router.sessions:get_chat_history:67 - [Message(sender=<SenderRole.USER: 'user'>, timestamp=datetime.datetime(2025, 8, 16, 23, 52, 28, 317765), message_id=UUID('53c6f46d-e92f-4c27-9a30-058c2b442d90'), session_id=UUID('82b9f273-fe23-4043-b5de-590b2232dd1c'), content='What did you learn from codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, timestamp=datetime.datetime(2025, 8, 16, 23, 52, 30, 216479), message_id=UUID('af80d54e-5375-4055-abaf-05ec28d7954a'), session_id=UUID('82b9f273-fe23-4043-b5de-590b2232dd1c'), content='From the two snippets I was able to piece together a few key ideas about how this project is structured and what its goals are.\n\n**1. A data‑driven UI for algorithm visualisations**\n\n- The `algosInfo.ts` file exports an array called `algos` that contains objects with three properties:  \n  - `algoName` – a human‑readable title such as “Sorting Algorithms” or “Dynamic Programming”.  \n  - `algoDesc` – a short paragraph that explains what the user will see when they click the card.  \n  - `algoImg` – an imported image that represents the category (e.g., a sorting icon, a DP icon, etc.).  \n- The objects are typed with `AlgoProps`, which is imported from `AlgoCard.tsx`. This tells me that somewhere in the UI a component called `AlgoCard` receives these props and renders a card for each algorithm category.  \n- Because the array is exported, the component can simply map over it:  \n\n  ```ts\n  algos.map((algo) => <AlgoCard key={algo.algoName} {...algo} />)\n  ```\n\n  This keeps the UI declarative and makes adding a new algorithm as easy as pushing a new object into the array.\n\n**2. A modern, CSS‑variable‑centric theme**\n\n- The `index.css` file defines a large number of custom properties (`--primary`, `--secondary`, `--accent`, etc.) using the **OKLCH** colour space.  \n- These variables are then applied globally via Tailwind’s `@apply` directive inside a `@layer base` block. For example:  \n\n  ```css\n  * { @apply border-border outline-ring/50; }\n  body { @apply bg-background text-foreground; }\n  ```\n\n  This means the project relies on Tailwind for utility classes but also extends it with its own colour palette.  \n- The use of `oklch` values suggests a focus on perceptual colour accuracy, which is great for accessibility and for ensuring that the visualisations look consistent across devices.\n\n**3. A clear separation of concerns**\n\n- Images are imported at the top of `algosInfo.ts` and then referenced in the data objects. This keeps the asset pipeline tidy and allows the build system (likely Vite or Webpack) to handle image optimisation automatically.  \n- The CSS file contains only variable definitions and base styles; component‑specific styles are probably handled elsewhere (e.g., in component‑scoped CSS or Tailwind classes). This keeps the global stylesheet lightweight.\n\n**4. Practical take‑aways**\n\n- If you want to add a new algorithm category, just add a new object to the `algos` array and import the corresponding image.  \n- To tweak the overall look of the app, adjust the `--primary`, `--secondary`, or `--accent` variables in `index.css`.  \n- The project’s use of TypeScript and Tailwind utilities means you can rely on strong typing and rapid prototyping without writing a lot of custom CSS.\n\nIn short, the codebase is a clean, data‑driven front‑end that leverages modern CSS techniques and TypeScript to deliver a set of algorithm visualisations in a maintainable way.', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, timestamp=datetime.datetime(2025, 8, 16, 23, 53, 13, 112311), message_id=UUID('f4ad8f5e-0e30-4365-afc9-3da244ac6b38'), session_id=UUID('82b9f273-fe23-4043-b5de-590b2232dd1c'), content='can you give dir structure of codebase', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, timestamp=datetime.datetime(2025, 8, 16, 23, 53, 14, 887067), message_id=UUID('a42981d0-6833-4b87-95dd-303dd0f493eb'), session_id=UUID('82b9f273-fe23-4043-b5de-590b2232dd1c'), content='Below is a **high‑level directory map** that captures the most important parts of the\u202f`algo‑ameba`\u202frepository.  \n(Only the files that you actually asked about are shown in full detail; the rest are inferred from the snippets and the typical structure of a Vite‑React‑TS project.)\n\n```\nalgo-ameba/\n├─ .github/                     # GitHub Actions / workflow files\n├─ public/                      # Static assets served by Vite\n│   ├─ favicon.ico\n│   └─ index.html\n├─ src/\n│   ├─ App.tsx                  # Root component – sets up BrowserRouter & Routes\n│   ├─ index.tsx                # Entry point – renders <App />\n│   ├─ index.css                # Tailwind base + custom CSS variables\n│   ├─ pages/\n│   │   ├─ ViusalLayout.tsx     # (likely a typo for “VisualLayout”) – layout wrapper\n│   │   ├─ Homepage.tsx         # Landing page\n│   │   ├─ BubbleSortVisualizer.tsx\n│   │   ├─ SearchVisualizer.tsx\n│   │   └─ BinarySearch.tsx\n│   ├─ components/\n│   │   ├─ AlgoCard.tsx         # Re‑usable card component for algorithm categories\n│   │   ├─ Navbar.tsx\n│   │   ├─ Footer.tsx\n│   │   └─ Layout.tsx           # Generic layout wrapper (may be the same as ViusalLayout)\n│   ├─ data/\n│   │   └─ algosInfo.ts         # Array of algorithm metadata (name, description, image)\n│   ├─ assets/\n│   │   └─ images/\n│   │       ├─ sorting.png\n│   │       ├─ search.png\n│   │       └─ binary.png\n│   ├─ hooks/\n│   │   ├─ useSort.ts\n│   │   └─ useSearch.ts\n│   ├─ utils/\n│   │   └─ helpers.ts\n│   ├─ styles/\n│   │   └─ globals.css          # Optional – additional global styles\n│   └─ types/\n│       └─ index.d.ts           # Shared TypeScript types\n├─ .eslintrc.cjs                # ESLint + TypeScript + React configs\n├─ .prettierrc.cjs              # Prettier formatting rules\n├─ tailwind.config.ts           # Tailwind + custom theme\n├─ postcss.config.ts            # PostCSS + Tailwind\n├─ vite.config.ts               # Vite build config\n├─ tsconfig.json                # Base TS config\n├─ tsconfig.app.json            # App‑specific TS config\n├─ tsconfig.node.json           # Node‑specific TS config\n├─ package.json\n└─ README.md\n```\n\n### Why this layout makes sense\n\n| Folder | Purpose |\n|--------|---------|\n| **`src/pages`** | Each route has its own component (e.g. `/sort` → `BubbleSortVisualizer`). |\n| **`src/components`** | Re‑usable UI pieces (cards, nav, footer). |\n| **`src/data`** | Static data that drives the UI – the `algosInfo.ts` file you saw. |\n| **`src/assets/images`** | All images referenced by the data file. |\n| **`src/hooks` / `src/utils`** | Custom React hooks and helper functions used by the visualisers. |\n| **`src/styles`** | Optional global styles that complement Tailwind. |\n| **`src/types`** | Shared TypeScript interfaces (e.g. `AlgoProps`). |\n\n### Quick navigation guide\n\n- **Routing** – `src/App.tsx` wires up the routes (`/`, `/sort`, `/search`, `/binary`).  \n- **Layout** – `src/pages/ViusalLayout.tsx` (or `Layout.tsx`) wraps the page content and probably includes the navbar/footer.  \n- **Algorithm cards** – `src/components/AlgoCard.tsx` consumes the objects exported from `src/data/algosInfo.ts`.  \n- **Visualisers** – Each visualiser component (`BubbleSortVisualizer`, `SearchVisualizer`, `BinarySearch`) lives in `src/pages/` and uses hooks from `src/hooks/`.  \n\nFeel free to dive into any of these folders for more details, and let me know if you’d like a deeper look at a specific file or component!', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, timestamp=datetime.datetime(2025, 8, 16, 23, 54, 54, 500087), message_id=UUID('5d762aa3-1901-44c7-87e9-212a9a664498'), session_id=UUID('82b9f273-fe23-4043-b5de-590b2232dd1c'), content='Can you review this resume for me', files=['DineshThummaResume.pdf'], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, timestamp=datetime.datetime(2025, 8, 16, 23, 54, 56, 227434), message_id=UUID('832ab460-86f6-46c1-8459-033d1785a371'), session_id=UUID('82b9f273-fe23-4043-b5de-590b2232dd1c'), content='Empty Response', files=None, model_response_time_ms=None), Message(sender=<SenderRole.USER: 'user'>, timestamp=datetime.datetime(2025, 8, 16, 23, 55, 20, 383450), message_id=UUID('66c73fd4-263d-494c-8c6e-59a0bee7d673'), session_id=UUID('82b9f273-fe23-4043-b5de-590b2232dd1c'), content='What happend', files=[], model_response_time_ms=None), Message(sender=<SenderRole.ASSISTANT: 'assistant'>, timestamp=datetime.datetime(2025, 8, 16, 23, 55, 22, 331317), message_id=UUID('e4130064-f556-4bfe-a2b7-f0aa87662018'), session_id=UUID('82b9f273-fe23-4043-b5de-590b2232dd1c'), content='**Resume Review – Dinesh\u202fThumma**\n\n---\n\n### 1️⃣ Overall Impression  \nYour résumé presents a solid blend of technical expertise, hands‑on projects, and academic background. The layout is clean, and the key sections (Professional Summary, Technical Skills, Projects, Education, Certifications) are all in place. Below are some targeted suggestions that can help you stand out even more to recruiters and hiring managers.\n\n---\n\n### 2️⃣ Strengths  \n| Area | What Works Well |\n|------|-----------------|\n| **Professional Summary** | Concise, focused on AI/DS and backend systems, and clearly states your career goal. |\n| **Technical Skills** | Well‑categorized (Languages, Frameworks, Tools, Databases, LLM/GenAI, Libraries). Shows breadth and depth. |\n| **Projects** | Each project lists tech stack, key achievements, and a short demo link. “CentralGPT” and “Flaskblog” demonstrate both backend and full‑stack experience. |\n| **Certifications & Coursework** | Highlights recent certifications (Tata Group, Adobe Hackathon) and relevant coursework. |\n| **Contact Information** | Phone, email, GitHub, LeetCode, CodeChef – all useful for recruiters. |\n\n---\n\n### 3️⃣ Areas for Improvement  \n\n| Section | Issue | Suggested Fix |\n|---------|-------|---------------|\n| **Contact Header** | The header is cluttered; consider a single line with icons or a clean layout. | `Dinesh\u202fThumma • 939‑351‑9918 • dineshthumma15@gmail.com • GitHub • LeetCode • CodeChef` |\n| **Professional Summary** | Slightly repetitive wording (“specializing”, “focus on”). | Rephrase: *“Undergraduate in Artificial Intelligence & Data Science with a strong focus on backend engineering and generative AI. Eager to contribute to real‑world projects that solve complex technical challenges.”* |\n| **Technical Skills** | Mixed formatting (vertical bars, commas). | Use a table or two‑column list for readability. Example: |\n| | | **Languages** – Python, Java, TypeScript, Kotlin |\n| | | **Frameworks** – Spring Boot, Flask, FastAPI |\n| | | **Databases** – Redis, PostgreSQL, Neo4j, MongoDB, Qdrant |\n| | | **LLM/GenAI** – LlamaIndex, LangChain, Ollama |\n| | | **Tools** – Git, Docker, GitHub, VS\u202fCode, Postman, IntelliJ |\n| | | **Libraries** – Pandas, NumPy, Bootstrap, Zod, Zustand, Chakra UI, Shadcn, Axios, React |\n| **Projects** | Project descriptions are a bit terse; add impact metrics where possible. | For “CentralGPT”, mention: *“Reduced response latency by 30\u202f% through optimized Qdrant indexing.”* |\n| | | For “Flaskblog”, add: *“Scalability tested with 5,000 concurrent users on Render.”* |\n| **Education** | Missing graduation year for B.Tech. | Add expected graduation: *“B.Tech, Artificial Intelligence & Data Science – 2027 (expected)”* |\n| **Certifications** | List dates consistently. | *“Tata Group Data Analytics Job Simulation – August\u202f2025”* |\n| **Formatting** | Some line breaks are inconsistent (e.g., “ensuring efficient context management.”). | Use consistent paragraph breaks and avoid stray line breaks. |\n| **Length** | The résumé is a single page, which is good, but ensure all bullet points are concise (≤\u202f2 lines). | Trim any redundant words. |\n\n---\n\n### 4️⃣ Quick Formatting Checklist  \n\n| Item | ✅ Done | ❌ Needs Work |\n|------|--------|---------------|\n| Header with name & contact | ✅ | |\n| Professional Summary | ✅ | |\n| Technical Skills (two‑column list) | ❌ | |\n| Projects (bullet points, tech stack, impact) | ✅ | |\n| Education (degree, institution, dates) | ✅ | |\n| Certifications (date, issuer) | ✅ | |\n| Consistent bullet style (•) | ✅ | |\n| No stray line breaks | ❌ | |\n| Font size 10–11pt, single‑column layout | ✅ | |\n\n---\n\n### 5️⃣ Final Tips  \n\n1. **Quantify Achievements** – Numbers (latency reduction, user load, performance gains) make your impact tangible.  \n2. **Tailor to the Job** – If applying for a backend role, emphasize Flask/FastAPI, PostgreSQL, Redis. For AI roles, highlight LLM/GenAI tools.  \n3. **Add a Portfolio Link** – If you have a personal website or a GitHub repo with demos, include it.  \n4. **Proofread** – A quick spell‑check and grammar review will catch minor typos (“ViusalLayout” → “VisualLayout”).  \n\n---\n\n**Bottom line:** Your résumé already showcases a strong technical foundation and relevant projects. With a few formatting tweaks and a bit more quantification, it will be even more compelling to hiring managers. Good luck!', files=None, model_response_time_ms=None)]
2025-08-16 23:55:33.254 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'timestamp': datetime.datetime(2025, 8, 16, 23, 52, 28, 317765), 'message_id': UUID('53c6f46d-e92f-4c27-9a30-058c2b442d90'), 'session_id': UUID('82b9f273-fe23-4043-b5de-590b2232dd1c'), 'content': 'What did you learn from codebase', 'files': [], 'model_response_time_ms': None}
2025-08-16 23:55:33.254 | INFO     | src.router.sessions:get_chat_history:68 - {'sender': <SenderRole.USER: 'user'>, 'timestamp': datetime.datetime(2025, 8, 16, 23, 52, 28, 317765), 'message_id': UUID('53c6f46d-e92f-4c27-9a30-058c2b442d90'), 'session_id': UUID('82b9f273-fe23-4043-b5de-590b2232dd1c'), 'content': 'What did you learn from codebase', 'files': [], 'model_response_time_ms': None}
2025-08-16 23:55:33.494 | INFO     | src.main:log_requests:54 - GET /sessions/history/82b9f273-fe23-4043-b5de-590b2232dd1c → 200 (1981.99ms)
2025-08-16 23:55:33.494 | INFO     | src.main:log_requests:54 - GET /sessions/history/82b9f273-fe23-4043-b5de-590b2232dd1c → 200 (1981.99ms)
2025-08-16 23:55:34.435 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/88285604-64af-47a0-8957-9ed012556c00
2025-08-16 23:55:34.435 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/88285604-64af-47a0-8957-9ed012556c00
2025-08-16 23:55:34.436 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/88285604-64af-47a0-8957-9ed012556c00 → 200 (1.0ms)
2025-08-16 23:55:34.436 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/88285604-64af-47a0-8957-9ed012556c00 → 200 (1.0ms)
2025-08-16 23:55:34.438 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/88285604-64af-47a0-8957-9ed012556c00
2025-08-16 23:55:34.438 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/88285604-64af-47a0-8957-9ed012556c00
2025-08-16 23:55:35.189 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 23:55:35.189 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-16 23:55:44.146 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 23:55:44.146 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 23:55:45.593 | INFO     | src.router.messages:message_stream:119 - Received files in backend:[]
2025-08-16 23:55:45.593 | INFO     | src.router.messages:message_stream:119 - Received files in backend:[]
2025-08-16 23:55:45.922 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (1775.95ms)
2025-08-16 23:55:45.922 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (1775.95ms)
2025-08-16 23:55:58.525 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 23:55:58.525 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 23:56:01.394 | INFO     | src.router.messages:message_stream:119 - Received files in backend:[]
2025-08-16 23:56:01.394 | INFO     | src.router.messages:message_stream:119 - Received files in backend:[]
2025-08-16 23:56:01.634 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3109.28ms)
2025-08-16 23:56:01.634 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3109.28ms)
2025-08-16 23:56:12.305 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 23:56:12.305 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 23:56:13.585 | INFO     | src.router.messages:message_stream:119 - Received files in backend:[]
2025-08-16 23:56:13.585 | INFO     | src.router.messages:message_stream:119 - Received files in backend:[]
2025-08-16 23:56:13.824 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (1519.16ms)
2025-08-16 23:56:13.824 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (1519.16ms)
2025-08-16 23:56:29.080 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 23:56:29.080 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 23:56:32.094 | INFO     | src.router.messages:message_stream:119 - Received files in backend:[]
2025-08-16 23:56:32.094 | INFO     | src.router.messages:message_stream:119 - Received files in backend:[]
2025-08-16 23:56:32.330 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3250.27ms)
2025-08-16 23:56:32.330 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3250.27ms)
2025-08-16 23:56:57.871 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 23:56:57.871 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-16 23:57:01.609 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (3737.9ms)
2025-08-16 23:57:01.609 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (3737.9ms)
2025-08-16 23:57:22.624 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 23:57:22.624 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 23:57:30.015 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (7390.61ms)
2025-08-16 23:57:30.015 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (7390.61ms)
2025-08-16 23:57:30.377 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 23:57:30.377 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-16 23:57:31.609 | INFO     | src.router.messages:message_stream:119 - Received files in backend:['DineshThummaResume.pdf']
2025-08-16 23:57:31.609 | INFO     | src.router.messages:message_stream:119 - Received files in backend:['DineshThummaResume.pdf']
2025-08-16 23:57:34.429 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4052.49ms)
2025-08-16 23:57:34.429 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4052.49ms)
2025-08-16 23:57:46.711 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/dc33ea1b-020c-4d74-8942-19e8efb1bc26/title
2025-08-16 23:57:46.711 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/dc33ea1b-020c-4d74-8942-19e8efb1bc26/title
2025-08-16 23:57:46.712 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/dc33ea1b-020c-4d74-8942-19e8efb1bc26/title → 200 (1.0ms)
2025-08-16 23:57:46.712 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/dc33ea1b-020c-4d74-8942-19e8efb1bc26/title → 200 (1.0ms)
2025-08-16 23:57:47.030 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/dc33ea1b-020c-4d74-8942-19e8efb1bc26/title
2025-08-16 23:57:47.030 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/dc33ea1b-020c-4d74-8942-19e8efb1bc26/title
2025-08-16 23:57:49.118 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session dc33ea1b-020c-4d74-8942-19e8efb1bc26: Resume Learning and Key Takeaways 

Alternatively, I can also suggest:
Learning From Resume 

But my top pick is: 
Lessons From Resume 

My final title pick is: 
Learning From Resume
2025-08-16 23:57:49.118 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session dc33ea1b-020c-4d74-8942-19e8efb1bc26: Resume Learning and Key Takeaways 

Alternatively, I can also suggest:
Learning From Resume 

But my top pick is: 
Lessons From Resume 

My final title pick is: 
Learning From Resume
2025-08-16 23:57:49.348 | INFO     | src.main:log_requests:54 - PATCH /sessions/dc33ea1b-020c-4d74-8942-19e8efb1bc26/title → 200 (2318.13ms)
2025-08-16 23:57:49.348 | INFO     | src.main:log_requests:54 - PATCH /sessions/dc33ea1b-020c-4d74-8942-19e8efb1bc26/title → 200 (2318.13ms)
2025-08-16 23:58:00.332 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-16 23:58:00.332 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 00:00:08.787 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 00:00:29.589 | INFO     | src.main:<module>:20 - Server started
2025-08-17 00:00:29.589 | INFO     | src.main:<module>:20 - Server started
2025-08-17 00:00:29.606 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 00:00:29.606 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 00:00:35.661 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 00:00:35.661 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 00:01:17.860 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 00:01:17.860 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 00:01:38.282 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 00:01:52.909 | INFO     | src.main:<module>:20 - Server started
2025-08-17 00:01:52.909 | INFO     | src.main:<module>:20 - Server started
2025-08-17 00:01:52.925 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 00:01:52.925 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 00:01:59.165 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 00:01:59.165 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 00:03:39.670 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 00:03:39.670 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 00:07:44.794 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-17 00:07:44.794 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-17 00:07:44.795 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 00:07:44.795 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 00:07:44.795 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-17 00:07:44.795 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-17 00:07:44.796 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (2.55ms)
2025-08-17 00:07:44.796 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (2.55ms)
2025-08-17 00:07:44.797 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (2.04ms)
2025-08-17 00:07:44.797 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (2.04ms)
2025-08-17 00:07:44.799 | INFO     | src.main:log_requests:54 - POST /rag/upload → 400 (4.05ms)
2025-08-17 00:07:44.799 | INFO     | src.main:log_requests:54 - POST /rag/upload → 400 (4.05ms)
2025-08-17 00:07:44.799 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (584466.89ms)
2025-08-17 00:07:44.799 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (584466.89ms)
2025-08-17 09:43:08.036 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 09:43:27.341 | INFO     | src.main:<module>:20 - Server started
2025-08-17 09:43:27.341 | INFO     | src.main:<module>:20 - Server started
2025-08-17 09:43:27.372 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 09:43:27.372 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 09:43:35.100 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 09:43:35.100 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 09:43:48.119 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-17 09:43:48.119 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-17 09:43:48.120 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-17 09:43:48.120 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-17 09:43:48.121 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.0ms)
2025-08-17 09:43:48.121 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.0ms)
2025-08-17 09:43:48.122 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.04ms)
2025-08-17 09:43:48.122 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.04ms)
2025-08-17 09:43:48.439 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 09:43:48.439 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 09:43:48.471 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 401 (31.81ms)
2025-08-17 09:43:48.471 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 401 (31.81ms)
2025-08-17 09:43:48.478 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 09:43:48.478 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 09:43:48.483 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 401 (6.57ms)
2025-08-17 09:43:48.483 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 401 (6.57ms)
2025-08-17 09:44:02.096 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-17 09:44:02.096 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-17 09:44:03.771 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-17 09:44:03.771 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-17 09:44:03.773 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (1677.06ms)
2025-08-17 09:44:03.773 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (1677.06ms)
2025-08-17 09:44:03.879 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-17 09:44:03.879 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-17 09:44:03.880 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.11ms)
2025-08-17 09:44:03.880 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.11ms)
2025-08-17 09:44:03.883 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 09:44:03.883 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 09:44:06.746 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2863.27ms)
2025-08-17 09:44:06.746 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2863.27ms)
2025-08-17 09:44:08.798 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 09:44:08.798 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 09:44:11.226 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2428.48ms)
2025-08-17 09:44:11.226 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2428.48ms)
2025-08-17 09:44:11.232 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 09:44:11.232 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 09:44:13.059 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1826.65ms)
2025-08-17 09:44:13.059 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1826.65ms)
2025-08-17 09:47:17.733 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 09:47:17.733 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 09:47:39.832 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 09:48:05.876 | INFO     | src.main:<module>:20 - Server started
2025-08-17 09:48:05.876 | INFO     | src.main:<module>:20 - Server started
2025-08-17 09:48:05.913 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 09:48:05.913 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 09:48:12.416 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 09:48:12.416 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 09:50:37.679 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 09:50:37.679 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 09:51:27.437 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 09:52:45.160 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 09:53:32.754 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 09:54:25.616 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 09:56:33.544 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 09:58:11.420 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 09:58:41.695 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 09:59:23.221 | INFO     | src.main:<module>:20 - Server started
2025-08-17 09:59:23.221 | INFO     | src.main:<module>:20 - Server started
2025-08-17 09:59:23.245 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 09:59:23.245 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 09:59:28.782 | ERROR    | src.main:lifespan:83 - Database init error: (psycopg2.OperationalError) connection to server at "ep-shy-queen-a8t044kf-pooler.eastus2.azure.neon.tech" (52.167.188.143), port 5432 failed: timeout expired

(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-08-17 09:59:28.782 | ERROR    | src.main:lifespan:83 - Database init error: (psycopg2.OperationalError) connection to server at "ep-shy-queen-a8t044kf-pooler.eastus2.azure.neon.tech" (52.167.188.143), port 5432 failed: timeout expired

(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-08-17 10:10:36.344 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-17 10:10:36.344 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-17 10:10:36.347 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (3.07ms)
2025-08-17 10:10:36.347 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (3.07ms)
2025-08-17 10:10:36.660 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-17 10:10:36.660 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-17 10:10:41.649 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-17 10:10:41.649 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-17 10:10:41.651 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (2.0ms)
2025-08-17 10:10:41.651 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (2.0ms)
2025-08-17 10:10:41.653 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (4993.06ms)
2025-08-17 10:10:41.653 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (4993.06ms)
2025-08-17 10:10:41.656 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-17 10:10:41.656 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-17 10:10:42.726 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1070.14ms)
2025-08-17 10:10:42.726 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1070.14ms)
2025-08-17 10:11:27.940 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 10:11:49.274 | INFO     | src.main:<module>:20 - Server started
2025-08-17 10:11:49.274 | INFO     | src.main:<module>:20 - Server started
2025-08-17 10:11:49.297 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 10:11:49.297 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 10:11:55.630 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 10:11:55.630 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 10:12:09.092 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-17 10:12:09.092 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-17 10:12:11.073 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-17 10:12:11.073 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-17 10:12:11.074 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1982.31ms)
2025-08-17 10:12:11.074 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1982.31ms)
2025-08-17 10:12:12.586 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1512.78ms)
2025-08-17 10:12:12.586 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1512.78ms)
2025-08-17 10:16:36.995 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 10:16:55.247 | INFO     | src.main:<module>:20 - Server started
2025-08-17 10:16:55.247 | INFO     | src.main:<module>:20 - Server started
2025-08-17 10:16:55.262 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 10:16:55.262 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 10:17:01.754 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 10:17:01.754 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 10:17:02.560 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-17 10:17:02.560 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-17 10:17:02.560 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-17 10:17:02.560 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-17 10:17:02.561 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (1.0ms)
2025-08-17 10:17:02.561 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (1.0ms)
2025-08-17 10:17:02.562 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.0ms)
2025-08-17 10:17:02.562 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2.0ms)
2025-08-17 10:17:02.879 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 10:17:02.879 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 10:17:04.434 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1554.92ms)
2025-08-17 10:17:04.434 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1554.92ms)
2025-08-17 10:17:04.438 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 10:17:04.438 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 10:17:05.685 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1246.1ms)
2025-08-17 10:17:05.685 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1246.1ms)
2025-08-17 10:17:13.646 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-17 10:17:13.646 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-17 10:17:13.647 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (1.0ms)
2025-08-17 10:17:13.647 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (1.0ms)
2025-08-17 10:17:13.959 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-17 10:17:13.959 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-17 10:17:15.291 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-17 10:17:15.291 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-17 10:17:15.292 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (2.0ms)
2025-08-17 10:17:15.292 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (2.0ms)
2025-08-17 10:17:15.294 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1335.02ms)
2025-08-17 10:17:15.294 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1335.02ms)
2025-08-17 10:17:15.298 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-17 10:17:15.298 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-17 10:17:16.558 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1259.7ms)
2025-08-17 10:17:16.558 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1259.7ms)
2025-08-17 10:17:30.669 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-17 10:17:30.669 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-17 10:17:30.670 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.0ms)
2025-08-17 10:17:30.670 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.0ms)
2025-08-17 10:17:31.000 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 10:17:31.000 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 10:17:32.234 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (1233.44ms)
2025-08-17 10:17:32.234 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (1233.44ms)
2025-08-17 10:17:32.331 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-17 10:17:32.331 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-17 10:17:32.331 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (0.0ms)
2025-08-17 10:17:32.331 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (0.0ms)
2025-08-17 10:17:32.334 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 10:17:32.334 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 10:17:33.621 | INFO     | src.router.messages:message_stream:119 - Received files in backend:['DineshThummaResume.pdf']
2025-08-17 10:17:33.621 | INFO     | src.router.messages:message_stream:119 - Received files in backend:['DineshThummaResume.pdf']
2025-08-17 10:17:35.664 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3329.98ms)
2025-08-17 10:17:35.664 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3329.98ms)
2025-08-17 10:17:44.560 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/87788406-df9d-4672-b941-21b5f606ec0d/title
2025-08-17 10:17:44.560 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/87788406-df9d-4672-b941-21b5f606ec0d/title
2025-08-17 10:17:44.563 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/87788406-df9d-4672-b941-21b5f606ec0d/title → 200 (2.42ms)
2025-08-17 10:17:44.563 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/87788406-df9d-4672-b941-21b5f606ec0d/title → 200 (2.42ms)
2025-08-17 10:17:44.883 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/87788406-df9d-4672-b941-21b5f606ec0d/title
2025-08-17 10:17:44.883 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/87788406-df9d-4672-b941-21b5f606ec0d/title
2025-08-17 10:17:48.517 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 87788406-df9d-4672-b941-21b5f606ec0d: Resume Review and Feedback Requested
2025-08-17 10:17:48.517 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 87788406-df9d-4672-b941-21b5f606ec0d: Resume Review and Feedback Requested
2025-08-17 10:17:48.875 | INFO     | src.main:log_requests:54 - PATCH /sessions/87788406-df9d-4672-b941-21b5f606ec0d/title → 200 (3992.05ms)
2025-08-17 10:17:48.875 | INFO     | src.main:log_requests:54 - PATCH /sessions/87788406-df9d-4672-b941-21b5f606ec0d/title → 200 (3992.05ms)
2025-08-17 10:17:49.720 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 10:17:49.720 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 10:17:51.127 | INFO     | src.router.messages:message_stream:119 - Received files in backend:[]
2025-08-17 10:17:51.127 | INFO     | src.router.messages:message_stream:119 - Received files in backend:[]
2025-08-17 10:17:51.430 | ERROR    | src.router.messages:message_stream:212 - Streaming setup error: 'str' object has no attribute 'decode'
2025-08-17 10:17:51.430 | ERROR    | src.router.messages:message_stream:212 - Streaming setup error: 'str' object has no attribute 'decode'
2025-08-17 10:17:51.680 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 500 (1960.56ms)
2025-08-17 10:17:51.680 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 500 (1960.56ms)
2025-08-17 10:19:29.019 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 10:19:29.019 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 10:19:52.507 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 10:20:09.708 | INFO     | src.main:<module>:20 - Server started
2025-08-17 10:20:09.708 | INFO     | src.main:<module>:20 - Server started
2025-08-17 10:20:09.737 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 10:20:09.737 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 10:20:16.629 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 10:20:16.629 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 10:21:10.555 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:21:10.555 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:21:10.559 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 10:21:10.559 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 10:21:12.037 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (1481.93ms)
2025-08-17 10:21:12.037 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (1481.93ms)
2025-08-17 10:21:12.819 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (2259.21ms)
2025-08-17 10:21:12.819 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (2259.21ms)
2025-08-17 10:21:14.054 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:21:14.054 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:21:14.474 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (421.01ms)
2025-08-17 10:21:14.474 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (421.01ms)
2025-08-17 10:21:16.486 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:21:16.486 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:21:16.878 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (391.86ms)
2025-08-17 10:21:16.878 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (391.86ms)
2025-08-17 10:22:03.444 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 10:22:03.444 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 10:22:16.367 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 10:22:30.993 | INFO     | src.main:<module>:20 - Server started
2025-08-17 10:22:30.993 | INFO     | src.main:<module>:20 - Server started
2025-08-17 10:22:31.013 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 10:22:31.013 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 10:22:39.141 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 10:22:39.141 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 10:22:59.403 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:22:59.403 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:23:00.873 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (1469.74ms)
2025-08-17 10:23:00.873 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (1469.74ms)
2025-08-17 10:23:02.885 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:23:02.885 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:23:03.233 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (348.33ms)
2025-08-17 10:23:03.233 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (348.33ms)
2025-08-17 10:23:05.246 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:23:05.246 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:23:05.559 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (313.81ms)
2025-08-17 10:23:05.559 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (313.81ms)
2025-08-17 10:23:07.576 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:23:07.576 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:23:07.936 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (360.78ms)
2025-08-17 10:23:07.936 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (360.78ms)
2025-08-17 10:23:09.948 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:23:09.948 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:23:10.323 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (374.87ms)
2025-08-17 10:23:10.323 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (374.87ms)
2025-08-17 10:23:22.230 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-17 10:23:22.230 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-17 10:23:24.365 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-17 10:23:24.365 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-17 10:23:24.368 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (2137.77ms)
2025-08-17 10:23:24.368 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (2137.77ms)
2025-08-17 10:23:24.436 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-17 10:23:24.436 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-17 10:23:24.437 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.01ms)
2025-08-17 10:23:24.437 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.01ms)
2025-08-17 10:23:24.442 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 10:23:24.442 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 10:23:27.402 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2959.52ms)
2025-08-17 10:23:27.402 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (2959.52ms)
2025-08-17 10:23:28.271 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 10:23:28.271 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 10:23:30.103 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1832.47ms)
2025-08-17 10:23:30.103 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1832.47ms)
2025-08-17 10:23:30.112 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 10:23:30.112 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 10:23:31.607 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1494.9ms)
2025-08-17 10:23:31.607 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1494.9ms)
2025-08-17 10:23:47.242 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 10:23:47.242 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 10:23:47.916 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (673.75ms)
2025-08-17 10:23:47.916 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (673.75ms)
2025-08-17 10:24:02.625 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:24:02.625 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:24:04.207 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (1581.96ms)
2025-08-17 10:24:04.207 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (1581.96ms)
2025-08-17 10:24:05.926 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 10:24:05.926 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 10:24:07.295 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 10:24:07.295 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 10:24:07.560 | ERROR    | src.router.messages:message_stream:194 - Streaming setup error: 'str' object has no attribute 'decode'
2025-08-17 10:24:07.560 | ERROR    | src.router.messages:message_stream:194 - Streaming setup error: 'str' object has no attribute 'decode'
2025-08-17 10:24:07.853 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 500 (1926.36ms)
2025-08-17 10:24:07.853 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 500 (1926.36ms)
2025-08-17 10:24:35.312 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-17 10:24:35.312 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-17 10:24:36.714 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1402.05ms)
2025-08-17 10:24:36.714 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1402.05ms)
2025-08-17 10:24:37.013 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-17 10:24:37.013 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-17 10:24:38.631 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1617.57ms)
2025-08-17 10:24:38.631 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1617.57ms)
2025-08-17 10:24:44.687 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:24:44.687 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:24:44.689 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 10:24:44.689 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 10:24:45.352 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (663.19ms)
2025-08-17 10:24:45.352 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (663.19ms)
2025-08-17 10:24:45.354 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (666.7ms)
2025-08-17 10:24:45.354 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (666.7ms)
2025-08-17 10:25:27.569 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:25:27.569 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:25:27.859 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (289.27ms)
2025-08-17 10:25:27.859 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (289.27ms)
2025-08-17 10:25:28.892 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 10:25:28.892 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 10:25:30.470 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 10:25:30.470 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 10:25:30.732 | ERROR    | src.router.messages:message_stream:194 - Streaming setup error: 'str' object has no attribute 'decode'
2025-08-17 10:25:30.732 | ERROR    | src.router.messages:message_stream:194 - Streaming setup error: 'str' object has no attribute 'decode'
2025-08-17 10:25:30.979 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 500 (2086.98ms)
2025-08-17 10:25:30.979 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 500 (2086.98ms)
2025-08-17 10:27:39.070 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 10:27:39.070 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 10:27:52.073 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 10:28:07.695 | INFO     | src.main:<module>:20 - Server started
2025-08-17 10:28:07.695 | INFO     | src.main:<module>:20 - Server started
2025-08-17 10:28:07.710 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 10:28:07.710 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 10:28:14.667 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 10:28:14.667 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 10:42:20.628 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:42:20.628 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:42:20.633 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-17 10:42:20.633 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-17 10:42:20.635 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (2.02ms)
2025-08-17 10:42:20.635 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (2.02ms)
2025-08-17 10:42:20.951 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 10:42:20.951 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 10:42:22.304 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (1675.57ms)
2025-08-17 10:42:22.304 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (1675.57ms)
2025-08-17 10:42:23.171 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (2220.32ms)
2025-08-17 10:42:23.171 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (2220.32ms)
2025-08-17 10:42:32.482 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:42:32.482 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:42:32.785 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (303.14ms)
2025-08-17 10:42:32.785 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (303.14ms)
2025-08-17 10:42:33.817 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-17 10:42:33.817 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-17 10:42:33.819 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (2.03ms)
2025-08-17 10:42:33.819 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (2.03ms)
2025-08-17 10:42:33.828 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 10:42:33.828 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 10:42:38.427 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 10:42:38.427 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 10:42:38.783 | INFO     | src.router.messages:message_stream:138 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 10:42:38.783 | INFO     | src.router.messages:message_stream:138 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 10:42:40.966 | INFO     | src.router.messages:message_stream:168 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 10:42:40.966 | INFO     | src.router.messages:message_stream:168 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 10:42:41.354 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (7525.92ms)
2025-08-17 10:42:41.354 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (7525.92ms)
2025-08-17 10:42:56.702 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: 2e8e6b84-6963-4802-923b-800b4a16e714
Text: Dinesh  Thumma  9393519918  |  dineshthumma15@gmail.com
|Github|Leetcode|Codechef  PROFESSIONAL  SUMMARY  An  undergraduate
specializing  in  Artificial  Intelligence  and  Data  Science,  with
a  primary  focus  on  backend  systems   and   applied   generative
AI.   Seeking   to   contribute   to   real-world   projects   and
collabora...
Score:  0.038

2025-08-17 10:42:56.702 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: 2e8e6b84-6963-4802-923b-800b4a16e714
Text: Dinesh  Thumma  9393519918  |  dineshthumma15@gmail.com
|Github|Leetcode|Codechef  PROFESSIONAL  SUMMARY  An  undergraduate
specializing  in  Artificial  Intelligence  and  Data  Science,  with
a  primary  focus  on  backend  systems   and   applied   generative
AI.   Seeking   to   contribute   to   real-world   projects   and
collabora...
Score:  0.038

2025-08-17 10:42:56.704 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-17 10:42:56.704 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-17 10:43:00.545 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-17 10:43:00.545 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-17 10:43:00.546 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.18ms)
2025-08-17 10:43:00.546 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.18ms)
2025-08-17 10:43:00.551 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 10:43:00.551 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 10:43:04.703 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (4151.48ms)
2025-08-17 10:43:04.703 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (4151.48ms)
2025-08-17 10:43:20.391 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 10:43:20.391 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 10:43:21.036 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (645.03ms)
2025-08-17 10:43:21.036 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (645.03ms)
2025-08-17 10:43:30.782 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:43:30.782 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:43:31.311 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (528.22ms)
2025-08-17 10:43:31.311 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (528.22ms)
2025-08-17 10:43:32.931 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 10:43:32.931 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 10:43:34.624 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 10:43:34.624 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 10:43:34.941 | INFO     | src.router.messages:message_stream:138 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 10:43:34.941 | INFO     | src.router.messages:message_stream:138 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 10:43:35.594 | INFO     | src.router.messages:message_stream:168 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 10:43:35.594 | INFO     | src.router.messages:message_stream:168 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 10:43:35.902 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2970.62ms)
2025-08-17 10:43:35.902 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2970.62ms)
2025-08-17 10:43:42.790 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: 0f78bed0-5f27-40a8-b1ac-828fe53be4e9
Text: Queen Elareth Driin, ruler of Erothis, wept for forty-two days
after the Vanishing of Her Eleven Mirrors, relics believed to contain
the souls of former monarchs. Each mirror shattered upon exposure to
betrayal. According to the Book of Flooded Stars, authored by blind
chronicler Fevin Dal Cor, her grief summoned The Tearborn, water
elementals t...
Score:  0.009

2025-08-17 10:43:42.790 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: 0f78bed0-5f27-40a8-b1ac-828fe53be4e9
Text: Queen Elareth Driin, ruler of Erothis, wept for forty-two days
after the Vanishing of Her Eleven Mirrors, relics believed to contain
the souls of former monarchs. Each mirror shattered upon exposure to
betrayal. According to the Book of Flooded Stars, authored by blind
chronicler Fevin Dal Cor, her grief summoned The Tearborn, water
elementals t...
Score:  0.009

2025-08-17 10:43:42.791 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-17 10:43:42.791 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-17 10:43:59.287 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:43:59.287 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:43:59.289 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 10:43:59.289 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 10:43:59.572 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (285.12ms)
2025-08-17 10:43:59.572 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (285.12ms)
2025-08-17 10:43:59.733 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (444.59ms)
2025-08-17 10:43:59.733 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (444.59ms)
2025-08-17 10:47:01.429 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:47:01.429 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 10:47:01.431 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 10:47:01.431 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 10:47:01.435 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-17 10:47:01.435 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-17 10:47:01.436 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-17 10:47:01.436 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-17 10:47:01.437 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-17 10:47:01.437 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-17 10:47:03.742 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2306.26ms)
2025-08-17 10:47:03.742 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2306.26ms)
2025-08-17 10:47:03.743 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2306.27ms)
2025-08-17 10:47:03.743 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (2306.27ms)
2025-08-17 10:47:03.753 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 10:47:03.753 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 10:47:05.818 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-17 10:47:05.818 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-17 10:47:07.196 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (5764.99ms)
2025-08-17 10:47:07.196 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (5764.99ms)
2025-08-17 10:47:07.198 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (5768.93ms)
2025-08-17 10:47:07.198 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (5768.93ms)
2025-08-17 10:47:07.202 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (5767.46ms)
2025-08-17 10:47:07.202 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (5767.46ms)
2025-08-17 10:47:07.268 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 10:47:07.268 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 10:47:09.486 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (5732.53ms)
2025-08-17 10:47:09.486 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (5732.53ms)
2025-08-17 10:47:09.498 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 10:47:09.498 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 10:47:10.998 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (3730.71ms)
2025-08-17 10:47:10.998 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (3730.71ms)
2025-08-17 10:47:11.001 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/3ea21a32-218b-41bb-a05c-d76f16c19c03
2025-08-17 10:47:11.001 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/history/3ea21a32-218b-41bb-a05c-d76f16c19c03
2025-08-17 10:47:11.005 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/3ea21a32-218b-41bb-a05c-d76f16c19c03 → 200 (3.36ms)
2025-08-17 10:47:11.005 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/history/3ea21a32-218b-41bb-a05c-d76f16c19c03 → 200 (3.36ms)
2025-08-17 10:47:11.009 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/3ea21a32-218b-41bb-a05c-d76f16c19c03
2025-08-17 10:47:11.009 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/history/3ea21a32-218b-41bb-a05c-d76f16c19c03
2025-08-17 10:47:11.830 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-17 10:47:11.830 | INFO     | src.router.sessions:get_chat_history:67 - []
2025-08-17 10:47:11.830 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2331.9ms)
2025-08-17 10:47:11.830 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (2331.9ms)
2025-08-17 10:47:14.980 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 10:47:14.980 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 10:47:16.861 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1880.47ms)
2025-08-17 10:47:16.861 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1880.47ms)
2025-08-17 10:47:16.870 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 10:47:16.870 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 10:47:18.498 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1628.42ms)
2025-08-17 10:47:18.498 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (1628.42ms)
2025-08-17 10:48:46.205 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-17 10:48:46.205 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-17 10:48:46.209 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (4.07ms)
2025-08-17 10:48:46.209 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (4.07ms)
2025-08-17 10:48:46.518 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-17 10:48:46.518 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-17 10:48:48.434 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-17 10:48:48.434 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-17 10:48:48.435 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1916.93ms)
2025-08-17 10:48:48.435 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1916.93ms)
2025-08-17 10:48:49.906 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1472.15ms)
2025-08-17 10:48:49.906 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1472.15ms)
2025-08-17 10:48:50.047 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-17 10:48:50.047 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-17 10:48:51.898 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1850.98ms)
2025-08-17 10:48:51.898 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1850.98ms)
2025-08-17 10:48:52.076 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-17 10:48:52.076 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-17 10:48:52.077 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (1.04ms)
2025-08-17 10:48:52.077 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (1.04ms)
2025-08-17 10:48:52.079 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-17 10:48:52.079 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-17 10:48:53.503 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1424.31ms)
2025-08-17 10:48:53.503 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1424.31ms)
2025-08-17 10:49:50.914 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-17 10:49:50.914 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-17 10:49:50.915 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.0ms)
2025-08-17 10:49:50.915 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.0ms)
2025-08-17 10:49:51.224 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-17 10:49:51.224 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-17 10:50:22.169 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-17 10:50:22.169 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-17 10:50:22.170 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.0ms)
2025-08-17 10:50:22.170 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.0ms)
2025-08-17 10:50:22.172 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-17 10:50:22.172 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-17 10:50:48.861 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-17 10:50:48.861 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-17 10:50:48.862 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (0.52ms)
2025-08-17 10:50:48.862 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (0.52ms)
2025-08-17 10:50:49.173 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-17 10:50:49.173 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-17 10:54:04.152 | INFO     | src.main:log_requests:54 - POST /rag/git → 200 (194979.15ms)
2025-08-17 10:54:04.152 | INFO     | src.main:log_requests:54 - POST /rag/git → 200 (194979.15ms)
2025-08-17 10:54:46.678 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-17 10:54:46.678 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-17 10:54:46.680 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (2.0ms)
2025-08-17 10:54:46.680 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (2.0ms)
2025-08-17 10:54:46.683 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 10:54:46.683 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 10:54:50.136 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 10:54:50.136 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 10:54:50.664 | INFO     | src.router.messages:message_stream:138 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 10:54:50.664 | INFO     | src.router.messages:message_stream:138 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 10:54:52.565 | INFO     | src.router.messages:message_stream:168 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 10:54:52.565 | INFO     | src.router.messages:message_stream:168 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 10:54:54.428 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (7744.04ms)
2025-08-17 10:54:54.428 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (7744.04ms)
2025-08-17 10:55:06.460 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: 52ddd1d0-c50b-48f0-a577-0edb5b7aeb72
Text: "meta-llama/llama-4-scout",     "moonshotai/kimi-
vl-a3b-thinking",     "nvidia/llama-3.1-nemotron-nano-8b-v1",
"google/gemini-2.5-pro-exp-03-25",     "mistralai/mistral-
small-3.1-24b-instruct",     "openrouter/optimus-alpha",
"openrouter/quasar-alpha",     "deepseek/deepseek-v3-base",
"qwen/qwen2.5-vl-3b-instruct",     "deepseek/deep...
Score:  0.000

2025-08-17 10:55:06.460 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: 52ddd1d0-c50b-48f0-a577-0edb5b7aeb72
Text: "meta-llama/llama-4-scout",     "moonshotai/kimi-
vl-a3b-thinking",     "nvidia/llama-3.1-nemotron-nano-8b-v1",
"google/gemini-2.5-pro-exp-03-25",     "mistralai/mistral-
small-3.1-24b-instruct",     "openrouter/optimus-alpha",
"openrouter/quasar-alpha",     "deepseek/deepseek-v3-base",
"qwen/qwen2.5-vl-3b-instruct",     "deepseek/deep...
Score:  0.000

2025-08-17 10:55:06.464 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-17 10:55:06.464 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-17 10:55:13.077 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/03a0e017-78da-4af1-b40d-074a5c4fc8cf/title
2025-08-17 10:55:13.077 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/03a0e017-78da-4af1-b40d-074a5c4fc8cf/title
2025-08-17 10:55:13.078 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/03a0e017-78da-4af1-b40d-074a5c4fc8cf/title → 200 (1.59ms)
2025-08-17 10:55:13.078 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/03a0e017-78da-4af1-b40d-074a5c4fc8cf/title → 200 (1.59ms)
2025-08-17 10:55:13.391 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/03a0e017-78da-4af1-b40d-074a5c4fc8cf/title
2025-08-17 10:55:13.391 | INFO     | src.main:log_requests:51 - Incoming request: PATCH /sessions/03a0e017-78da-4af1-b40d-074a5c4fc8cf/title
2025-08-17 10:55:15.896 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 03a0e017-78da-4af1-b40d-074a5c4fc8cf: Codebase Learning and Directory
2025-08-17 10:55:15.896 | INFO     | src.router.sessions:update_session_title:98 - Updated title for session 03a0e017-78da-4af1-b40d-074a5c4fc8cf: Codebase Learning and Directory
2025-08-17 10:55:16.216 | INFO     | src.main:log_requests:54 - PATCH /sessions/03a0e017-78da-4af1-b40d-074a5c4fc8cf/title → 200 (2824.38ms)
2025-08-17 10:55:16.216 | INFO     | src.main:log_requests:54 - PATCH /sessions/03a0e017-78da-4af1-b40d-074a5c4fc8cf/title → 200 (2824.38ms)
2025-08-17 10:55:44.120 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 10:55:44.120 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 10:55:45.711 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 10:55:45.711 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 10:55:46.217 | INFO     | src.router.messages:message_stream:138 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 10:55:46.217 | INFO     | src.router.messages:message_stream:138 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 10:55:47.804 | INFO     | src.router.messages:message_stream:168 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 10:55:47.804 | INFO     | src.router.messages:message_stream:168 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 10:55:48.070 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3950.45ms)
2025-08-17 10:55:48.070 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3950.45ms)
2025-08-17 10:56:22.845 | ERROR    | src.router.messages:streamresponse:73 - Streaming error: peer closed connection without sending complete message body (incomplete chunked read)
2025-08-17 10:56:22.845 | ERROR    | src.router.messages:streamresponse:73 - Streaming error: peer closed connection without sending complete message body (incomplete chunked read)
2025-08-17 10:57:50.981 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-17 10:57:50.981 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-17 10:57:50.982 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.0ms)
2025-08-17 10:57:50.982 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.0ms)
2025-08-17 10:57:51.305 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 10:57:51.305 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 10:57:54.432 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (3126.72ms)
2025-08-17 10:57:54.432 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (3126.72ms)
2025-08-17 10:58:17.865 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-17 10:58:17.865 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-17 10:58:17.867 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.01ms)
2025-08-17 10:58:17.867 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (1.01ms)
2025-08-17 10:58:17.872 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 10:58:17.872 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 11:01:18.693 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 11:01:18.693 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 11:01:41.593 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 11:02:56.240 | INFO     | src.main:<module>:20 - Server started
2025-08-17 11:02:56.240 | INFO     | src.main:<module>:20 - Server started
2025-08-17 11:02:56.258 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 11:02:56.258 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 11:03:02.049 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 11:03:02.049 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 11:03:02.064 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-17 11:03:02.064 | INFO     | src.main:log_requests:51 - Incoming request: POST /auth/login
2025-08-17 11:03:02.066 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 11:03:02.066 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 11:03:06.533 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-17 11:03:06.533 | INFO     | src.service.auth_service:create_tokens:73 - Refresh token stored for user: otest@gmail.com
2025-08-17 11:03:06.534 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (4468.3ms)
2025-08-17 11:03:06.534 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (4468.3ms)
2025-08-17 11:03:06.535 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (4471.24ms)
2025-08-17 11:03:06.535 | INFO     | src.main:log_requests:54 - POST /auth/login → 200 (4471.24ms)
2025-08-17 11:03:06.576 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 11:03:06.576 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 11:03:11.278 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (4701.53ms)
2025-08-17 11:03:11.278 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (4701.53ms)
2025-08-17 11:03:12.048 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-17 11:03:12.048 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-17 11:03:12.049 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-17 11:03:12.049 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/getAll
2025-08-17 11:03:12.050 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (3.01ms)
2025-08-17 11:03:12.050 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (3.01ms)
2025-08-17 11:03:12.053 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (3.44ms)
2025-08-17 11:03:12.053 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/getAll → 200 (3.44ms)
2025-08-17 11:03:12.056 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 11:03:12.056 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 11:03:15.584 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (3528.82ms)
2025-08-17 11:03:15.584 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (3528.82ms)
2025-08-17 11:03:15.588 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 11:03:15.588 | INFO     | src.main:log_requests:51 - Incoming request: GET /sessions/getAll
2025-08-17 11:03:19.177 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (3588.67ms)
2025-08-17 11:03:19.177 | INFO     | src.main:log_requests:54 - GET /sessions/getAll → 200 (3588.67ms)
2025-08-17 11:03:25.489 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-17 11:03:25.489 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/providers
2025-08-17 11:03:25.489 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (0.0ms)
2025-08-17 11:03:25.489 | INFO     | src.main:log_requests:54 - OPTIONS /setup/providers → 200 (0.0ms)
2025-08-17 11:03:25.806 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-17 11:03:25.806 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/providers
2025-08-17 11:03:27.066 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1260.44ms)
2025-08-17 11:03:27.066 | INFO     | src.main:log_requests:54 - POST /setup/providers → 200 (1260.44ms)
2025-08-17 11:03:27.504 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-17 11:03:27.504 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /setup/models
2025-08-17 11:03:27.504 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (0.0ms)
2025-08-17 11:03:27.504 | INFO     | src.main:log_requests:54 - OPTIONS /setup/models → 200 (0.0ms)
2025-08-17 11:03:27.506 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-17 11:03:27.506 | INFO     | src.main:log_requests:51 - Incoming request: POST /setup/models
2025-08-17 11:03:28.588 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1081.99ms)
2025-08-17 11:03:28.588 | INFO     | src.main:log_requests:54 - POST /setup/models → 200 (1081.99ms)
2025-08-17 11:03:48.049 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 11:03:48.049 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 11:03:49.015 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (965.99ms)
2025-08-17 11:03:49.015 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (965.99ms)
2025-08-17 11:04:38.278 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 11:04:38.278 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 11:04:39.192 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (914.24ms)
2025-08-17 11:04:39.192 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (914.24ms)
2025-08-17 11:04:40.215 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:04:40.215 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:04:41.320 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:04:41.320 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:04:41.545 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:04:41.545 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:04:42.377 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:04:42.377 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:04:42.597 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2381.77ms)
2025-08-17 11:04:42.597 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2381.77ms)
2025-08-17 11:04:50.659 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: 6fe3de98-bf9e-40de-a9b2-a770ead36f9b
Text: Interrupts   Interrupts are signals sent to the processor to
temporarily halt the current execution  of a program and redirect it
to handle an event or task.   o These events can come from hardware
devices (e.g., keyboard press, mouse  movement, timer) or software
(e.g., system calls, errors).
Score:  0.005

2025-08-17 11:04:50.659 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: 6fe3de98-bf9e-40de-a9b2-a770ead36f9b
Text: Interrupts   Interrupts are signals sent to the processor to
temporarily halt the current execution  of a program and redirect it
to handle an event or task.   o These events can come from hardware
devices (e.g., keyboard press, mouse  movement, timer) or software
(e.g., system calls, errors).
Score:  0.005

2025-08-17 11:04:50.660 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-17 11:04:50.660 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-17 11:05:16.814 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-17 11:05:16.814 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-17 11:05:16.815 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.0ms)
2025-08-17 11:05:16.815 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.0ms)
2025-08-17 11:05:16.821 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:05:16.821 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:05:17.951 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:05:17.951 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:05:18.405 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:05:18.405 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:05:20.015 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:05:20.015 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:05:20.236 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3415.16ms)
2025-08-17 11:05:20.236 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (3415.16ms)
2025-08-17 11:05:30.184 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: 8d32748e-0250-4898-b825-ef7111e847d2
Text:  The system may have two or more ALUs and be able to execute
two or more instructions at the same time.   Furthermore, the system
may have two or more processors  operating concurrently.         The
purpose of parallel processing is to speed up the computer  processing
capability and increase its throughput, that is, the  amount of
processin...
Score:  0.973

2025-08-17 11:05:30.184 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: 8d32748e-0250-4898-b825-ef7111e847d2
Text:  The system may have two or more ALUs and be able to execute
two or more instructions at the same time.   Furthermore, the system
may have two or more processors  operating concurrently.         The
purpose of parallel processing is to speed up the computer  processing
capability and increase its throughput, that is, the  amount of
processin...
Score:  0.973

2025-08-17 11:05:30.186 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-17 11:05:30.186 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-17 11:05:55.007 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-17 11:05:55.007 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-17 11:05:55.009 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (2.0ms)
2025-08-17 11:05:55.009 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (2.0ms)
2025-08-17 11:05:55.329 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-17 11:05:55.329 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-17 11:07:33.649 | INFO     | src.main:log_requests:54 - POST /rag/git → 200 (98319.99ms)
2025-08-17 11:07:33.649 | INFO     | src.main:log_requests:54 - POST /rag/git → 200 (98319.99ms)
2025-08-17 11:08:31.593 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:08:31.593 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:08:33.780 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:08:33.780 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:08:34.226 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:08:34.226 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:08:35.550 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:08:35.550 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:08:35.760 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4167.07ms)
2025-08-17 11:08:35.760 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4167.07ms)
2025-08-17 11:08:45.261 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: 2331e2d3-271e-49ab-b338-f18a6bb11d70
Text: import type {AlgoProps} from "@/components/AlgoCard.tsx"; import
sortingLogo from "@/assets/sorting.png"; import dpLogo from
"@/assets/dp.png"; import queueLogo from "@/assets/queue.png"; import
graphLogo from "@/assets/graph.png"; import treeLogo from
"@/assets/tree.png"; import heapLogo from "@/assets/heap.png";
export const algos: AlgoProps...
Score:  0.000

2025-08-17 11:08:45.261 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: 2331e2d3-271e-49ab-b338-f18a6bb11d70
Text: import type {AlgoProps} from "@/components/AlgoCard.tsx"; import
sortingLogo from "@/assets/sorting.png"; import dpLogo from
"@/assets/dp.png"; import queueLogo from "@/assets/queue.png"; import
graphLogo from "@/assets/graph.png"; import treeLogo from
"@/assets/tree.png"; import heapLogo from "@/assets/heap.png";
export const algos: AlgoProps...
Score:  0.000

2025-08-17 11:08:45.263 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-17 11:08:45.263 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-17 11:09:04.224 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:09:04.224 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:09:06.442 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:09:06.442 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:09:06.894 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:09:06.894 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:09:08.382 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:09:08.382 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:09:08.832 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4608.43ms)
2025-08-17 11:09:08.832 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4608.43ms)
2025-08-17 11:09:22.528 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: e38f8ca9-ca25-447e-a800-6eb2e13ab21a
Text:
Score:  0.000

2025-08-17 11:09:22.528 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: e38f8ca9-ca25-447e-a800-6eb2e13ab21a
Text:
Score:  0.000

2025-08-17 11:09:22.531 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-17 11:09:22.531 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-17 11:09:57.784 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:09:57.784 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:10:00.096 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:10:00.096 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:10:00.568 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:10:00.568 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:10:02.360 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:10:02.360 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:10:02.570 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4786.09ms)
2025-08-17 11:10:02.570 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4786.09ms)
2025-08-17 11:10:16.343 | ERROR    | src.router.messages:streamresponse:73 - Streaming error: Calculated available context size -710 was not non-negative.
2025-08-17 11:10:16.343 | ERROR    | src.router.messages:streamresponse:73 - Streaming error: Calculated available context size -710 was not non-negative.
2025-08-17 11:10:20.909 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-17 11:10:20.909 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-17 11:10:20.910 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.01ms)
2025-08-17 11:10:20.910 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.01ms)
2025-08-17 11:10:21.222 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 11:10:21.222 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 11:10:23.157 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (1935.0ms)
2025-08-17 11:10:23.157 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (1935.0ms)
2025-08-17 11:10:53.577 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 11:10:53.577 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 11:11:07.992 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 11:11:21.798 | INFO     | src.main:<module>:20 - Server started
2025-08-17 11:11:21.798 | INFO     | src.main:<module>:20 - Server started
2025-08-17 11:11:21.816 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 11:11:21.816 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 11:11:27.105 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 11:11:27.105 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 11:19:49.353 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-17 11:19:49.353 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/upload
2025-08-17 11:19:49.355 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (2.04ms)
2025-08-17 11:19:49.355 | INFO     | src.main:log_requests:54 - OPTIONS /rag/upload → 200 (2.04ms)
2025-08-17 11:19:49.671 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 11:19:49.671 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 11:19:51.931 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (2259.86ms)
2025-08-17 11:19:51.931 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (2259.86ms)
2025-08-17 11:25:02.717 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 11:25:02.717 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 11:25:03.869 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (1151.5ms)
2025-08-17 11:25:03.869 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (1151.5ms)
2025-08-17 11:25:03.975 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 11:25:03.975 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 11:25:22.950 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 11:25:39.696 | INFO     | src.main:<module>:20 - Server started
2025-08-17 11:25:39.696 | INFO     | src.main:<module>:20 - Server started
2025-08-17 11:25:39.709 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 11:25:39.709 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 11:25:46.966 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 11:25:46.966 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 11:25:46.972 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-17 11:25:46.972 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-17 11:25:46.972 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (0.75ms)
2025-08-17 11:25:46.972 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (0.75ms)
2025-08-17 11:25:46.977 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:25:46.977 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:25:48.230 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:25:48.230 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:25:49.400 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:25:49.400 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:25:51.453 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:25:51.453 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:25:51.671 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4693.72ms)
2025-08-17 11:25:51.671 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4693.72ms)
2025-08-17 11:26:04.278 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: 3ff1f761-a107-44f4-97a6-0eac50d176fb
Text: fighting among themselves and were also rapidly starving to
death. When time passed and the animals had evidently not starved to
death, Frederick and Pilkington changed their tune and began to talk
of the terrible wickedness that now flourished on Animal Farm. It was
given out that the animals there practised cannibalism, tortured one
another wi...
Score:  0.009

2025-08-17 11:26:04.278 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: 3ff1f761-a107-44f4-97a6-0eac50d176fb
Text: fighting among themselves and were also rapidly starving to
death. When time passed and the animals had evidently not starved to
death, Frederick and Pilkington changed their tune and began to talk
of the terrible wickedness that now flourished on Animal Farm. It was
given out that the animals there practised cannibalism, tortured one
another wi...
Score:  0.009

2025-08-17 11:26:04.279 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-17 11:26:04.279 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-17 11:26:11.366 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-17 11:26:11.366 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-17 11:26:11.366 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (0.0ms)
2025-08-17 11:26:11.366 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (0.0ms)
2025-08-17 11:26:11.679 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 11:26:11.679 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 11:26:17.168 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (5489.52ms)
2025-08-17 11:26:17.168 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (5489.52ms)
2025-08-17 11:27:03.478 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 11:27:03.478 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/upload
2025-08-17 11:27:03.981 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (503.1ms)
2025-08-17 11:27:03.981 | INFO     | src.main:log_requests:54 - POST /rag/upload → 200 (503.1ms)
2025-08-17 11:27:32.674 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 11:27:32.674 | INFO     | src.main:log_requests:51 - Incoming request: GET /rag/status
2025-08-17 11:27:33.847 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (1172.98ms)
2025-08-17 11:27:33.847 | INFO     | src.main:log_requests:54 - GET /rag/status → 200 (1172.98ms)
2025-08-17 11:27:34.932 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:27:34.932 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:27:36.075 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:27:36.075 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:27:36.314 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:27:36.314 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:27:37.127 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:27:37.127 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:27:37.394 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2462.06ms)
2025-08-17 11:27:37.394 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (2462.06ms)
2025-08-17 11:27:48.569 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: c4f79e22-170d-42a5-aaef-1f82ef55465e
Text: Simultaneously, Luffy the Pirate King, while crossing the
Cloudreach Trench, spotted a massive whirlpool in the sky that
devoured sunlight. From this rift, Echo Shards rained—crystals
containing echoes of battles that never occurred. Each shard bore
fragments of faces half-familiar . Chapter 2: The Nine Shadows The
Echo  Shards,  when  assemble...
Score:  0.000

2025-08-17 11:27:48.569 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: c4f79e22-170d-42a5-aaef-1f82ef55465e
Text: Simultaneously, Luffy the Pirate King, while crossing the
Cloudreach Trench, spotted a massive whirlpool in the sky that
devoured sunlight. From this rift, Echo Shards rained—crystals
containing echoes of battles that never occurred. Each shard bore
fragments of faces half-familiar . Chapter 2: The Nine Shadows The
Echo  Shards,  when  assemble...
Score:  0.000

2025-08-17 11:27:48.572 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-17 11:27:48.572 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-17 11:28:31.177 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:28:31.177 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:28:49.190 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:28:49.190 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:28:49.739 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:28:49.739 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:28:53.041 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:28:53.041 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:28:53.282 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (22104.43ms)
2025-08-17 11:28:53.282 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (22104.43ms)
2025-08-17 11:29:03.538 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: 3298b872-ef54-4f94-a8b1-ad8ec9baf346
Text: Epilogue: Two Suns, One Sky With the rift sealed, the two worlds
began to separate. Time compression meant only weeks passed in each,
despite years within the Rift. Naruto returned to Konoha, bearing a
straw hat in a memory case.
Score:  0.000

2025-08-17 11:29:03.538 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: 3298b872-ef54-4f94-a8b1-ad8ec9baf346
Text: Epilogue: Two Suns, One Sky With the rift sealed, the two worlds
began to separate. Time compression meant only weeks passed in each,
despite years within the Rift. Naruto returned to Konoha, bearing a
straw hat in a memory case.
Score:  0.000

2025-08-17 11:29:03.539 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-17 11:29:03.539 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-17 11:30:24.363 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:30:24.363 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:30:30.407 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:30:30.407 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:30:31.011 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:30:31.011 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:30:34.926 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:30:34.926 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:30:36.014 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (11651.26ms)
2025-08-17 11:30:36.014 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (11651.26ms)
2025-08-17 11:30:54.288 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: 942aab73-e843-4ad7-8ccb-29a70714b643
Text: Title: The Celestial Rift: Luffy & Naruto — The Crossworld Pact
Author: Anonymous Chronicler of the Rift Archives Chapter 1: The Split
Sky Event On  the  112th  cycle  of  the  Tenshō  Calendar,  a  rift
split  open  above  the  Crimson  Sea,  merging  two universes:  the
world  of  Shinobi and  the  seas  of  the  Grand  Line.  From  it
emer...
Score:  0.975

2025-08-17 11:30:54.288 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: 942aab73-e843-4ad7-8ccb-29a70714b643
Text: Title: The Celestial Rift: Luffy & Naruto — The Crossworld Pact
Author: Anonymous Chronicler of the Rift Archives Chapter 1: The Split
Sky Event On  the  112th  cycle  of  the  Tenshō  Calendar,  a  rift
split  open  above  the  Crimson  Sea,  merging  two universes:  the
world  of  Shinobi and  the  seas  of  the  Grand  Line.  From  it
emer...
Score:  0.975

2025-08-17 11:30:54.289 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-17 11:30:54.289 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-17 11:32:29.360 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:32:29.360 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:32:32.617 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:32:32.617 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:32:33.099 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:32:33.099 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:32:34.932 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:32:34.932 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:32:35.191 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (5830.9ms)
2025-08-17 11:32:35.191 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (5830.9ms)
2025-08-17 11:32:51.830 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: fdbdfdc0-8100-429a-9cbe-449aeed9b575
Text: Chapter 6: The Final Pebble of Tervan In the kingdom of Tervan,
where land is paid in riddles and taxes in memories, the king demanded
that all citizens contribute a single pebble to a growing monument
known as the Mound of Resolution. Over time, it was revealed each
pebble was sentient, storing the regret of its contributor .
Score:  0.996

2025-08-17 11:32:51.830 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: fdbdfdc0-8100-429a-9cbe-449aeed9b575
Text: Chapter 6: The Final Pebble of Tervan In the kingdom of Tervan,
where land is paid in riddles and taxes in memories, the king demanded
that all citizens contribute a single pebble to a growing monument
known as the Mound of Resolution. Over time, it was revealed each
pebble was sentient, storing the regret of its contributor .
Score:  0.996

2025-08-17 11:32:51.831 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-17 11:32:51.831 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['page_label', 'file_name', 'file_path', 'file_type', 'file_size', 'creation_date', 'last_modified_date'])
2025-08-17 11:37:14.807 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-17 11:37:14.807 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /rag/git
2025-08-17 11:37:14.808 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.09ms)
2025-08-17 11:37:14.808 | INFO     | src.main:log_requests:54 - OPTIONS /rag/git → 200 (1.09ms)
2025-08-17 11:37:15.119 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-17 11:37:15.119 | INFO     | src.main:log_requests:51 - Incoming request: POST /rag/git
2025-08-17 11:43:03.599 | INFO     | src.main:log_requests:54 - POST /rag/git → 200 (348480.83ms)
2025-08-17 11:43:03.599 | INFO     | src.main:log_requests:54 - POST /rag/git → 200 (348480.83ms)
2025-08-17 11:45:55.310 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-17 11:45:55.310 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /messages/simple-stream
2025-08-17 11:45:55.313 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.91ms)
2025-08-17 11:45:55.313 | INFO     | src.main:log_requests:54 - OPTIONS /messages/simple-stream → 200 (1.91ms)
2025-08-17 11:45:55.318 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:45:55.318 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:45:59.176 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:45:59.176 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:45:59.797 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:45:59.797 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:46:01.911 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:46:01.911 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:46:02.283 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (6964.22ms)
2025-08-17 11:46:02.283 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (6964.22ms)
2025-08-17 11:46:14.821 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: a7ebaed6-7e94-4208-8ce6-929e4f9cd0c7
Text: : unknown; inline?: boolean; className?: string; children?:
React.ReactNode; style?: React.CSSProperties }) => (
<CodeComponent             {...props}             idx={idx}
copiedCodeBlocks={copiedCodeBlocks}
onCodeBlockCopy={onCodeBlockCopy}         />     ),     p: ({ children
}) => (         <Text mb={3} lineHe...
Score:  0.000

2025-08-17 11:46:14.821 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: a7ebaed6-7e94-4208-8ce6-929e4f9cd0c7
Text: : unknown; inline?: boolean; className?: string; children?:
React.ReactNode; style?: React.CSSProperties }) => (
<CodeComponent             {...props}             idx={idx}
copiedCodeBlocks={copiedCodeBlocks}
onCodeBlockCopy={onCodeBlockCopy}         />     ),     p: ({ children
}) => (         <Text mb={3} lineHe...
Score:  0.000

2025-08-17 11:46:14.822 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-17 11:46:14.822 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-17 11:46:38.678 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:46:38.678 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:46:41.025 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:46:41.025 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:46:41.515 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:46:41.515 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:46:43.203 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:46:43.203 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:46:43.543 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4864.87ms)
2025-08-17 11:46:43.543 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4864.87ms)
2025-08-17 11:46:57.139 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: 796e9610-b464-4dbf-ac64-66eff3468390
Text: /// <reference types="vite/client" />
Score:  0.000

2025-08-17 11:46:57.139 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: 796e9610-b464-4dbf-ac64-66eff3468390
Text: /// <reference types="vite/client" />
Score:  0.000

2025-08-17 11:46:57.139 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-17 11:46:57.139 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-17 11:47:29.748 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:47:29.748 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:47:34.538 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:47:34.538 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:47:35.315 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:47:35.315 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:47:37.798 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:47:37.798 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:47:38.352 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (8604.04ms)
2025-08-17 11:47:38.352 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (8604.04ms)
2025-08-17 11:48:14.384 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: d4d16cbc-9671-4124-b4f2-201f00a613ee
Text: 50">             {children}         </Box>     ),     li: ({
children }) => (         <Box as="li" mb={1} color="purple.50">
{children}         </Box>     ),     blockquote: ({ children }) => (
<Box             as="blockquote"             borderLeft="4px solid"
borderColor="purple.400"             pl={4}          ...
Score:  0.038

2025-08-17 11:48:14.384 | INFO     | src.router.messages:streamresponse:49 - Sending Source nodes : Node ID: d4d16cbc-9671-4124-b4f2-201f00a613ee
Text: 50">             {children}         </Box>     ),     li: ({
children }) => (         <Box as="li" mb={1} color="purple.50">
{children}         </Box>     ),     blockquote: ({ children }) => (
<Box             as="blockquote"             borderLeft="4px solid"
borderColor="purple.400"             pl={4}          ...
Score:  0.038

2025-08-17 11:48:14.385 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-17 11:48:14.385 | INFO     | src.router.messages:streamresponse:50 - Sending Source nodes : dict_keys(['file_path', 'file_name', 'url'])
2025-08-17 11:50:13.251 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:50:13.251 | INFO     | src.main:log_requests:51 - Incoming request: POST /messages/simple-stream
2025-08-17 11:50:15.587 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:50:15.587 | INFO     | src.router.messages:message_stream:107 - Received files in backend:[]
2025-08-17 11:50:16.109 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:50:16.109 | INFO     | src.router.messages:message_stream:140 - Rebuilding ADVANCED RAG pipeline from vector store...
2025-08-17 11:50:17.932 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:50:17.932 | INFO     | src.router.messages:message_stream:170 - Advanced RAG pipeline rebuilt successfully.
2025-08-17 11:50:18.147 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4895.53ms)
2025-08-17 11:50:18.147 | INFO     | src.main:log_requests:54 - POST /messages/simple-stream → 200 (4895.53ms)
2025-08-17 11:50:39.549 | ERROR    | src.router.messages:streamresponse:73 - Streaming error: <class 'ValueError'> Calculated available context size -135 was not non-negative.
2025-08-17 11:50:39.549 | ERROR    | src.router.messages:streamresponse:73 - Streaming error: <class 'ValueError'> Calculated available context size -135 was not non-negative.
2025-08-17 11:52:13.884 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 11:52:13.884 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 11:52:30.122 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 11:52:44.951 | INFO     | src.main:<module>:20 - Server started
2025-08-17 11:52:44.951 | INFO     | src.main:<module>:20 - Server started
2025-08-17 11:52:44.967 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 11:52:44.967 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 11:52:50.074 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 11:52:50.074 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 12:03:14.912 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-17 12:03:14.912 | INFO     | src.main:log_requests:51 - Incoming request: OPTIONS /sessions/new
2025-08-17 12:03:14.913 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.08ms)
2025-08-17 12:03:14.913 | INFO     | src.main:log_requests:54 - OPTIONS /sessions/new → 200 (1.08ms)
2025-08-17 12:03:15.228 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 12:03:15.228 | INFO     | src.main:log_requests:51 - Incoming request: POST /sessions/new
2025-08-17 12:03:23.567 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (8338.69ms)
2025-08-17 12:03:23.567 | INFO     | src.main:log_requests:54 - POST /sessions/new → 200 (8338.69ms)
2025-08-17 12:07:35.674 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 12:07:35.674 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 12:08:01.620 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 12:08:38.998 | INFO     | src.main:<module>:20 - Server started
2025-08-17 12:08:38.998 | INFO     | src.main:<module>:20 - Server started
2025-08-17 12:08:39.035 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 12:08:39.035 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 12:08:44.839 | ERROR    | src.main:lifespan:83 - Database init error: (psycopg2.OperationalError) connection to server at "ep-shy-queen-a8t044kf-pooler.eastus2.azure.neon.tech" (52.167.188.143), port 5432 failed: timeout expired

(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-08-17 12:08:44.839 | ERROR    | src.main:lifespan:83 - Database init error: (psycopg2.OperationalError) connection to server at "ep-shy-queen-a8t044kf-pooler.eastus2.azure.neon.tech" (52.167.188.143), port 5432 failed: timeout expired

(Background on this error at: https://sqlalche.me/e/20/e3q8)
2025-08-17 12:09:04.219 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 12:09:04.219 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 12:09:24.353 | INFO     | src.router.sessions:<module>:19 - Server started
2025-08-17 12:10:01.404 | INFO     | src.main:<module>:20 - Server started
2025-08-17 12:10:01.404 | INFO     | src.main:<module>:20 - Server started
2025-08-17 12:10:01.440 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 12:10:01.440 | INFO     | src.main:lifespan:77 - Starting up...
2025-08-17 12:10:09.339 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 12:10:09.339 | INFO     | src.main:lifespan:81 - Database tables created successfully
2025-08-17 15:14:18.169 | INFO     | src.main:lifespan:85 - Shutting down...
2025-08-17 15:14:18.169 | INFO     | src.main:lifespan:85 - Shutting down...
